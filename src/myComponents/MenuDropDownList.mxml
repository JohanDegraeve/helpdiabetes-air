<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!--
author : Johan Degraeve
Reason why I created this component was to create the variable maximumItemWidth, which must be set when creating the component, to 
the size of the longest item in the dropdownlist.
It will then be used in MenuDropDownListSkin to determine the size of the rectangle.

Also using popupisopen here : basically what I want to achieve is that when user hits the popupanchor two times, the first time the item list will pop up ,
but the second time it will be removed. Normally, according to documentation, that should happen, but it didn't happen during my tests, so tried a lot and this is what 
solved it : static variable popUpIsOpen says if pop up (should be) is open or not. 
-->
<s:DropDownList xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				initialize="init()"> 

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->

	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import model.ModelLocator;
			
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			
			import spark.components.Button;
			import spark.components.Label;
			
			//maintains status of popup
			private var popUpIsOpen:Boolean = false;
			//time since last chang of pop up, using this because sometimes when just clicking once, the app reacts as if I clicked two times
			private var timeStamp:Number;
			private static const    MINIMUM_DURATION:Number = 1000;//pop up shall not open if previous click was les than minimumDuration 
			//width of longest text item in the drop down list - with default value
			private var sizeOfLongestText:Number = 50;
			private var sizeOfLongestTextCalculated:Boolean = false;
			
			public function getSizeOfLongestText():Number {
				if (sizeOfLongestTextCalculated)
					return sizeOfLongestText;
				sizeOfLongestTextCalculated = true;
				//calculate the length of the longest text, in pixels.

				for (var i:int = 0;i < dataProvider.length; i++) {
					var label:Label = new Label();
					label.regenerateStyleCache(false);
					label.setStyle("fontSize",this.getStyle("fontSize")) ;
					label.setStyle("fontStyle",this.getStyle("fontStyle")) ;
					label.setStyle("fontWeight",this.getStyle("fontWeight"));
					label.setStyle("fontFamily",this.getStyle("fontFamily"));
					
					var textLineMetricx:TextLineMetrics = label.measureText( dataProvider.getItemAt(i).toString());
					if (textLineMetricx.width + ModelLocator.SIZE_OF_LONGEST_TEXT_OFFSET > sizeOfLongestText)
						sizeOfLongestText = textLineMetricx.width + ModelLocator.SIZE_OF_LONGEST_TEXT_OFFSET;
				}
				return sizeOfLongestText;
			}
			
			import spark.events.DropDownEvent;
			public function getRowHeight():Number {
				return this.height;
			}
			
			//to add event listener for mouse click and dropdown list close
			public function init ():void {
				addEventListener(MouseEvent.CLICK, handleMouseClick,false,0,false);
				addEventListener(DropDownEvent.CLOSE,handleDropDownClose,false,0,false);
				timeStamp = (new Date()).time;
			} 
			
			//if pop up is open, close it and set popupisopen to false, otherwise set popupisopen to true
			public function handleMouseClick(e:Event):void {
				if (popUpIsOpen) {
					popUpIsOpen = false;
					closeDropDown(true) ;
				}
				else {
					if ((new Date()).time - timeStamp <  MINIMUM_DURATION) {
						popUpIsOpen = false;
						closeDropDown(true);
					} else {
						popUpIsOpen = true;
						timeStamp = (new Date()).time; 
					}
				}
			}
			
			//drop down list is closed for any reason (eg user selected item), set popupisopen to false
			public function handleDropDownClose(e:Event):void {
				popUpIsOpen = false;
			}
		    
			public function setPopUpIsOpen(value:Boolean):void {
				popUpIsOpen = value;
			}
			
						

		]]>
	</fx:Script>
</s:DropDownList>
