<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2015  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   initialize="skinnablepopupcontainer1_initializeHandler(event)">
	
	<fx:Metadata>
		[ResourceBundle("general")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import spark.components.View;
			
			private var activeView:View;
			private static var minimumApplicationDPI:Number = 160;//must match the applicationDPI in helpdiabetes.mxml
			private static var minimumScreenWidth:Number = 320;//minimum screenwidth for which the screen works will with the smallest png's
			
			/**
			 * here all the variables needed to make it devicedependent
			 */
			[Bindable]
			private var downScaleFactor:Number
			[Bindable]
			private var imageSourceLaunchIcon:String;
			[Bindable]
			private var launchIconWidthAndHeight:Number;
			[Bindable]
			private var imageSourceExperitLogo:String;
			[Bindable]
			private var experitLogoWidth:Number;
			[Bindable]
			private var experitLogoHeight:Number;

			/**
			 * how much pixels below the helpdiabetes icon does the label "HelpDiabetes" come<br>
			 * CALCULATED, no need to make device dependent
			 */
			[Bindable]
			private var paddingTopForHelpDiabetesLabel:Number;
			
			/**
			 * how much pixels from the left side of the screen does the label "HelpDiabetes" come<br>
			 * CALCULATED, no need to make device dependent
			 */
			[Bindable]
			private var paddingLeftForHelpdiabetesLabel:Number;
			
			/**
			 * fontsize for HelpDiabetes label<br>
			 * DEVICEDEPENDENT
			 */
			[Bindable]
			private var fontSizeForHelpDiabetesLabel:Number;
			
			/**
			 *  fontsize for "distributed by" label<br>
			 * DEVICEDEPENDENT
			 */[Bindable]
			private var fontSizeForDistributedByLabel:Number;
			
			public function show(view:View):void
			{
				activeView = view;
				this.position();
				this.open(activeView, false);
			}
			
			private function position():void
			{
				this.width = HelpDiabetes.deviceScreenWidth;
				this.height = HelpDiabetes.deviceScreenHeight;
				this.x = 0;
				this.y = 0;
			}

			private function reposition(event:Event = null):void
			{
				position();
				var textLineMetricx:TextLineMetrics = helpdiabeteslabel.measureText("HelpDiabetes");
				paddingLeftForHelpdiabetesLabel = (width - textLineMetricx.width)/2;
			}

			protected function skinnablepopupcontainer1_initializeHandler(event:FlexEvent):void
			{
				if (HelpDiabetes.isTablet())
					stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE,reposition);
				
				var screenDPI:Number = Capabilities.screenDPI ;
				var mappedDPI:Number = 240;
				if (screenDPI < 200)
					mappedDPI = minimumApplicationDPI;//160 is the applicationDPI in HelpDiabetes.mxml
				if (screenDPI >= 280)
					mappedDPI = 320;
				downScaleFactor = mappedDPI/minimumApplicationDPI;//160 is the applicationDPI in HelpDiabetes.mxml
				
				//DEVICE DEPENDENT
				//for DPI = 160 and 320x455 following is ideal
				imageSourceLaunchIcon = "launchicon_96x96";
				launchIconWidthAndHeight = 96/downScaleFactor;
				imageSourceExperitLogo = "logoexperit_142x54";
				experitLogoHeight = 54/downScaleFactor;
				experitLogoWidth = 142/downScaleFactor;
				fontSizeForHelpDiabetesLabel = 40;
				fontSizeForDistributedByLabel = 10;
				paddingTopForHelpDiabetesLabel = 20;
				//now let's calculated how much bigger is the real device (smallest size or width in portrait)
				var refactoringValue:Number = HelpDiabetes.minimumDeviceSize/minimumScreenWidth;//320 being the ideal size
				//now include the DPI factor
				refactoringValue = refactoringValue * (Capabilities.screenDPI/minimumApplicationDPI);
				//motorola droid pro 0.9
				//for ipad 3 and higher it's 3.9
				//for ipad mini it's 2.4
				//ipad mini retina 4.89
				//for iphone 6 it's 2.38
				//ipod touch 5th gen 2.03
				
				if (refactoringValue > 1.5) {
					imageSourceLaunchIcon = "launchicon_192x192";
					launchIconWidthAndHeight = 192/downScaleFactor;
					imageSourceExperitLogo = "logoexperit_285x112";
					experitLogoHeight = 112/downScaleFactor;
					experitLogoWidth = 285/downScaleFactor;
					fontSizeForHelpDiabetesLabel = 50;
					fontSizeForDistributedByLabel = 20;
					paddingTopForHelpDiabetesLabel = 30;
				}
				if (refactoringValue > 3) {
					imageSourceLaunchIcon = "launchicon_384x385";
					launchIconWidthAndHeight = 384/downScaleFactor;
					imageSourceExperitLogo = "logoexperit_537x237";
					experitLogoHeight = 237/downScaleFactor;
					experitLogoWidth = 537/downScaleFactor;
					fontSizeForHelpDiabetesLabel = 80;
					fontSizeForDistributedByLabel = 30;
					paddingTopForHelpDiabetesLabel = 20;
				}

				//CALCULATED
				
				var textLineMetricx:TextLineMetrics = helpdiabeteslabel.measureText("HelpDiabetes");
				paddingLeftForHelpdiabetesLabel = (width - textLineMetricx.width)/2;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect id="backgroundRect" left="0" right="0" top="0" bottom="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:entries>
					<s:GradientEntry color="0xC8C8C8" />
					<s:GradientEntry color="0xFFFFFF" />
				</s:entries>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<s:Group height="100%">
		<s:layout>
			<s:VerticalLayout >
			</s:VerticalLayout>
		</s:layout>
		<s:HGroup paddingLeft="{(width - launchIconWidthAndHeight)/2}" paddingTop="{(HelpDiabetes.deviceScreenHeight/2 - launchIconWidthAndHeight)/2}">
			<s:BitmapImage source="{'assets/'+ imageSourceLaunchIcon + '.png'}" width="{launchIconWidthAndHeight}" height="{launchIconWidthAndHeight}"/>
		</s:HGroup>
		<s:Label id="helpdiabeteslabel" paddingTop="{paddingTopForHelpDiabetesLabel}" paddingLeft="{paddingLeftForHelpdiabetesLabel}" text="HelpDiabetes" fontSize="{fontSizeForHelpDiabetesLabel}" color="0x81a8de" verticalAlign="middle"/>
		<s:Spacer height="100%"/>
		<s:Label  id="distributedbylabel" paddingLeft="{paddingLeftForHelpdiabetesLabel}" text="{resourceManager.getString('foodcounterview','distributed_by')}" fontSize="{fontSizeForDistributedByLabel}" color="0x666666" verticalAlign="middle"/>
		<s:HGroup paddingLeft="{(width - experitLogoWidth)/2}">
			<s:BitmapImage source="{'assets/'+ imageSourceExperitLogo + '.png'}" width="{experitLogoWidth}" height="{experitLogoHeight}"/>	
		</s:HGroup>
		<s:HGroup paddingLeft="{paddingLeftForHelpdiabetesLabel}">
			<s:Button id="buttonwithexperiturl" label="{resourceManager.getString('foodcounterview','wwwexperitbe')}" fontSize="{fontSizeForDistributedByLabel}" color="0x666666" textDecoration ="underline" skinClass="skins.ButtonWithoutBorderAndBackGroundSkin" click="{navigateToURL(new URLRequest('http://' + resourceManager.getString('foodcounterview','wwwexperitbe')))}"/>
		</s:HGroup>
	</s:Group>
	
</s:SkinnablePopUpContainer>