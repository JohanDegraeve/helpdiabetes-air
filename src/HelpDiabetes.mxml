<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:s="library://ns.adobe.com/flex/spark"
								  initialize="initApplication()" 
								  applicationDPI="160" 
								  splashScreenImage="@Embed('assets/bg_withappname.png')"
								  splashScreenScaleMode="zoom"
								  skinClass="skins.ApplicationSkin"
								  >
	<fx:Style source="HelpDiabetes.css"/>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("helpdiabetes")]
	</fx:Metadata>
	<fx:Style source="assets/style.css"/>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			import model.ModelLocator;
			
			import myComponents.AlertPopUp;
			
			private var  foodItems:ArrayCollection;
			
			[Bindable]
			[Embed(source='assets/ic_tab_meal_selected.png')]
			private var mealIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_exercise_selected.png')]
			private var exerciseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_glucose_selected.png')]
			private var glucoseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_tracking_selected.png')]
			private var trackingIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_medicine_selected.png')]
			private var medicinesIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_settings_selected.png')]
			private var settingsIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_meal_unselected.png')]
			private var nomealIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_exercise_unselected.png')]
			private var noexerciseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_glucose_unselected.png')]
			private var noglucoseIconno:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_tracking_unselected.png')]
			private var notrackingIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_settings_unselected.png')]
			private var nosettingsIcon:Class;
			
			[Bindable]
			[Embed(source='assets/ic_tab_medicine_unselected.png')]
			private var nomedicinesIcon:Class;
			
			private var alertPopUp:AlertPopUp;			
			
			/**
			 * just here to make sure an instance off the modellocator is held throughout the existance of the application, so it's intialized only once<br>
			 * It doesn't necessarily need to be used, you can also use modelLocator.getInstance()
			 */
			public var modelLocator:ModelLocator = ModelLocator.getInstance();
			
			private function addedToStageHandler(event:Event):void {
				//tests with emulator show that minimum height of 455 is required
				var deviceScreenWidth:int = Math.min(width,height);
				if (deviceScreenWidth < 455) {
					this.stage.setAspectRatio(StageAspectRatio.PORTRAIT);
					this.stage.autoOrients = false;
				}
			}
			
			
			/**   
			 * here's where the database is initialized and if completed the dataprovider for foodcounterview will be updated. 
			 */
			private function initApplication():void {
				this.addEventListener( Event.ADDED_TO_STAGE, addedToStageHandler );
				tabbedNavigator.addEventListener(IndexChangeEvent.CHANGE, changeIcon);
			}

			private function okClicked(event: PopUpEvent):void {
				if (alertPopUp != null) {
					PopUpManager.removePopUp(alertPopUp);
					if (alertPopUp.hasEventListener(PopUpEvent.CLOSE)) {
						alertPopUp.removeEventListener(PopUpEvent.CLOSE, okClicked);
					}
					alertPopUp = null;
				}
			}

			
			protected function changeIcon(event:IndexChangeEvent):void {
				(navigators[0] as ViewNavigator).icon = nomealIcon;
				(navigators[1] as ViewNavigator).icon = notrackingIcon;
				(navigators[2] as ViewNavigator).icon = nomedicinesIcon;
				(navigators[3] as ViewNavigator).icon = noglucoseIconno;
				(navigators[4] as ViewNavigator).icon = noexerciseIcon;
				(navigators[5] as ViewNavigator).icon = nosettingsIcon;
				switch (event.newIndex) {
					case (0): 
						(navigators[0] as ViewNavigator).icon = mealIcon;
						break;
					case(1):
						(navigators[1] as ViewNavigator).icon = trackingIcon;
						break;
					case(2):
						(navigators[2] as ViewNavigator).icon = medicinesIcon;
						break;
					case(3):
						(navigators[3] as ViewNavigator).icon = glucoseIcon;
						break;
					case(4):
						(navigators[4] as ViewNavigator).icon = exerciseIcon;
						break;
					case(5):
						(navigators[5] as ViewNavigator).icon = settingsIcon;
						break;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:ViewNavigator icon="@Embed('assets/ic_tab_meal_unselected.png')"   width="100%" height="100%" firstView="views.FoodCounterView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_tracking_unselected.png')"  width="100%" height="100%" firstView="views.TrackingView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_medicine_unselected.png')"   width="100%" height="100%" firstView="views.EditMedicinEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_glucose_unselected.png')"  width="100%" height="100%" firstView="views.EditBGEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_exercise_unselected.png')"   width="100%" height="100%" firstView="views.EditExerciseEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_settings_unselected.png')"   width="100%" height="100%" firstView="views.SettingsView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_settings_unselected.png')"   width="100%" height="100%" firstView="views.BloodGlucoseGraphView"/>
	
</s:TabbedViewNavigatorApplication>
