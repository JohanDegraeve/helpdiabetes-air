<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
							xmlns:s="library://ns.adobe.com/flex/spark"
							applicationDPI="160" firstView="views.FoodCounterView"
							initialize="initApplication()">
	<fx:Style source="HelpDiabetes.css"/>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import databaseclasses.*;
			
			import model.ModelLocator;
			
			import mx.collections.ArrayCollection;
			
			import databaseclasses.FoodItem;
			
			private var  foodItems:ArrayCollection;
			
			/**   
			 * here's where the database is initialized and if completed the dataprovider for foodcounterview will be updated. 
			 */
			private function initApplication():void {
				var dispatcher:EventDispatcher = new EventDispatcher();
				dispatcher.addEventListener(DatabaseEvent.RESULT_EVENT,onInitResult);
				dispatcher.addEventListener(DatabaseEvent.ERROR_EVENT,onInitError);
				/********* DELETE THIS**********/
				//Database.getInstance().deleteDatabase();
				/********* DELETE THIS**********/

				Database.getInstance().init(dispatcher);
				
				function onInitResult(event:Event):void
				{
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, onInitError);
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, onInitResult);
					dispatcher.addEventListener(DatabaseEvent.RESULT_EVENT,retrieveFoodItemList);
					dispatcher.addEventListener(DatabaseEvent.ERROR_EVENT,onRetrieveListError);
					Database.getInstance().getAllFoodItemDescriptions(dispatcher);
				}
				
				
				function onInitError(event:Event):void
				{	
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, onInitError);
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, onInitResult);
				}
				
				function retrieveFoodItemList(de:DatabaseEvent):void {
					
					foodItems = new ArrayCollection();

					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, retrieveFoodItemList);
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, onRetrieveListError);
					
					if (de.data && de.data is Array) {
						for each ( var o:Object in de.data )
						{
							foodItems.addItem(new FoodItem(o.description as String, new ArrayCollection(), o.itemid as int));
						}
						ModelLocator.getInstance().foodItemList = foodItems;
					} 
				}

				function onRetrieveListError(event:Event):void
				{	
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, retrieveFoodItemList);
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, onRetrieveListError);
				}
				
				
				
			}

		]]>
	</fx:Script>
	
</s:ViewNavigatorApplication>
