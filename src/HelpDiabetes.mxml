<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:s="library://ns.adobe.com/flex/spark"
								  initialize="initApplication()" 
								  applicationDPI="160" 
								  splashScreenImage="@Embed('assets/bg_withappname.png')"
								  splashScreenScaleMode="zoom"
								  skinClass="skins.ApplicationSkin"
								  >
	<fx:Style source="HelpDiabetes.css"/>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("helpdiabetes")]
	</fx:Metadata>
	<fx:Style source="assets/style.css"/>
	<fx:Script>
		<![CDATA[
			
			import databaseclasses.*;
			import databaseclasses.FoodItem;
			
			import model.ModelLocator;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			
			import myComponents.Notification;
			import myComponents.PickerEvent;
			import myComponents.elementFromListPicker;
			
			import spark.events.IndexChangeEvent;
			
			private var  foodItems:ArrayCollection;
			
			[Bindable]
			[Embed(source='assets/ic_tab_meal_selected.png')]
			private var mealIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_exercise_selected.png')]
			private var exerciseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_glucose_selected.png')]
			private var glucoseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_tracking_selected.png')]
			private var trackingIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_medicine_selected.png')]
			private var medicinesIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_settings_selected.png')]
			private var settingsIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_meal_unselected.png')]
			private var nomealIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_exercise_unselected.png')]
			private var noexerciseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_glucose_unselected.png')]
			private var noglucoseIconno:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_tracking_unselected.png')]
			private var notrackingIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_settings_unselected.png')]
			private var nosettingsIcon:Class;
			
			[Bindable]
			[Embed(source='assets/ic_tab_medicine_unselected.png')]
			private var nomedicinesIcon:Class;
			
			
			private var notificationPopUp:Notification;
			
			private var elementPicker:elementFromListPicker;
			
			/**
			 * just here to make sure an instance off the modellocator is held throughout the existance of the application, so it's intialized only once<br>
			 * It doesn't necessarily need to be used, you can also use modelLocator.getInstance()
			 */
			public var modelLocator:ModelLocator = ModelLocator.getInstance();
			
			
			
			
			/**   
			 * here's where the database is initialized and if completed the dataprovider for foodcounterview will be updated. 
			 */
			private function initApplication():void {
				
				tabbedNavigator.addEventListener(IndexChangeEvent.CHANGE, changeIcon);
				
				
				modelLocator.resetLabels();
				
				var dispatcher:EventDispatcher = new EventDispatcher();
				var thisObject:DisplayObject =  this;
				if (Database.databaseExists()) {
					onReturn();
				} else {
					notificationPopUp = new Notification();
					notificationPopUp.notificationText = resourceManager.getString('helpdiabetes','infoaboutlanguageselection')
					notificationPopUp.addEventListener(PickerEvent.PICKER_SET, okClicked);
					PopUpManager.addPopUp(notificationPopUp, this, true);
					PopUpManager.centerPopUp(notificationPopUp);
				}
				
				function okClicked(event: PickerEvent) {
					if (notificationPopUp != null)
						if (notificationPopUp.hasEventListener(PickerEvent.PICKER_SET)) {
							notificationPopUp.removeEventListener(PickerEvent.PICKER_SET, okClicked);
						}
					elementPicker = new elementFromListPicker();
					elementPicker.elements = new ArrayCollection([
						resourceManager.getString('general','english'),
						resourceManager.getString('general','dutch')]);
					elementPicker.addEventListener(UnitChangedEvent.ITEM_SELECTED, onReturn);
					elementPicker.addEventListener(Event.REMOVED_FROM_STAGE,onReturn);
					elementPicker.labelText1 = resourceManager.getString('general','choose_language');
					
					PopUpManager.addPopUp(elementPicker,thisObject,true);
					PopUpManager.centerPopUp(elementPicker);
				}
				
				function onReturn(event: Event = null): void
				{
					if (elementPicker != null) {
						if (elementPicker.hasEventListener(UnitChangedEvent.ITEM_SELECTED)) {
							elementPicker.removeEventListener(UnitChangedEvent.ITEM_SELECTED, onReturn);
							elementPicker.removeEventListener(Event.REMOVED_FROM_STAGE,onReturn);
						}
						PopUpManager.removePopUp(elementPicker);
					}
					
					//we initialize first the localechain in the settngs to the current localechain
					var localeChainAsString:String;
					for (var i:int = 0;i <resourceManager.localeChain.length;i++) {
						localeChainAsString += resourceManager.localeChain[i];
					}
					
					//if event is a unitchangedevent, it means we got here after user clicked a language, so we'll change now the settings
					//if event is not a unitchaged event, it means this application doesn't start first the first itme, so a database already existed and user didn't have to pick a preferred language
					if (event is UnitChangedEvent)  {
						if ((event as UnitChangedEvent).index == 0) {
							resourceManager.localeChain = ["en_US","nl_NL"];
							localeChainAsString = "en_US,nl_NL";
						}
						if ((event as UnitChangedEvent).index == 1) {
							resourceManager.localeChain = ["nl_NL","en_US"];
							localeChainAsString = "nl_NL,en_US";
						}
					}
					//Settings gets the value just determined here above, in any case if the database would already be existing, the localechain from database will be taken and the Settings value will again be overwritten
					Settings.getInstance().setSettingWithoutDatabaseUpdate(Settings.SettingsLOCALECHAIN_asString,localeChainAsString);
					
					dispatcher.addEventListener(DatabaseEvent.RESULT_EVENT,onInitResult);
					dispatcher.addEventListener(DatabaseEvent.ERROR_EVENT,onInitError);
					Database.getInstance().init(dispatcher);
				}
				
				function onInitResult(event:Event):void
				{
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, onInitError);
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, onInitResult);
					
					//time to check if localechain has a new value retrieved from the database
					var localeChainAsString:String = Settings.getInstance().getSetting(Settings.SettingsLOCALECHAIN_asString);
					var localeChainAsArray:Array = localeChainAsString.split(",");
					resourceManager.localeChain = [];
					for (var j:int = 0;j < localeChainAsArray.length; j++) {
						resourceManager.localeChain.push(localeChainAsArray[j]);
					}
					
					//time to set the labels
					modelLocator.resetLabels();
					
					dispatcher.addEventListener(DatabaseEvent.RESULT_EVENT,retrieveFoodItemList);
					dispatcher.addEventListener(DatabaseEvent.ERROR_EVENT,onRetrieveListError);
					Database.getInstance().getAllFoodItemDescriptions(dispatcher);
				}
				
				function onInitError(event:Event):void
				{	
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, onInitError);
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, onInitResult);
				}
				
				function retrieveFoodItemList(de:DatabaseEvent):void {
					foodItems = new ArrayCollection();
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, retrieveFoodItemList);
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, onRetrieveListError);
					
					if (de.data && de.data is Array) {
						for each ( var o:Object in de.data )
						{
							foodItems.addItem(new FoodItem(o.description as String, new ArrayCollection(), o.itemid as int));
						}
						ModelLocator.getInstance().foodItemList = foodItems;
					} 
				}
				
				function onRetrieveListError(event:Event):void
				{	
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, retrieveFoodItemList);
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, onRetrieveListError);
				}
				
			}
			
			protected function changeIcon(event:IndexChangeEvent):void {
				(navigators[0] as ViewNavigator).icon = nomealIcon;
				(navigators[1] as ViewNavigator).icon = notrackingIcon;
				(navigators[2] as ViewNavigator).icon = nomedicinesIcon;
				(navigators[3] as ViewNavigator).icon = noglucoseIconno;
				(navigators[4] as ViewNavigator).icon = noexerciseIcon;
				(navigators[5] as ViewNavigator).icon = nosettingsIcon;
				switch (event.newIndex) {
					case (0): 
						(navigators[0] as ViewNavigator).icon = mealIcon;
						break;
					case(1):
						(navigators[1] as ViewNavigator).icon = trackingIcon;
						break;
					case(2):
						(navigators[2] as ViewNavigator).icon = medicinesIcon;
						break;
					case(3):
						(navigators[3] as ViewNavigator).icon = glucoseIcon;
						break;
					case(4):
						(navigators[4] as ViewNavigator).icon = exerciseIcon;
						break;
					case(5):
						(navigators[5] as ViewNavigator).icon = settingsIcon;
						break;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:ViewNavigator icon="@Embed('assets/ic_tab_meal_unselected.png')"   width="100%" height="100%" firstView="views.FoodCounterView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_tracking_unselected.png')"  width="100%" height="100%" firstView="views.TrackingView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_medicine_unselected.png')"   width="100%" height="100%" firstView="views.EditMedicinEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_glucose_unselected.png')"  width="100%" height="100%" firstView="views.EditBGEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_exercise_unselected.png')"   width="100%" height="100%" firstView="views.EditExerciseEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_settings_unselected.png')"   width="100%" height="100%" firstView="views.SettingsView"/>
	
</s:TabbedViewNavigatorApplication>
