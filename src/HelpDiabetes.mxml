<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2016  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:s="library://ns.adobe.com/flex/spark"
								  initialize="initApplication()"
								  activate="activateHandler(event)"
								  applicationDPI="160"
								  skinClass="skins.ApplicationSkin"
								  >
	<fx:Style source="HelpDiabetes.css"/>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
	</fx:Metadata>
	<fx:Style source="assets/style.css"/>
	<fx:Script>
		<![CDATA[
			import com.distriqt.extension.core.Core;
			import com.distriqt.extension.dialog.Dialog;
			import com.freshplanet.ane.AirBackgroundFetch.BackgroundFetch;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			import databaseclasses.Settings;
			
			import distriqtkey.DistriqtKey;
			
			import model.ModelLocator;
			
			import myComponents.AlertPopUp;
			
			import utilities.Synchronize;
			
			import views.FoodCounterView;
			
			private var  foodItems:ArrayCollection;
			
			[Bindable]
			[Embed(source='assets/ic_tab_meal_selected.png')]
			private var mealIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_exercise_selected.png')]
			private var exerciseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_glucose_selected.png')]
			private var glucoseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_tracking_selected.png')]
			private var trackingIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_medicine_selected.png')]
			private var medicinesIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_settings_selected.png')]
			private var settingsIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_meal_unselected.png')]
			private var nomealIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_exercise_unselected.png')]
			private var noexerciseIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_glucose_unselected.png')]
			private var noglucoseIconno:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_tracking_unselected.png')]
			private var notrackingIcon:Class;
			[Bindable]
			[Embed(source='assets/ic_tab_settings_unselected.png')]
			private var nosettingsIcon:Class;
			
			[Bindable]
			[Embed(source='assets/ic_tab_medicine_unselected.png')]
			private var nomedicinesIcon:Class;
			
			private var alertPopUp:AlertPopUp;	
			
			[Bindable]
			public static var deviceScreenWidth:Number;
			[Bindable]
			public static var deviceScreenHeight:Number;
			[Bindable]
			public static var minimumDeviceSize:Number;
			
			/**
			 * just here to make sure an instance off the modellocator is held throughout the existance of the application, so it's intialized only once<br>
			 * It doesn't necessarily need to be used, you can also use ModelLocator.getInstance
			 */
			private var modelLocator:ModelLocator = ModelLocator.getInstance();
			
			private function addedToStageHandler(event:Event):void {
				deviceScreenHeight = height;
				deviceScreenWidth = width;
				minimumDeviceSize = Math.min(deviceScreenHeight,deviceScreenWidth);

				this.stage.frameRate = 12;

				//it's also time to check Settings.SettingsSelectedOrientation
				if (Settings.getInstance().getSetting(Settings.SettingsSelectedOrientation) == "0") {//portrait
					this.stage.setAspectRatio(StageAspectRatio.PORTRAIT);
					this.stage.autoOrients = false;
				}
				else if (Settings.getInstance().getSetting(Settings.SettingsSelectedOrientation) == "1") {//landscape
					this.stage.setAspectRatio(StageAspectRatio.LANDSCAPE);
					this.stage.autoOrients = false;
				}
				else if (Settings.getInstance().getSetting(Settings.SettingsSelectedOrientation) == "2") {//automatic
					this.stage.setAspectRatio(StageAspectRatio.ANY);
					this.stage.autoOrients = true;
				} else {//value = 3 or true
					if (isTablet()) {
						this.stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE,orientationChanged);
						this.stage.setAspectRatio(StageAspectRatio.ANY);
					} else {
						this.stage.autoOrients = false;
					}
				}
				FoodCounterView.screenSizeKnown();
				
				BackgroundFetch.init();
				Dialog.init(DistriqtKey.distriqtKey);
				Core.init(DistriqtKey.distriqtKey);
				Dialog.service.root = this.stage;
			}
			
			private function orientationChanged(event:Event):void {
				deviceScreenHeight = height;
				deviceScreenWidth = width;
			}
			
			public static function isTablet():Boolean {
				if (!deviceScreenHeight || ! deviceScreenWidth)
					return false;
				var deviceWidth:Number = deviceScreenWidth / Capabilities.screenDPI;
				var deviceHeight:Number = deviceScreenHeight / Capabilities.screenDPI;
				var diagonalInches:Number = Math.sqrt((deviceWidth * deviceWidth)+ (deviceHeight * deviceHeight));
				if(diagonalInches >= 6.8)
					return true;
				else
					return false;
			}
			
			private function initApplication():void {
				this.addEventListener( Event.ADDED_TO_STAGE, addedToStageHandler );
				tabbedNavigator.addEventListener(IndexChangeEvent.CHANGE, changeIcon);
			}
			
			protected function changeIcon(event:IndexChangeEvent):void {
				(navigators[0] as ViewNavigator).icon = nomealIcon;
				(navigators[1] as ViewNavigator).icon = notrackingIcon;
				(navigators[2] as ViewNavigator).icon = nomedicinesIcon;
				(navigators[3] as ViewNavigator).icon = noglucoseIconno;
				(navigators[4] as ViewNavigator).icon = noexerciseIcon;
				(navigators[5] as ViewNavigator).icon = nosettingsIcon;
				switch (event.newIndex) {
					case (0): 
						(navigators[0] as ViewNavigator).icon = mealIcon;
						break;
					case(1):
						(navigators[1] as ViewNavigator).icon = trackingIcon;
						break;
					case(2):
						(navigators[2] as ViewNavigator).icon = medicinesIcon;
						break;
					case(3):
						(navigators[3] as ViewNavigator).icon = glucoseIcon;
						break;
					case(4):
						(navigators[4] as ViewNavigator).icon = exerciseIcon;
						break;
					case(5):
						(navigators[5] as ViewNavigator).icon = settingsIcon;
						break;
				}
			}
			
			protected function activateHandler(event:Event):void
			{
				Synchronize.getInstance().startSynchronize(false,false,null);
				if (stage != null) {
					ModelLocator.frameRate = stage.frameRate;
				}
				ModelLocator.recalculateActiveInsulin(null);
			}
			
		]]>
	</fx:Script>
	
	<s:ViewNavigator icon="@Embed('assets/ic_tab_meal_unselected.png')"   width="100%" height="100%" firstView="views.FoodCounterView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_tracking_unselected.png')"  width="100%" height="100%" firstView="views.TrackingView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_medicine_unselected.png')"   width="100%" height="100%" firstView="views.EditMedicinEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_glucose_unselected.png')"  width="100%" height="100%" firstView="views.EditBGEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_exercise_unselected.png')"   width="100%" height="100%" firstView="views.EditExerciseEventView"/>
	<s:ViewNavigator icon="@Embed('assets/ic_tab_settings_unselected.png')"   width="100%" height="100%" firstView="views.SettingsView"/>
	
</s:TabbedViewNavigatorApplication>
