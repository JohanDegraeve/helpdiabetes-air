<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:TabbedMobileApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 initialize="initApplication()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import databaseclasses.Database;
			import databaseclasses.DatabaseEvent;
			import databaseclasses.DatabaseResponder;
			
			import model.ModelLocator;
			
			import mx.collections.ArrayCollection;
			
			private var  foodItems:ArrayCollection;
			
			/**   
			 * here's where the database is initialized and if completed the dataprovider for foodcounterview will be updated. 
			 */
			private function initApplication():void {
				var internalResponder:DatabaseResponder = new DatabaseResponder();
				internalResponder.addEventListener(DatabaseEvent.RESULT_EVENT,onInitResult);
				internalResponder.addEventListener(DatabaseEvent.ERROR_EVENT,onInitError);
				/********* DELETE THIS**********/
				Database.getInstance().deleteDatabase();
				/********* DELETE THIS**********/

				Database.getInstance().init(internalResponder);
				
				function onInitResult(de:DatabaseEvent):void
				{
					internalResponder.removeEventListener(DatabaseEvent.ERROR_EVENT, onInitError);
					internalResponder.removeEventListener(DatabaseEvent.RESULT_EVENT, onInitResult);
					//internalResponder = new DatabaseResponder();
					internalResponder.addEventListener(DatabaseEvent.RESULT_EVENT,retrieveFoodItemList);
					internalResponder.addEventListener(DatabaseEvent.ERROR_EVENT,onRetrieveListError);
					Database.getInstance().getAllFoodItems([internalResponder]);
				}
				
				function onRetrieveListError(de:DatabaseEvent):void
				{	
					internalResponder.removeEventListener(DatabaseEvent.ERROR_EVENT, onRetrieveListError);
					internalResponder.removeEventListener(DatabaseEvent.RESULT_EVENT, retrieveFoodItemList);
				}
				
				function onInitError(de:DatabaseEvent):void
				{	
					internalResponder.removeEventListener(DatabaseEvent.ERROR_EVENT, onInitError);
					internalResponder.removeEventListener(DatabaseEvent.RESULT_EVENT, onInitResult);
				}
				
				function retrieveFoodItemList(de:DatabaseEvent):void {
					
					foodItems = new ArrayCollection();

					internalResponder.removeEventListener(DatabaseEvent.ERROR_EVENT, onRetrieveListError);
					internalResponder.removeEventListener(DatabaseEvent.RESULT_EVENT, retrieveFoodItemList);
					
					if (de.data && de.data is Array) {
						for each ( var o:Object in de.data )
						{
							foodItems.addItem(o.description);
						}
						ModelLocator.getInstance().foodItemList = foodItems;
					} 
				}
			}

		]]>
	</fx:Script>
	<s:ViewNavigator id="Counter" label="Counter" width="100%" height="100%"
					 firstView="views.FoodCounterView"/>
	<s:ViewNavigator id="Track" label="Track" width="100%" height="100%"
					 firstView="views.TrackingView"/>
	<s:ViewNavigator id="Table" label="Table" width="100%" height="100%"
					 firstView="views.FoodTableView"/>
	<s:ViewNavigator id="Settings" label="Settings" width="100%" height="100%"
					 firstView="views.SettingsView"/>
	<s:ViewNavigator id="InfoAndHelp" label="?" width="100%" height="100%"
					 firstView="views.InfoAndHelpView"/>
</s:TabbedMobileApplication>
