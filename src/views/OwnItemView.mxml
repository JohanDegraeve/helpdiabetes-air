<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title=""
		add="addHandler()"
		creationComplete="onCreationComplete()"
		initialize="view1_initializeHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("ownitemview")]
		[ResourceBundle("general")]
		[ResourceBundle("synchronizeview")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import databaseclasses.FoodItem;
			import databaseclasses.Settings;
			import databaseclasses.Unit;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import myComponents.HelpCallOut;
			import myComponents.PickerEvent;
			
			import utilities.MyGATracker;
			[Bindable]
			private var back_label:String;
			private var errorWarning:HelpCallOut;
			private var helpCallOut:HelpCallOut;
			
			[Bindable]private static var unitdescriptionText:String ="";
			[Bindable]private static var standardamountText:String;
			[Bindable]private static var fooditemdescriptionText:String;
			[Bindable]private static var kilocaloriesText:String;
			[Bindable]private static var gramoffcarbsText:String;
			[Bindable]private static var gramofffatText:String;
			[Bindable]private static var gramoffproteinText:String;
			
			/**
			 * used as context value when pushing the view AddFoodItemView<br>
			 * when addHandler is called, the value of the return object will be check
			 */
			public static const ADD_FOOD_ITEM:int = 1; 

			private function initializeVariables():void {
				unitdescriptionText = resourceManager.getString('general','gram_long');
				standardamountText = "100";
				fooditemdescriptionText = resourceManager.getString('ownitemview','youritem');
				kilocaloriesText = "";
				gramoffcarbsText = "";
				gramofffatText = "";
				gramoffproteinText = "";
			}
			
			
			private function onCreationComplete():void {
				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('ownitemview','help_text_ownitemview');
				helpCallOut.settingId = Settings.SettingsHelpTextOwnFoodItemView;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptextRemoved);
				helpCallOut.open(fooditemdescription,true)
			}

			private function helptextRemoved(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptextRemoved);
			}

			private function addHandler():void {
				if (navigator.poppedViewReturnedObject != null) {
					if (navigator.poppedViewReturnedObject.object.context == ADD_FOOD_ITEM) {
						initializeVariables();
						navigator.popView();
					}
				}
			}

			protected function view1_initializeHandler(event:FlexEvent):void

			{

				back_label = resourceManager.getString('general','back');
				if (unitdescriptionText == "")
					initializeVariables();
			}
			
			private function errorMessageConfirmed(event:Event):void {
				errorWarning.removeEventListener(PickerEvent.PICKER_SET,errorMessageConfirmed);
			}
			
			private function showErrorMessage(errorText:String, owner:DisplayObjectContainer):void {
				errorWarning = new HelpCallOut();
				errorWarning.settingId = 0;
				errorWarning.addEventListener(PickerEvent.PICKER_SET,errorMessageConfirmed);
				errorWarning.helpText = errorText;
				errorWarning.open(owner,true);
			}
			
			private function okClicked(e:MouseEvent = null):void {
				MyGATracker.getInstance().trackPageview( "OwnItemView-GreenButtonClicked" );
				
				if (fooditemdescription.text == "") {showErrorMessage(resourceManager.getString('synchronizeview','fooditemdescriptioncannotbeempty'),fooditemdescription);return;}
				if (gramofcarbs.text == "") {showErrorMessage(resourceManager.getString('synchronizeview','carbvaluemustbenumeric'),gramofcarbs);return;}
				if (standardamount.text == "") {showErrorMessage(resourceManager.getString('synchronizeview','standardamountmustbeinteger'),standardamount);return;}
				if (unitdescription.text == "") {showErrorMessage(resourceManager.getString('synchronizeview','unitmusthaveaname'),unitdescription);return;}
					
				data = new Object();
				data.ownFoodItem = new FoodItem(fooditemdescription.text,
					new ArrayCollection(
						new Array(
						new Unit(unitdescription.text,
							     new Number(standardamount.text),
								 kilocalories.text == "" ? -1 : new Number(kilocalories.text),
								 gramofprotein.text == "" ? -1 : new Number(gramofprotein.text.replace(",",".")),
								 new Number(gramofcarbs.text.replace(",",".")),
								 gramoffat.text == "" ? -1 : new Number(gramoffat.text.replace(",","."))))),
					    0);
				navigator.pushView(AddFoodItemView,data,{
					context:ADD_FOOD_ITEM
				});
			}
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/Done_48x48.png')" id="OkButton" click="okClicked(event)"/>
	</s:actionContent>
	<s:Group y="0" x="0" width="100%" height = "100%"  left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:Group y="0" x="0" width="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextInput width = "50%" text="@{standardamountText}" contentBackgroundColor="0xDCDCDC" id="standardamount" editable="true" borderVisible="false" textAlign="left" restrict="0-9"/>
			<s:TextInput width = "50%" text="@{unitdescriptionText}"  contentBackgroundColor="0xDCDCDC" id="unitdescription" editable="true" borderVisible="false" textAlign="left" />
		</s:Group>
		<s:Group>
			<s:TextInput text="@{fooditemdescriptionText}" contentBackgroundColor="0xDCDCDC" id="fooditemdescription" editable="true" borderVisible="false" textAlign="left" />
		</s:Group>
		<s:Group y="0" x="0" width="100%">
			<s:Label  height="30" text="{resourceManager.getString('ownitemview','contains')}" verticalAlign="middle"/>
		</s:Group>
		<s:Group y="0" x="0" width="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextInput width = "50%" text="@{gramoffcarbsText}" contentBackgroundColor="0xDCDCDC" id="gramofcarbs" editable="true" borderVisible="false" textAlign="left" restrict="0-9.,"/>
			<s:Label  height="30" width="50%" text="{resourceManager.getString('general','gram_of_carbs_short')}" verticalAlign="middle"/>
		</s:Group>
		<s:Group y="0" x="0" width="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextInput width = "50%" text="@{kilocaloriesText}" contentBackgroundColor="0xDCDCDC" id="kilocalories" editable="true" borderVisible="false" textAlign="left" restrict="0-9"/>
			<s:Label  height="30" width="50%" text="{resourceManager.getString('general','kilocalories')}" verticalAlign="middle"/>
		</s:Group>
		<s:Group y="0" x="0" width="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextInput width = "50%" text="@{gramofffatText}" contentBackgroundColor="0xDCDCDC" id="gramoffat" editable="true" borderVisible="false" textAlign="left" restrict="0-9.,"/>
			<s:Label  height="30" width="50%" text="{resourceManager.getString('general','gram_of_fat')}" verticalAlign="middle"/>
		</s:Group>
		<s:Group y="0" x="0" width="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextInput width = "50%" text="@{gramoffproteinText}" contentBackgroundColor="0xDCDCDC" id="gramofprotein" editable="true" borderVisible="false" textAlign="left" restrict="0-9.,"/>
			<s:Label  height="30" width="50%" text="{resourceManager.getString('general','gram_of_protein')}" verticalAlign="middle"/>
		</s:Group>
	</s:Group>
</s:View>
