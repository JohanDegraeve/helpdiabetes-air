<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:myComponents="myComponents.*" 
		actionBarVisible="false">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("trackingview")]
		[ResourceBundle("general")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import databaseclasses.BloodGlucoseEvent;
			import databaseclasses.ExerciseEvent;
			import databaseclasses.MealEvent;
			import databaseclasses.MedicinEvent;
			import databaseclasses.UnitChangedEvent;
			
			import model.ModelLocator;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			
			import myComponents.IListElement;
			import myComponents.elementFromListPicker;
			
			private static var lastClickOnTrackingView:Number;

			/**
			 * Will be used by views pushed by Trackingview (eg editbgeventview), if true then when the pushed view is opened, it will call poptofirstview<br>
			 * This is to force for instance, that when a user has opened trackingview, click on editbgeventview, more than 15 minutes later goes again to tracking view,
			 * to allow that automatically the trackingview will be shown again<br>
			 * To check how it is determined whether true or false, is returned, check the code of get popToFirstViewNecessary<br>
			 * It is necessary that the views that can be pushed by trackingview, call this method each time they are initialized and if pushed by trackingview, or reactivated ?
			 */
			public static function popToFirstViewNecessary():Boolean
			{
				if (isNaN(lastClickOnTrackingView)) {
					lastClickOnTrackingView = (new Date()).valueOf();
					return false;
				}
				if ((new Date()).valueOf() > lastClickOnTrackingView + 15 * 60 * 1000) {
					lastClickOnTrackingView = (new Date()).valueOf();
					return true;
				} 
				lastClickOnTrackingView = (new Date()).valueOf();
				return false;
			}
			
			private function getItemRenderer(item:Object):ClassFactory {
				var temp:Object = ModelLocator.getInstance().trackingList;
				return (item as IListElement).listElementRendererFunction();
			}
			
			private function onListElementClicked(event:MouseEvent):void {
				ModelLocator.getInstance().trackingEventToShow = (event.currentTarget as List).selectedIndex;
				if (ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex) is MealEvent) {//be aware that the mealeventitemrenderer will stop propagation of this mouseevent if it was not extended before the item was clicked
					navigator.pushView(EditMealEventView,ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex)); 					
				} else if (ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex) is MedicinEvent) {
					navigator.pushView(EditMedicinEventView,ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				} else if (ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex) is ExerciseEvent) {
					navigator.pushView(EditExerciseEventView,ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				} else if (ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex) is BloodGlucoseEvent) {
					navigator.pushView(EditBGEventView,ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				}
			}
		]]>
	</fx:Script>
	<s:List id = "trackinglist" left="0" right="0" top="0" bottom="0" width="100%" useVirtualLayout="true" 
			dataProvider="{ModelLocator.getInstance().trackingList}"
			click="onListElementClicked(event)"
			itemRendererFunction="getItemRenderer">
		<s:layout>
			<myComponents:TrackingViewLayout useVirtualLayout="true" />
		</s:layout>
	</s:List>
</s:View>
