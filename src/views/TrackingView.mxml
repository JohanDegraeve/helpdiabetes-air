<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2016  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:myComponents="myComponents.*" 
		creationComplete="creationCompleteHandler(event)"
		add="addHandler()"
		initialize="onInitialize()"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("trackingview")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import databaseclasses.BloodGlucoseEvent;
			import databaseclasses.ExerciseEvent;
			import databaseclasses.Meal;
			import databaseclasses.MealEvent;
			import databaseclasses.MedicinEvent;
			import databaseclasses.SelectedFoodItem;
			import databaseclasses.Settings;
			
			import model.ModelLocator;
			
			import myComponents.HelpCallOut;
			import myComponents.IListElement;
			import myComponents.PickerEvent;
			import myComponents.TrackingViewElement;
			
			import utilities.ExcelSorting;
			import utilities.MyGATracker;
			import utilities.Synchronize;
			
			private static var lastClickOnTrackingView:Number;
			private var helpCallOut:HelpCallOut;
			private var redrawActionButtonTimer:Timer;
			private static var redrawTrackingViewTimer:Timer;
			
			private function addHandler():void {
				if (!navigator.poppedViewReturnedObject) return; 
				if (!navigator.poppedViewReturnedObject.object) return;
				
				if (navigator.poppedViewReturnedObject.object.text != null)
					onTextSet(navigator.poppedViewReturnedObject.object.text as String);
			}
			
			private function onInitialize():void {
				title = resourceManager.getString('trackingview','logbook');
				lastClickOnTrackingView = (new Date()).valueOf();
				ModelLocator.getInstance().addEventListener(ModelLocator.SEARCHACTIVE_CHANGED,reDrawActionButtons);
				ModelLocator.recalculateActiveInsulin();
			}
			
			private function checkRedrawTrackingView(event:Event = null):void {
				if (redrawTrackingViewTimer) {
					if (redrawTrackingViewTimer.running) {
						redrawTrackingViewTimer.removeEventListener(TimerEvent.TIMER,checkRedrawTrackingView);
						redrawTrackingViewTimer.stop();
					}
				}
				
				if (ModelLocator.trackingViewRedrawNecessary) {
					ModelLocator.trackingViewRedrawNecessary = false;
					(trackinglist.layout as TrackingViewLayout).firstUpdateDisplayList = true;
					ModelLocator.trackingList.refresh();
				}
				
				redrawTrackingViewTimer = new Timer(1000, 1);
				redrawTrackingViewTimer.addEventListener(TimerEvent.TIMER,checkRedrawTrackingView);
				redrawTrackingViewTimer.start();
			}
			
			private function reDrawActionButtons(event:Event = null):void {
				if (navigator) {
					if (navigator.actionBar.actionContent) {
						if (ModelLocator.searchActive) {
							if (navigator.actionBar.actionContent.indexOf(searchButton) != -1)
								navigator.actionBar.actionGroup.removeElement(searchButton);
							if (ModelLocator.firstMarkedItemEventId == ModelLocator.lastMarkedItemEventId) {
								upButton.alpha = 0.25;
								downButton.alpha = 0.25
							} else if (ModelLocator.lastMarkedItemEventId == ModelLocator.trackingEventToShow) {
								downButton.alpha = 0.25;
								upButton.alpha = 1;
							} else if (ModelLocator.firstMarkedItemEventId == ModelLocator.trackingEventToShow) {
								upButton.alpha = 0.25;
								downButton.alpha = 1;
							} else  {
								upButton.alpha = 1;
								downButton.alpha = 1;
							}
							if (navigator.actionBar.actionContent.indexOf(upButton) == -1)  {
								navigator.actionBar.actionGroup.addElement(upButton);
								navigator.actionBar.actionGroup.addElement(downButton);
								navigator.actionBar.actionGroup.addElement(cancelButton);
							}
						} else  {
							if (navigator.actionBar.actionContent.indexOf(searchButton) == -1)  {
								navigator.actionBar.actionGroup.addElement(searchButton);
							}
							if (navigator.actionBar.actionContent.indexOf(upButton) != -1)  {
								navigator.actionBar.actionGroup.removeElement(upButton);
								navigator.actionBar.actionGroup.removeElement(downButton);
								navigator.actionBar.actionGroup.removeElement(cancelButton);
							}
						}
						openHelpTexts();
					} else {
						redrawActionButtonTimer = new Timer(100, 1);
						redrawActionButtonTimer.addEventListener(TimerEvent.TIMER,timerEnd);
						redrawActionButtonTimer.start();
					}
				} else {
					redrawActionButtonTimer = new Timer(100, 1);
					redrawActionButtonTimer.addEventListener(TimerEvent.TIMER,timerEnd);
					redrawActionButtonTimer.start();
				}
				
				function timerEnd():void {
					reDrawActionButtons();
				}
			}
			
			/**
			 * Will be used by views pushed by Trackingview (eg editbgeventview), if true then when the pushed view is opened, it will call poptofirstview<br>
			 * This is to force for instance, that when a user has opened trackingview, click on editbgeventview, more than 15 minutes later goes again to tracking view,
			 * to allow that automatically the trackingview will be shown again<br>
			 * To check how it is determined whether true or false, is returned, check the code of get popToFirstViewNecessary<br>
			 * It is necessary that the views that can be pushed by trackingview, call this method each time they are initialized and if pushed by trackingview, or reactivated ?
			 */
			public static function popToFirstViewNecessary():Boolean
				
			{
				if (isNaN(lastClickOnTrackingView)) {
					lastClickOnTrackingView = (new Date()).valueOf();
					return false;
				}
				if ((new Date()).valueOf() > lastClickOnTrackingView + 15 * 60 * 1000) {
					lastClickOnTrackingView = (new Date()).valueOf();
					return true;
				} 
				lastClickOnTrackingView = (new Date()).valueOf();
				return false;
			}
			
			private function getItemRenderer(item:Object):ClassFactory {
				return (item as IListElement).listElementRendererFunction();
			}
			
			private function onListElementClicked(event:MouseEvent):void {
				if ((event.currentTarget as List).selectedIndex == -1)
					return;
				ModelLocator.trackingEventToShow = (ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex) as TrackingViewElement).eventid;
				if (ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex) is MealEvent) {//be aware that the mealeventitemrenderer will stop propagation of this mouseevent if it was not extended before the item was clicked
					MyGATracker.getInstance().trackPageview( "TrackingView-MealEventClicked" );
					
					navigator.pushView(EditMealEventView,ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex)); 					
				} else if (ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex) is MedicinEvent) {
					MyGATracker.getInstance().trackPageview( "TrackingView-MedicinEventClicked" );
					navigator.pushView(EditMedicinEventView,ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				} else if (ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex) is ExerciseEvent) {
					MyGATracker.getInstance().trackPageview( "TrackingView-ExerciseEventClicked" );
					navigator.pushView(EditExerciseEventView,ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				} else if (ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex) is BloodGlucoseEvent) {
					MyGATracker.getInstance().trackPageview( "TrackingView-BGEventClicked" );
					navigator.pushView(EditBGEventView,ModelLocator.trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				}
			}
			
			private function searchClicked(e:MouseEvent = null):void {
				data = new Object();
				data.title = "";
				data.topText = resourceManager.getString('trackingview','searchforfood');
				data.helpTextSettingId = Settings.SettingsHelpTextTrackingView1;
				data.helpText = resourceManager.getString('trackingview','help_text_entersearchtext');
				navigator.pushView(TextPickerView,data);				
			}
			
			private function onTextSet(textSet:String): void
			{
				var cntr:int = 0;
				var selitemctr:int = 0;
				ModelLocator.searchActive = false;
				ModelLocator.firstMarkedItemEventId = "0";
				ModelLocator.lastMarkedItemEventId = "0";
				
				if (textSet == "")
					return;
				var elementsFound:Boolean = false;
				var splittedText:Array = textSet.split(" ");
				//search the first text, as long as it's not an empty space
				var splittedTextCntr:int = 0;
				for (;splittedTextCntr < splittedText.length;splittedTextCntr++) {
					if (splittedText[splittedTextCntr] != "")
						break;
				}
				if (splittedTextCntr == splittedText.length)
					return;//there seem to be only space
				
				//start with the first substring
				
				for (cntr = 0;cntr < ModelLocator.trackingList.length;cntr++) {
					var allTextInOneString:String = "";
					if (ModelLocator.trackingList.getItemAt(cntr) is MealEvent) {
						var mealEvent:MealEvent = ModelLocator.trackingList.getItemAt(cntr) as MealEvent;
						for (selitemctr = 0;selitemctr < mealEvent.selectedFoodItems.length;selitemctr++) {
							allTextInOneString += " " + (mealEvent.selectedFoodItems.getItemAt(selitemctr) as SelectedFoodItem).itemDescription;
						}
						allTextInOneString += " " + mealEvent.comment;
					} else if (ModelLocator.trackingList.getItemAt(cntr) is ExerciseEvent) {
						var exerciseEvent:ExerciseEvent = ModelLocator.trackingList.getItemAt(cntr) as ExerciseEvent;
						allTextInOneString += " " + exerciseEvent.level;
						allTextInOneString += " " + exerciseEvent.comment;
					} else if (ModelLocator.trackingList.getItemAt(cntr) is BloodGlucoseEvent) {
						allTextInOneString += " " + (ModelLocator.trackingList.getItemAt(cntr) as BloodGlucoseEvent).comment;
					} else if (ModelLocator.trackingList.getItemAt(cntr) is MedicinEvent) {
						var medicinEvent:MedicinEvent = ModelLocator.trackingList.getItemAt(cntr) as MedicinEvent;
						allTextInOneString += " " + medicinEvent.medicinName;
						allTextInOneString += " " + medicinEvent.comment;
					} 
					splittedTextCntr = 0;
					while (splittedTextCntr < splittedText.length)
						if (ExcelSorting.stringAhasStringB(allTextInOneString,splittedText[splittedTextCntr] as String))
							splittedTextCntr++;
					else
					break;
					if (splittedTextCntr == splittedText.length) {
						(ModelLocator.trackingList.getItemAt(cntr) as TrackingViewElement).mark = true;
						ModelLocator.lastMarkedItemEventId = (ModelLocator.trackingList.getItemAt(cntr) as TrackingViewElement).eventid;
						if (ModelLocator.firstMarkedItemEventId == "0")
							ModelLocator.firstMarkedItemEventId = ModelLocator.lastMarkedItemEventId;
						elementsFound = true;
					}
				}
				
				(trackinglist.layout as TrackingViewLayout).firstUpdateDisplayList = true;
				ModelLocator.trackingList.refresh();//forces a redraw
				
				if (elementsFound) {
					ModelLocator.trackingEventToShow = ModelLocator.lastMarkedItemEventId;
					ModelLocator.searchActive = true;
				}
			}
			
			private function upClicked(e:MouseEvent = null):void {
				if (!ModelLocator.searchActive)
					return;
				if (ModelLocator.trackingEventToShow == ModelLocator.firstMarkedItemEventId)
					return;
				//first find the location of the current eventtoshow
				var listctr:int = 0;
				for (listctr = 0;listctr < ModelLocator.trackingList.length;listctr++) {
					if ((ModelLocator.trackingList.getItemAt(listctr) as TrackingViewElement).eventid == ModelLocator.trackingEventToShow)
						break;
				}
				//now go up again to find the next marked element
				listctr--;
				for (;listctr >= 0;listctr--) {
					if ((ModelLocator.trackingList.getItemAt(listctr) as TrackingViewElement).mark) {
						ModelLocator.trackingEventToShow = (ModelLocator.trackingList.getItemAt(listctr) as TrackingViewElement).eventid;
						(trackinglist.layout as TrackingViewLayout).firstUpdateDisplayList = true;
						ModelLocator.trackingList.refresh();//forces a redraw of the list
						reDrawActionButtons();
						break;
					}
				}
			}
			
			private function downClicked(e:MouseEvent = null):void {
				if (!ModelLocator.searchActive)
					return;
				if (ModelLocator.trackingEventToShow == ModelLocator.lastMarkedItemEventId)
					return;
				//first find the location of the current eventtoshow
				var listctr:int = 0;
				for (listctr = 0;listctr < ModelLocator.trackingList.length;listctr++) {
					if ((ModelLocator.trackingList.getItemAt(listctr) as TrackingViewElement).eventid == ModelLocator.trackingEventToShow)
						break;
				}
				//now go further down to find the next marked element
				listctr++;
				for (;listctr >= 0;listctr++) {
					if ((ModelLocator.trackingList.getItemAt(listctr) as TrackingViewElement).mark) {
						ModelLocator.trackingEventToShow = (ModelLocator.trackingList.getItemAt(listctr) as TrackingViewElement).eventid;
						(trackinglist.layout as TrackingViewLayout).firstUpdateDisplayList = true;
						ModelLocator.trackingList.refresh();//forces a redraw of the list
						reDrawActionButtons();
						break;
					}
				}
			}
			
			private function cancelClicked(e:MouseEvent = null):void {
				ModelLocator.searchActive = false;
				ModelLocator.firstMarkedItemEventId = "0";
				ModelLocator.lastMarkedItemEventId = "0";
				ModelLocator.trackingEventToShow = 
					(ModelLocator.meals.getItemAt(ModelLocator.selectedMeal) as Meal).mealEvent == null ? "-1" :
					(ModelLocator.meals.getItemAt(ModelLocator.selectedMeal) as Meal).mealEvent.eventid;
				(trackinglist.layout as TrackingViewLayout).firstUpdateDisplayList = true;
				ModelLocator.trackingList.refresh();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				reDrawActionButtons();
				if (!navigator) return;
				if (!navigator.actionBar.actionContent) return;
				if (navigator.actionBar.actionContent.indexOf(searchButton) != -1) {
					if (Settings.getInstance().getSetting(Settings.SettingsHelpTextTrackingViewSearchButton) == 'true') {
						helpCallOut = new HelpCallOut();
						helpCallOut.helpText = resourceManager.getString('trackingview','help_text_searchbutton');
						helpCallOut.settingId = Settings.SettingsHelpTextTrackingViewSearchButton;
						helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext0Removed);
						helpCallOut.open(searchButton,true)
					} else {
						helptext0Removed(null);
					}
				} /*else
				helptext0Removed();*/
				Synchronize.getInstance().startSynchronize(false,false);
				checkRedrawTrackingView();
			}
			
			/**
			 * helptext for tracking list 
			 */
			private function helptext0Removed(event:Event = null):void {
				if (trackinglist.dataProvider.length > 0) {
					if (Settings.getInstance().getSetting(Settings.SettingsHelpTextEditTrackingEvent) == 'true') {
						helpCallOut = new HelpCallOut();
						helpCallOut.helpText = resourceManager.getString('trackingview','help_text_editevent');
						helpCallOut.settingId = Settings.SettingsHelpTextEditTrackingEvent;
						helpCallOut.addEventListener(PickerEvent.PICKER_SET,helpText3Removed);
						helpCallOut.open(trackinglist,true);
					} else {
						helpText3Removed(null);
					}
				}
			}
			
			/**
			 * helptext for active insulin 
			 */
			private function helpText3Removed(event:Event = null):void {
				if (helpCallOut != null) helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helpText3Removed);
				if (Settings.getInstance().getSetting(Settings.SettingsHelpTextActiveInsulinInt) == 'true' && ModelLocator.activeInsulinAmount > 0) {
					var cntr:int;
					for (cntr = 0;cntr < ModelLocator.trackingList.length;cntr++) {
						if (ModelLocator.trackingList.getItemAt(cntr) is MedicinEvent) {
							helpCallOut = new HelpCallOut();
							helpCallOut.helpText = resourceManager.getString('trackingview','help_text_activeinsulin');
							helpCallOut.settingId = Settings.SettingsHelpTextActiveInsulinInt;
							//helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext1Removed);
							helpCallOut.verticalPosition = "after";
							helpCallOut.open(activeInsulin,true);
							cntr = ModelLocator.trackingList.length;
						}  
					}
				}
			}
			
			/**
			 * helptexts related to up, down and cancel button 
			 */
			private function openHelpTexts():void {
				if (navigator.actionBar.actionContent.indexOf(upButton) != -1) {
					if (Settings.getInstance().getSetting(Settings.SettingsHelpTextTrackingViewUpButton) == 'true') {
						helpCallOut = new HelpCallOut();
						helpCallOut.helpText = resourceManager.getString('trackingview','help_text_upbutton');
						helpCallOut.settingId = Settings.SettingsHelpTextTrackingViewUpButton;
						helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext1Removed);
						helpCallOut.open(upButton,true)
					} else {
						helptext1Removed(null);
					}
				} else
					helptext1Removed();
			}
			
			private function helptext1Removed(event:Event = null):void  {
				if (navigator.actionBar.actionContent.indexOf(downButton) != -1) {
					if (Settings.getInstance().getSetting(Settings.SettingsHelpTextTrackingViewDownButton) == 'true') {
						helpCallOut = new HelpCallOut();
						helpCallOut.helpText = resourceManager.getString('trackingview','help_text_downbutton');
						helpCallOut.settingId = Settings.SettingsHelpTextTrackingViewDownButton;
						helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext2Removed);
						helpCallOut.open(downButton,true)
					} else {
						helptext2Removed(null);
					}
				} else
					helptext2Removed();
			}
			
			private function helptext2Removed(event:Event = null):void  {
				if (navigator.actionBar.actionContent.indexOf(cancelButton) != -1) {
					if (Settings.getInstance().getSetting(Settings.SettingsHelpTextTrackingViewCancelButton) == 'true') {
						helpCallOut = new HelpCallOut();
						helpCallOut.helpText = resourceManager.getString('trackingview','help_text_cancelbutton');
						helpCallOut.settingId = Settings.SettingsHelpTextTrackingViewCancelButton;
						helpCallOut.open(cancelButton,true)
					} else {
						
					}
				}
			}
		]]>
	</fx:Script>
	<s:actionContent>
		<s:Button icon="{ModelLocator.ic_upImage}" id="upButton" click="upClicked(event)"/>
		<s:Button icon="{ModelLocator.ic_downImage}" id="downButton" click="downClicked(event)"/>
		<s:Button icon="{ModelLocator.ic_menu_close_clear_cancelImage}" id="cancelButton" click="cancelClicked(event)" />
		<s:Button icon="{ModelLocator.searchImage_48x48}" id="searchButton" click="searchClicked(event)"/>
	</s:actionContent>
	<s:Group id="activeInsulin" visible="{ModelLocator.activeInsulinAmount > 0}">
		<s:Label left="10" right="0" top="10" bottom="0" width="100%" 
				 text="{ModelLocator.resourceManagerInstance.getString('trackingview','active_insulin') + ' = ' + ModelLocator.activeInsulinAmount.toString()
				 + ' ' +  ModelLocator.resourceManagerInstance.getString('trackingview','internationalunit')}"/>
	</s:Group>
	<s:Line width="100%" left="0" right="0" top="40" visible="{ModelLocator.activeInsulinAmount > 0}">
		<s:stroke>
			<s:SolidColorStroke color="0x3B6999" weight="5"/>
		</s:stroke>
	</s:Line>	
	
	<s:List id="trackinglist" left="0" right="0" top="{ModelLocator.activeInsulinAmount > 0 ? 45:0}" bottom="0" width="100%" useVirtualLayout="true" 
			dataProvider="{ModelLocator.trackingList}"
			click="onListElementClicked(event)"
			itemRendererFunction="getItemRenderer">
		<s:layout>
			<myComponents:TrackingViewLayout useVirtualLayout="true" id="trackinglistlayout"/>
		</s:layout>
	</s:List>
</s:View>
