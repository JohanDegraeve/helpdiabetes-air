<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:myComponents="myComponents.*" 
		backKeyPressed="onBackKeyPressed(event)"
		creationComplete="onCreationComplete()"
		initialize="onInitialize()"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("trackingview")]
		[ResourceBundle("general")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import databaseclasses.BloodGlucoseEvent;
			import databaseclasses.ExerciseEvent;
			import databaseclasses.MealEvent;
			import databaseclasses.MedicinEvent;
			import databaseclasses.UnitChangedEvent;
			
			import model.ModelLocator;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			import myComponents.IListElement;
			import myComponents.elementFromListPicker;
			
			private var aSelectUnit:elementFromListPicker;

			private function getItemRenderer(item:Object):ClassFactory {
				return (item as IListElement).listElementRendererFunction();
			}
			
			private function onInitialize():void {
				title=resourceManager.getString('trackingview','title');
			}
			
			private function onCreationComplete():void {
				if (ModelLocator.getInstance().initializeTrackingView) {
					ModelLocator.getInstance().initializeTrackingView = false;
					trackinglist.ensureIndexIsVisible(ModelLocator.getInstance().trackingList.length - 1);
					trackinglist.ensureIndexIsVisible(ModelLocator.getInstance().initializeTrackingViewTo);
				}
			}
			
			private function onListElementClicked(event:MouseEvent):void {
				if (ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex) is MealEvent) {//be aware that the mealeventitemrenderer will stop propagation of this mouseevent if it was not extended before the item was clicked
					navigator.pushView(EditMealEventView,ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex)); 					
				} else if (ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex) is MedicinEvent) {
					navigator.pushView(EditMedicinEventView,ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				} else if (ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex) is ExerciseEvent) {
					navigator.pushView(EditExerciseEventView,ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				} else if (ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex) is BloodGlucoseEvent) {
					navigator.pushView(EditBGEventView,ModelLocator.getInstance().trackingList.getItemAt((event.currentTarget as List).selectedIndex));
				}
			}
			
			/**
			 * pop up for list of possible trackingevents that can be added
			 */ 
			private function addButtonClicked(e:MouseEvent = null):void {
				//if (!hasEventListener(ViewNavigatorEvent.REMOVING))
				//this.addEventListener(ViewNavigatorEvent.REMOVING,onRemoving);	//necessary for handling the back button in android
				
				var trackingEventList:ArrayCollection = new ArrayCollection();
				trackingEventList .addItem(resourceManager.getString('trackingview','glucoseevent'));
				trackingEventList .addItem(resourceManager.getString('trackingview','medicinevent'));
				trackingEventList .addItem(resourceManager.getString('trackingview','exerciseevent'));

				aSelectUnit = new elementFromListPicker();
				aSelectUnit.addEventListener(UnitChangedEvent.ITEM_SELECTED, trackingEventSelected);
				aSelectUnit.elements = trackingEventList;
				
				PopUpManager.addPopUp(aSelectUnit,UIComponent(this.parentApplication),true);
				PopUpManager.centerPopUp(aSelectUnit);
				
			}
			
			private function trackingEventSelected(event:UnitChangedEvent):void {
				aSelectUnit.removeEventListener(UnitChangedEvent.ITEM_SELECTED,trackingEventSelected);
				PopUpManager.removePopUp(aSelectUnit);
				if (event.index == 0)
					navigator.pushView(EditBGEventView);
				else if (event.index == 1)
					navigator.pushView(EditMedicinEventView);
				else if (event.index == 2)
					navigator.pushView(EditExerciseEventView);
			}

			private function onBackKeyPressed(event:Event):void {
				if (aSelectUnit != null) {
					if (aSelectUnit.isPopUp) {
						PopUpManager.removePopUp(aSelectUnit);
						event.preventDefault();
					}
					aSelectUnit = null;
				} 
			}			

		]]>
	</fx:Script>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/add48x48.png')" click="addButtonClicked(event)"/>
	</s:actionContent>
	<s:List id = "trackinglist" left="0" right="0" top="0" bottom="0" width="100%" useVirtualLayout="true" 
			dataProvider="{ModelLocator.getInstance().trackingList}"
			click="onListElementClicked(event)"
			itemRendererFunction="getItemRenderer">
		<s:layout>
			<myComponents:TrackingViewLayout useVirtualLayout="true" />
		</s:layout>
	</s:List>
</s:View>
