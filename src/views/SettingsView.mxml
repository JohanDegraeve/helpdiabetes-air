<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		initialize="init()"
		actionBarVisible="true"
		backKeyPressed="onBackKeyPressed(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			import databaseclasses.Settings;
			import databaseclasses.UnitChangedEvent;
			
			import model.ModelLocator;
			
			import myComponents.AlertPopUp;
			import myComponents.elementFromListPicker;
			
			import utilities.MyGATracker;
			import utilities.Synchronize;
			
			private var elementPicker:elementFromListPicker;
			private var alertPopUp:AlertPopUp;
			
			private var textToShow:String ;
			private var debugging:Boolean = false;
			
			[ResourceBundle("settingsview")]
			
			private var menuList:ArrayCollection = 	new ArrayCollection([
				ResourceManager.getInstance().getString("settingsview","bolussettings"),
				//ResourceManager.getInstance().getString("settingsview","meal_times"), - moved to SettingsAllBolusSettingsView
				ResourceManager.getInstance().getString("settingsview","bloodglucoseunit"),
				ResourceManager.getInstance().getString("settingsview","medicin"),
				ResourceManager.getInstance().getString("settingsview","exercise"),
				ResourceManager.getInstance().getString("settingsview","database"),
				ResourceManager.getInstance().getString("settingsview","language"),
				ResourceManager.getInstance().getString("settingsview","resethelptext"),
				ResourceManager.getInstance().getString("settingsview","googlesync"),
				ResourceManager.getInstance().getString("settingsview","infoabout")
			]);	
			
			private function onBackKeyPressed(event:Event):void {
				if (elementPicker != null) {
					if (elementPicker.isPopUp) {
						PopUpManager.removePopUp(elementPicker);
						event.preventDefault();
					}
					elementPicker = null;
				} 
			}
			
			private function init():void {
				/* add event listener for clicking item */
				settingsList.addEventListener(Event.CHANGE,selectedElementChanged);
				title =  ResourceManager.getInstance().getString("settingsview","titlesettings");
				if (debugging) 
					menuList.addItem("debug info");
				if (ModelLocator.getInstance().extendedFunctionsActive())
					menuList.addItem(ResourceManager.getInstance().getString("settingsview","mealprofiles"));

			}
			
			private function selectBloodGlucoseUnit():void {
				var unitList:ArrayCollection = new ArrayCollection();
				unitList .addItem(ResourceManager.getInstance().getString("general","mgperdl"));
				unitList .addItem(ResourceManager.getInstance().getString("general","mmoll"));
				
				elementPicker = new elementFromListPicker();
				elementPicker.addEventListener(UnitChangedEvent.ITEM_SELECTED, selectedUnitChanged);
				elementPicker.elements = unitList;
				elementPicker.labelText1 = resourceManager.getString('settingsview','currentunit') + 
					resourceManager.getString('general',Settings.getInstance().getSetting(Settings.SettingsBLOODGLUCOSE_UNIT));
				elementPicker.labelText2 = resourceManager.getString('settingsview','selectnewunit');
				
				PopUpManager.addPopUp(elementPicker,UIComponent(this.parentApplication),true);
				PopUpManager.centerPopUp(elementPicker);
				
				function selectedUnitChanged(event:UnitChangedEvent):void {
					MyGATracker.getInstance().trackPageview( "SetingsView-bloodglucoseUnitChanged" );
					
					elementPicker.removeEventListener(UnitChangedEvent.ITEM_SELECTED,selectedUnitChanged);
					PopUpManager.removePopUp(elementPicker);
					if (event.index == 0)
						Settings.getInstance().setSetting(Settings.SettingsBLOODGLUCOSE_UNIT,"mgperdl");
					else if (event.index == 1)
						Settings.getInstance().setSetting(Settings.SettingsBLOODGLUCOSE_UNIT,"mmoll");
					settingsList.selectedIndex = -1;
					Synchronize.getInstance().startSynchronize(true,false);
				}
			}
			
			/**
			 * will popup a view corresponding to the selected menu
			 */
			private function selectedElementChanged(event:IndexChangeEvent):void {
				switch (event.newIndex) {
					case 0:
						navigator.pushView(SettingsAllBolusSettings);
						break;
					case 1:
						settingsList.selectedIndex = -1;
						selectBloodGlucoseUnit();
						break;
					case 2:
						navigator.pushView(SettingsMedicinView);
						break;
					case 3:
						navigator.pushView(SettingsExerciseView);
						break;
					case 4:
						navigator.pushView(SettingsDatabaseView);
						break;
					case 5:
						elementPicker = new elementFromListPicker();
						elementPicker.elements = new ArrayCollection([
							resourceManager.getString('general','english'),
							resourceManager.getString('general','dutch')]);
						elementPicker.addEventListener(UnitChangedEvent.ITEM_SELECTED, languageSelected);
						elementPicker.labelText1 = resourceManager.getString('general','choose_language');
						
						PopUpManager.addPopUp(elementPicker,UIComponent(this.parentApplication),true);
						PopUpManager.centerPopUp(elementPicker);
						break;
					case 6:
						MyGATracker.getInstance().trackPageview( "SetingsView-resetHelpText" );
						for (var i:int = Settings.SettingsHelpTextAddFoodItemViewSelectUnitButton;i <= Settings.SettingsHelpText100;i++) {
							Settings.getInstance().setSetting(i,"true");
						}
						alertPopUp = new AlertPopUp();
						alertPopUp.addEventListener(PopUpEvent.CLOSE, okClicked);
						textToShow = 
						resourceManager.getString('settingsview','resethelptextdone') ;
						alertPopUp.show(this);
						alertPopUp.setMessage(textToShow);
						break;
					case 7:
						if (Settings.getInstance().getSetting(Settings.SettingsAccessToken) == "" 
							|| 
							(Settings.getInstance().getSetting(Settings.SettingsAllFoodItemsUploadedToGoogleExcel) == "false"
								&&
								Settings.getInstance().getSetting(Settings.SettingsIMtheCreateorOfGoogleExcelFoodTable) == "true"))
							navigator.pushView(SynchronizeView);
						else 
							navigator.pushView(SynchronizeView2);
						break;
					case 8:
						MyGATracker.getInstance().trackPageview( "SetingsView-infoAndHelpShown" );
						
						alertPopUp = new AlertPopUp();
						alertPopUp.addEventListener(PopUpEvent.CLOSE, okClicked);
						textToShow = 
						resourceManager.getString('settingsview','version') + 
						resourceManager.getString('settingsview','copyright') +
						resourceManager.getString('settingsview','infoabouttext');
						alertPopUp.show(this);
						alertPopUp.setMessage(textToShow);
						break;
				}
				
				function okClicked(event: PopUpEvent):void {
					if (alertPopUp != null) {
						PopUpManager.removePopUp(alertPopUp);
						if (alertPopUp.hasEventListener(PopUpEvent.CLOSE)) {
							alertPopUp.removeEventListener(PopUpEvent.CLOSE, okClicked);
						}
					}
				}
				
				
				function languageSelected(event: Event = null): void
				{
					MyGATracker.getInstance().trackPageview( "SetingsView-languageSelected" );
					
					if (elementPicker != null) {
						if (elementPicker.hasEventListener(UnitChangedEvent.ITEM_SELECTED)) {
							elementPicker.removeEventListener(UnitChangedEvent.ITEM_SELECTED, languageSelected);
						}
						PopUpManager.removePopUp(elementPicker);
					}
					
					var localeChainAsString:String;
					//copied some code from HelpDiabetes.mxml
					if (event is UnitChangedEvent)  {
						if ((event as UnitChangedEvent).index == 0) {
							resourceManager.localeChain = ["en_US","nl_NL"];
							localeChainAsString = "en_US,nl_NL";
						}
						if ((event as UnitChangedEvent).index == 1) {
							resourceManager.localeChain = ["nl_NL","en_US"];
							localeChainAsString = "nl_NL,en_US";
						}
					}
					//Settings gets the value just determined here above, in any case if the database would already be existing, the localechain from database will be taken and the Settings value will again be overwritten
					Settings.getInstance().setSetting(Settings.SettingsLOCALECHAIN_asString,localeChainAsString);
					
				}
			}
		]]>
	</fx:Script>
	<s:List id="settingsList" left="0" right="0" top="0" bottom="0" itemRenderer="myComponents.MenuElementItemRenderer"
			dataProvider="{menuList}">
	</s:List>
</s:View>
