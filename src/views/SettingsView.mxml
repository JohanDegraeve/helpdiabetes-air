<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		initialize="init()"
		actionBarVisible="true"
		backKeyPressed="onBackKeyPressed(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			import spark.components.View;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			import databaseclasses.BloodGlucoseEvent;
			import databaseclasses.MealEvent;
			import databaseclasses.Settings;
			import databaseclasses.UnitChangedEvent;
			
			import model.ModelLocator;
			
			import myComponents.AlertPopUp;
			import myComponents.elementFromListPicker;
			
			import utilities.FromtimeAndValueArrayCollection;
			import utilities.MyGATracker;
			import utilities.Synchronize;
			
			private var elementPicker:elementFromListPicker;
			private var alertPopUp:AlertPopUp;
			
			private var textToShow:String ;
			private var debugging:Boolean = false;
			private var thisView:View;
			
			[ResourceBundle("settingsview")]
			
			private var menuList:ArrayCollection = 	new ArrayCollection([
				ResourceManager.getInstance().getString("settingsview","bolussettings"),
				//ResourceManager.getInstance().getString("settingsview","meal_times"), - moved to SettingsAllBolusSettingsView
				ResourceManager.getInstance().getString("settingsview","bloodglucoseunit"),
				ResourceManager.getInstance().getString("settingsview","medicin"),
				ResourceManager.getInstance().getString("settingsview","exercise"),
				ResourceManager.getInstance().getString("settingsview","database"),
				ResourceManager.getInstance().getString("settingsview","language"),
				ResourceManager.getInstance().getString("settingsview","portraitorlandscape"),
				ResourceManager.getInstance().getString("settingsview","resethelptext"),
				ResourceManager.getInstance().getString("settingsview","googlesync"),
				ResourceManager.getInstance().getString("settingsview","aboutexperit"),
				ResourceManager.getInstance().getString("settingsview","infoabout")
			]);	
			
			private function onBackKeyPressed(event:Event):void {
				if (elementPicker != null) {
					if (elementPicker.isPopUp) {
						PopUpManager.removePopUp(elementPicker);
						event.preventDefault();
					}
					elementPicker = null;
				} 
			}
			
			private function init():void {
				/* add event listener for clicking item */
				settingsList.addEventListener(Event.CHANGE,selectedElementChanged);
				title =  ResourceManager.getInstance().getString("settingsview","titlesettings");
				thisView = this;
				if (debugging) 
					menuList.addItem("debug info");
				Synchronize.getInstance().startSynchronize(false,false);
			}
			
			private function selectOrientation():void {
				var orientationOptionList:ArrayCollection = new ArrayCollection();
				orientationOptionList.addItem(ResourceManager.getInstance().getString("settingsview","portrait"));
				orientationOptionList.addItem(ResourceManager.getInstance().getString("settingsview","landscape"));
				orientationOptionList.addItem(ResourceManager.getInstance().getString("settingsview","automaticorientation"));
				orientationOptionList.addItem(ResourceManager.getInstance().getString("settingsview","letappdecide"));
				
				elementPicker = new elementFromListPicker();
				elementPicker.addEventListener(UnitChangedEvent.ITEM_SELECTED, selectedOrientationOptionChanged);//using unitchanged but it's not a unit
				elementPicker.elements = orientationOptionList;
				elementPicker.labelText1 = resourceManager.getString('settingsview','selectorientation');
				
				PopUpManager.addPopUp(elementPicker,UIComponent(this.parentApplication),true);
				PopUpManager.centerPopUp(elementPicker);
				
				function selectedOrientationOptionChanged(event:UnitChangedEvent):void {
					MyGATracker.getInstance().trackPageview( "SetingsView-orientationOptionChanged" );
					
					var currentSetting:String = Settings.getInstance().getSetting(Settings.SettingsSelectedOrientation);
					var newSetting:String;
					elementPicker.removeEventListener(UnitChangedEvent.ITEM_SELECTED,selectedOrientationOptionChanged);
					PopUpManager.removePopUp(elementPicker);
					if (event.index == 0) {//portrait
						Settings.getInstance().setSetting(Settings.SettingsSelectedOrientation,"0");
						newSetting = "0";
					}
					else if (event.index == 1) {//landscape
						Settings.getInstance().setSetting(Settings.SettingsSelectedOrientation,"1");
						newSetting = "1";
					}
					else if (event.index == 2) {//automatic
						Settings.getInstance().setSetting(Settings.SettingsSelectedOrientation,"2");
						newSetting = "2";
					}
					else if (event.index == 3) {//let app decide
						Settings.getInstance().setSetting(Settings.SettingsSelectedOrientation,"3");
						newSetting = "3";
					}
					
					if (currentSetting != newSetting) {
						alertPopUp = new AlertPopUp();
						alertPopUp.addEventListener(PopUpEvent.CLOSE, okClicked);
						textToShow = 
							resourceManager.getString('settingsview','restartapplication') ;
						alertPopUp.show(thisView);
						alertPopUp.setMessage(textToShow);
					}
				}
				
				function okClicked(event: PopUpEvent):void {
					if (alertPopUp != null) {
						PopUpManager.removePopUp(alertPopUp);
						if (alertPopUp.hasEventListener(PopUpEvent.CLOSE)) {
							alertPopUp.removeEventListener(PopUpEvent.CLOSE, okClicked);
						}
					}
				}

			}
			
			private function selectBloodGlucoseUnit():void {
				var unitList:ArrayCollection = new ArrayCollection();
				unitList .addItem(ResourceManager.getInstance().getString("general","mgperdl"));
				unitList .addItem(ResourceManager.getInstance().getString("general","mmoll"));
				
				elementPicker = new elementFromListPicker();
				elementPicker.addEventListener(UnitChangedEvent.ITEM_SELECTED, selectedUnitChanged);
				elementPicker.elements = unitList;
				elementPicker.labelText1 = resourceManager.getString('settingsview','currentunit') + 
					resourceManager.getString('general',Settings.getInstance().getSetting(Settings.SettingsBLOODGLUCOSE_UNIT));
				elementPicker.labelText2 = resourceManager.getString('settingsview','selectnewunit');
				
				PopUpManager.addPopUp(elementPicker,UIComponent(this.parentApplication),true);
				PopUpManager.centerPopUp(elementPicker);
				
				function selectedUnitChanged(event:UnitChangedEvent):void {
					MyGATracker.getInstance().trackPageview( "SetingsView-bloodglucoseUnitChanged" );
					
					elementPicker.removeEventListener(UnitChangedEvent.ITEM_SELECTED,selectedUnitChanged);
					PopUpManager.removePopUp(elementPicker);
					var correctionFactor:String = Settings.getInstance().getSetting(Settings.SettingsCorrectionFactor);
					var listOfElements:FromtimeAndValueArrayCollection;
					var cntr:int;
					listOfElements =  FromtimeAndValueArrayCollection.createList(
						Settings.getInstance().getSetting(Settings.SettingsCorrectionFactor));
					if (event.index == 0) {
						if (Settings.getInstance().getSetting(Settings.SettingsBLOODGLUCOSE_UNIT) == "mmoll") {
							//change the unit
							Settings.getInstance().setSetting(Settings.SettingsBLOODGLUCOSE_UNIT,"mgperdl");
							//change the correctionfactor string
							listOfElements.changeUnit("mgperdl");
							Settings.getInstance().setSetting(Settings.SettingsCorrectionFactor,
								"0:0-" + listOfElements.createCorrectionFactorAsString());
							//change the target bloodglucose level
							Settings.getInstance().setSetting(Settings.SettingsTARGET_BLOODGLUCOSELEVEL,
								((Math.round((new Number(Settings.getInstance().getSetting(Settings.SettingsTARGET_BLOODGLUCOSELEVEL)))/(new Number(0.0555))))).toString());
							//change the bloodglucoseevents that area in tracking database
							for (cntr = 0;cntr < ModelLocator.getInstance().trackingList.length;cntr++) {
								if (ModelLocator.getInstance().trackingList.getItemAt(cntr) is BloodGlucoseEvent) {
									var theEvent:BloodGlucoseEvent = ModelLocator.getInstance().trackingList.getItemAt(cntr) as BloodGlucoseEvent;
									if (theEvent.unit == ResourceManager.getInstance().getString("general","mmoll")) {
										theEvent.updateBloodGlucoseEvent(ResourceManager.getInstance().getString("general","mgperdl"),Math.round(theEvent.bloodGlucoseLevel/(new Number(0.0555))),theEvent.timeStamp,theEvent.comment,new Date().valueOf());
									}
									
								}
							}
							//change the correctionfactor in mealevents
							for (cntr = 0;cntr < ModelLocator.getInstance().trackingList.length;cntr++) {
								if (ModelLocator.getInstance().trackingList.getItemAt(cntr) is MealEvent) {
									var theMealEvent:MealEvent = ModelLocator.getInstance().trackingList.getItemAt(cntr) as MealEvent;
									if (!isNaN(theMealEvent.correctionFactor)) {
										if (theMealEvent.correctionFactor > 0) {
											theMealEvent.updateMealEvent(theMealEvent.mealName,theMealEvent.comment,theMealEvent.insulinRatio,Math.round(theMealEvent.correctionFactor/(new Number(0.0555))),(new Date()).valueOf(),theMealEvent.timeStamp);	
										}
									}
								}
							}
						}
					}
					else if (event.index == 1) {
						if (Settings.getInstance().getSetting(Settings.SettingsBLOODGLUCOSE_UNIT) == "mgperdl") {
							//change the unit
							Settings.getInstance().setSetting(Settings.SettingsBLOODGLUCOSE_UNIT,"mmoll");
							//change the correctionfactor string
							listOfElements.changeUnit("mmoll");
							Settings.getInstance().setSetting(Settings.SettingsCorrectionFactor,
								"0:0-" + listOfElements.createCorrectionFactorAsString());
							//change the target bloodglucose level
							Settings.getInstance().setSetting(Settings.SettingsTARGET_BLOODGLUCOSELEVEL,
								((Math.round((new Number(Settings.getInstance().getSetting(Settings.SettingsTARGET_BLOODGLUCOSELEVEL)))*(new Number(0.0555))*10))/10).toString());
							//change the bloodglucoseevents that area in tracking database
							for (cntr = 0;cntr < ModelLocator.getInstance().trackingList.length;cntr++) {
								if (ModelLocator.getInstance().trackingList.getItemAt(cntr) is BloodGlucoseEvent) {
									var theEvent:BloodGlucoseEvent = ModelLocator.getInstance().trackingList.getItemAt(cntr) as BloodGlucoseEvent;
									if (theEvent.unit == ResourceManager.getInstance().getString("general","mgperdl")) {
										theEvent.updateBloodGlucoseEvent(ResourceManager.getInstance().getString("general","mmoll"),(Math.round(theEvent.bloodGlucoseLevel*(new Number(0.0555))*10))/10,theEvent.timeStamp,theEvent.comment,new Date().valueOf());
									}
									
								}
							}
							//change the correctionfactor in mealevents
							for (cntr = 0;cntr < ModelLocator.getInstance().trackingList.length;cntr++) {
								if (ModelLocator.getInstance().trackingList.getItemAt(cntr) is MealEvent) {
									var theMealEvent:MealEvent = ModelLocator.getInstance().trackingList.getItemAt(cntr) as MealEvent;
									if (!isNaN(theMealEvent.correctionFactor)) {
										if (theMealEvent.correctionFactor > 0) {
											theMealEvent.updateMealEvent(theMealEvent.mealName,theMealEvent.comment,theMealEvent.insulinRatio,(Math.round(theMealEvent.correctionFactor*(new Number(0.0555))*10))/10,(new Date()).valueOf(),theMealEvent.timeStamp);	
										}
									}
								}
							}
						}
					}
					settingsList.selectedIndex = -1;
					Synchronize.getInstance().startSynchronize(true,false);
				}
			}
			
			/**
			 * will popup a view corresponding to the selected menu
			 */
			private function selectedElementChanged(event:IndexChangeEvent):void {
				switch (event.newIndex) {
					case 0:
						navigator.pushView(SettingsAllBolusSettings);
						break;
					case 1:
						settingsList.selectedIndex = -1;
						selectBloodGlucoseUnit();
						break;
					case 2:
						navigator.pushView(SettingsMedicinView);
						break;
					case 3:
						navigator.pushView(SettingsExerciseView);
						break;
					case 4:
						navigator.pushView(SettingsDatabaseView);
						break;
					case 5:
						navigator.pushView(SettingsLanguageView);
						break;
					case 6:
						selectOrientation();
						break;
					case 7:
						MyGATracker.getInstance().trackPageview( "SetingsView-resetHelpText" );
						for (var i:int = Settings.SettingsHelpTextAddFoodItemViewSelectUnitButton;i <= Settings.SettingsHelpText100;i++) {
							Settings.getInstance().setSetting(i,"true");
						}
						alertPopUp = new AlertPopUp();
						alertPopUp.addEventListener(PopUpEvent.CLOSE, okClicked);
						textToShow = 
						resourceManager.getString('settingsview','resethelptextdone') ;
						alertPopUp.show(this);
						alertPopUp.setMessage(textToShow);
						break;
					case 8:
						if (Settings.getInstance().getSetting(Settings.SettingsAccessToken) == "" 
							|| 
							(Settings.getInstance().getSetting(Settings.SettingsAllFoodItemsUploadedToGoogleExcel) == "false"
								&&
								Settings.getInstance().getSetting(Settings.SettingsIMtheCreateorOfGoogleExcelFoodTable) == "true"))
							navigator.pushView(SynchronizeView);
						else 
							navigator.pushView(SynchronizeView2);
						break;
					case 9:
						MyGATracker.getInstance().trackPageview( "SetingsView-aboutexperit" );
						navigateToURL(new URLRequest('http://' + resourceManager.getString('foodcounterview','wwwexperitbe')));
						break;
					case 10:
						MyGATracker.getInstance().trackPageview( "SetingsView-infoAndHelpShown" );
						alertPopUp = new AlertPopUp();
						alertPopUp.addEventListener(PopUpEvent.CLOSE, okClicked);
						textToShow = 
						resourceManager.getString('settingsview','version') + 
						resourceManager.getString('settingsview','copyright') +
						resourceManager.getString('settingsview','infoabouttext');
						alertPopUp.show(this);
						alertPopUp.setMessage(textToShow);
						break;
				}
				
				function okClicked(event: PopUpEvent):void {
					if (alertPopUp != null) {
						PopUpManager.removePopUp(alertPopUp);
						if (alertPopUp.hasEventListener(PopUpEvent.CLOSE)) {
							alertPopUp.removeEventListener(PopUpEvent.CLOSE, okClicked);
						}
					}
				}
				
				
			}
		]]>
	</fx:Script>
	<s:List id="settingsList" left="0" right="0" top="0" bottom="0" itemRenderer="myComponents.MenuElementItemRenderer"
			dataProvider="{menuList}">
	</s:List>
</s:View>
