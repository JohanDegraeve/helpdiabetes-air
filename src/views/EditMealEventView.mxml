<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		initialize="onInitialize()"
		deactivate="{if (navigator != null) navigator.popToFirstView()}"
		>
	<fx:Declarations>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("editmealeventview")]
		[ResourceBundle("general")]
	</fx:Metadata>
	<s:states>
		<s:State name="noInsulinAmount"/>
		<s:State name="insulinAmount"/>
	</s:states> 
		
	<fx:Script>
		<![CDATA[
			import databaseclasses.Meal;
			import databaseclasses.MealEvent;
			import databaseclasses.SelectedFoodItem;
			
			import model.ModelLocator;
			
			import mx.collections.ArrayCollection;
			
			import myComponents.SelectedFoodItemRenderer;
			
			import spark.events.IndexChangeEvent;
			import spark.formatters.DateTimeFormatter;
			[Bindable]
			private var dateTimeAndMealName_text:String;
			
			[Bindable]
			private var insulinAmount_text:String;
			
			[Bindable]
			private var carbAmount_text:String;
			[Bindable]
			private var proteinAmount_text:String;
			[Bindable]
			private var kilocalorieAmount_text:String;
			[Bindable]
			private var fatAmount_text:String;
			
			private var mealEvent:MealEvent;
			
			[Bindable]
			private var selectedFoodItems:ArrayCollection;
			[Bindable]
			private var back_label:String;

			private static var dateFormatter:DateTimeFormatter ;
			private static var timeFormatter:DateTimeFormatter ;

			override public function set data(value:Object):void {
				super.data = value;
				mealEvent = value as MealEvent;
				selectedFoodItems = mealEvent.selectedFoodItems;
			}
			
			private function onInitialize():void {
				if (TrackingView.popToFirstViewNecessary())
					navigator.popToFirstView();
				else {
					back_label = resourceManager.getString('general','back');
					dateFormatter = new DateTimeFormatter();
					dateFormatter.dateTimePattern = resourceManager.getString('general','datepattern');
					dateFormatter.useUTC = false;
					dateFormatter.setStyle("locale",Capabilities.language.substr(0,2));
					timeFormatter = new DateTimeFormatter();
					timeFormatter.dateTimePattern = resourceManager.getString('general','timepattern');
					timeFormatter.useUTC = false;
					timeFormatter.setStyle("locale",Capabilities.language.substr(0,2));
					
					dateTimeAndMealName_text = dateFormatter.format(mealEvent.timeStamp) + " - " + timeFormatter.format(mealEvent.timeStamp) + " " + mealEvent.mealName ;
					carbAmount_text = Math.round(mealEvent.totalCarbs) + " " + resourceManager.getString('general','gram_of_carbs_short');
					proteinAmount_text = Math.round(mealEvent.totalProtein) + " " + resourceManager.getString('general','gram_of_protein');
					fatAmount_text = Math.round(mealEvent.totalFat) + " " + resourceManager.getString('general','gram_of_fat');
					kilocalorieAmount_text = Math.round(mealEvent.totalKilocalories) + " " + resourceManager.getString('general','kilocalories');
					
					if (mealEvent.insulinRatio != 0) {
						insulinAmount_text =  ((Math.round(mealEvent.calculatedInsulinAmount * 10))/10).toString() + 
							" " + 
							resourceManager.getString('editmealeventview','unitsofinsulin') + 
							", " + resourceManager.getString('editmealeventview','insulinRatioUsed')
							+ " " + mealEvent.insulinRatio;
					} else insulinAmount_text = null;
					
					for (var mealCounter:int = ModelLocator.getInstance().meals.length - 1;mealCounter >=0 ; mealCounter--) {
						if (ModelLocator.getInstance().meals.getItemAt(mealCounter) is Meal) {
							if ((ModelLocator.getInstance().meals.getItemAt(mealCounter) as Meal).mealEvent == mealEvent) {
								ModelLocator.getInstance().selectedMeal = mealCounter;						
								fooditemlist.addEventListener(Event.CHANGE,onClick);
								mealCounter = -1;
							}
						}
					}
					
					if (mealEvent.insulinRatio != 0)
						currentState="insulinAmount";
				}
			}
			
			private function displaySelectedItem(item:Object):String {
				return (item as SelectedFoodItem).itemDescription;
			}
			
			private function itemRendererFunction(item:Object):ClassFactory {
				return  new ClassFactory(SelectedFoodItemRenderer);
			}
			
			private function onClick(event:IndexChangeEvent):void {
				data = mealEvent;
				var dataToPass:Object = new Object();
				dataToPass.selectedFoodItem = mealEvent.selectedFoodItems.getItemAt(event.newIndex);
				navigator.pushView(AddFoodItemView,dataToPass,null,null);
			}
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>

	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" clipAndEnableScrolling="true" >
			<s:layout >
				<s:VerticalLayout gap="0">
				</s:VerticalLayout>
			</s:layout>
			<s:TextArea id="dateTimeAndMealName" width="100%" text="{dateTimeAndMealName_text}"  editable="false" borderVisible="false" contentBackgroundAlpha="0" height="{styleManager.getStyleDeclaration('.trackingItems').getStyle('trackingeventHeight')}"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0x000000" weight="1"/>
				</s:stroke>
			</s:Line>
			
			<s:TextArea id="carbAmount" width="100%" paddingTop="0" paddingBottom="0" text="{carbAmount_text}"  editable="false" borderVisible="false" contentBackgroundAlpha="0" fontSize="{styleManager.getStyleDeclaration('.fontSizeForSubElements').getStyle('fontSize')}" height="{styleManager.getStyleDeclaration('.trackingItems').getStyle('selectedMealHeight')}"/>
			<s:TextArea id="proteinAmount" width="100%" paddingTop="0" paddingBottom="0" text="{proteinAmount_text}"  editable="false" borderVisible="false" contentBackgroundAlpha="0" fontSize="{styleManager.getStyleDeclaration('.fontSizeForSubElements').getStyle('fontSize')}" height="{styleManager.getStyleDeclaration('.trackingItems').getStyle('selectedMealHeight')}"/>
			<s:TextArea id="fatAmount" width="100%" paddingTop="0" paddingBottom="0" text="{fatAmount_text}"  editable="false" borderVisible="false" contentBackgroundAlpha="0" fontSize="{styleManager.getStyleDeclaration('.fontSizeForSubElements').getStyle('fontSize')}" height="{styleManager.getStyleDeclaration('.trackingItems').getStyle('selectedMealHeight')}"/>
			<s:TextArea id="kilocalorieAmount" width="100%" paddingTop="0" paddingBottom="0"  text="{kilocalorieAmount_text}"  editable="false" borderVisible="false" contentBackgroundAlpha="0" fontSize="{styleManager.getStyleDeclaration('.fontSizeForSubElements').getStyle('fontSize')}" height="{styleManager.getStyleDeclaration('.trackingItems').getStyle('selectedMealHeight')}"/>
			
			<s:TextArea includeIn="insulinAmount"  id="insulinAmount" width="100%" paddingTop="0" paddingBottom="0"  text="{insulinAmount_text}"  editable="false" borderVisible="false" contentBackgroundAlpha="0" fontSize="{styleManager.getStyleDeclaration('.fontSizeForSubElements').getStyle('fontSize')}" height="{styleManager.getStyleDeclaration('.trackingItems').getStyle('selectedMealHeight')}"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0x000000" weight="1"/>
				</s:stroke>
			</s:Line>
			
			<s:List id="fooditemlist" width="100%"  height="100%" useVirtualLayout="false" dataProvider="{selectedFoodItems}" contentBackgroundAlpha="0" 
					labelFunction="displaySelectedItem" itemRendererFunction="itemRendererFunction" />
		</s:Group>
	</s:Scroller>
</s:View>
