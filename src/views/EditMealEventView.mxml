<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		initialize="onInitialize()"
		creationComplete="onCreationComplete()"
		add="addHandler()"
		>
	<fx:Declarations>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("editmealeventview")]
		[ResourceBundle("general")]
	</fx:Metadata>
	<s:states>
		<s:State name="noInsulinAmount"/>
		<s:State name="insulinAmount"/>
	</s:states> 
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			import spark.formatters.DateTimeFormatter;
			
			import databaseclasses.Database;
			import databaseclasses.DatabaseEvent;
			import databaseclasses.Meal;
			import databaseclasses.MealEvent;
			import databaseclasses.SelectedFoodItem;
			import databaseclasses.Settings;
			
			import model.ModelLocator;
			
			import myComponents.HelpCallOut;
			import myComponents.PickerEvent;
			import myComponents.SelectedFoodItemRenderer;
			
			import utilities.MyGATracker;
			import utilities.Synchronize;
			
			[Bindable]
			private var dateTimeAndMealName_text:String;
			
			[Bindable]
			private var insulinAmount_text:String;
			
			[Bindable]
			private var carbAmount_text:String;
			[Bindable]
			private var proteinAmount_text:String;
			[Bindable]
			private var kilocalorieAmount_text:String;
			[Bindable]
			private var fatAmount_text:String;
			
			private var mealEvent:MealEvent;

			private var comment:String;
			
			[Bindable]
			private var selectedFoodItems:ArrayCollection;
			[Bindable]
			private var back_label:String;
			
			private static var dateFormatter:DateTimeFormatter ;
			private static var timeFormatter:DateTimeFormatter ;
			
			private var helpCallOut:HelpCallOut;
			
			/**
			 * used as context value when pushing the view ChangeMealDateAndTimeView<br>
			 * when addHandler is called, the value of the return object will be check, if equal to CHANGE_MEAL_DATE_AND_TIME then view is popped
			 */
			private static const CHANGE_MEAL_DATE_AND_TIME:int = 1;
			
			override public function set data(value:Object):void {
				super.data = value;
				mealEvent = value as MealEvent;
				selectedFoodItems = mealEvent.selectedFoodItems;
			}
			
			private function helptext1Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext1Removed);
				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('editmealeventview','editdateandtime');
				helpCallOut.settingId = Settings.SettingsHelpTextEditMealEventViewEditDateAndTime;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext2Removed);
				helpCallOut.verticalPosition = "after";
				helpCallOut.open(dateTimeAndMealNameGroup,true);
			}
			
			private function helptext2Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext2Removed);
			}
			
			private function onCreationComplete():void {
				if (mealEvent.meal != null) {
					helpCallOut = new HelpCallOut();
					helpCallOut.helpText = resourceManager.getString('editmealeventview','help_text_editSelectedItem');
					helpCallOut.settingId = Settings.SettingsHelpTextAddFoodItemViewSelectMealButton;
					helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext1Removed);
					helpCallOut.verticalPosition = "before";
					helpCallOut.open(fooditemlist,true);
				}
			}

			private function onInitialize():void {
				trace("editmealeventview oninitialize");
				
				if (TrackingView.popToFirstViewNecessary())
					navigator.popToFirstView();
				else {
					back_label = resourceManager.getString('general','back');
					dateFormatter = new DateTimeFormatter();
					dateFormatter.dateTimePattern = resourceManager.getString('general','datepattern');
					dateFormatter.useUTC = false;
					dateFormatter.setStyle("locale",Capabilities.language.substr(0,2));
					timeFormatter = new DateTimeFormatter();
					timeFormatter.dateTimePattern = resourceManager.getString('general','timepattern');
					timeFormatter.useUTC = false;
					timeFormatter.setStyle("locale",Capabilities.language.substr(0,2));
					
					dateTimeAndMealName_text = dateFormatter.format(mealEvent.timeStamp) + " - " + timeFormatter.format(mealEvent.timeStamp) + " " + mealEvent.mealName ;
					carbAmount_text = Math.round(mealEvent.totalCarbs) + " " + resourceManager.getString('general','gram_of_carbs_short');
					proteinAmount_text = Math.round(mealEvent.totalProtein) + " " + resourceManager.getString('general','gram_of_protein');
					fatAmount_text = Math.round(mealEvent.totalFat) + " " + resourceManager.getString('general','gram_of_fat');
					kilocalorieAmount_text = Math.round(mealEvent.totalKilocalories) + " " + resourceManager.getString('general','kilocalories');
					comment = mealEvent.comment;
					
					if (mealEvent.insulinRatio != 0) {
						insulinAmount_text =  ((Math.round(mealEvent.calculatedInsulinAmount * 10))/10).toString() + 
							" " + 
							resourceManager.getString('editmealeventview','unitsofinsulin') + 
							", " + resourceManager.getString('editmealeventview','insulinRatioUsed')
							+ " " + mealEvent.insulinRatio;
					} else insulinAmount_text = null;
					
					fooditemlist.addEventListener(Event.CHANGE,onClick);
					
					if (mealEvent.insulinRatio != 0)
						currentState="insulinAmount";
				}
			}
			
			private function displaySelectedItem(item:Object):String {
				return (item as SelectedFoodItem).itemDescription;
			}
			
			private function itemRendererFunction(item:Object):ClassFactory {
				return  new ClassFactory(SelectedFoodItemRenderer);
			}
			
			private function onClick(event:IndexChangeEvent):void {
				if (mealEvent.meal == null)
					return;//meal can't be changed anymore

				MyGATracker.getInstance().trackPageview( "EditMealEventView-selectedItemClicked" );
				
				data = mealEvent;
				var dataToPass:Object = new Object();
				dataToPass.selectedFoodItem = mealEvent.selectedFoodItems.getItemAt(event.newIndex);
				navigator.pushView(AddFoodItemView,dataToPass,null,null);
			}
			
			private function dateTimeAndMealNameClicked(event:Event):void  {
				if (mealEvent.meal == null)
					return;//meal can't be changed anymore
				var mealToPush:Meal = mealEvent.meal;
				if (mealToPush == null) {
					mealToPush = new Meal(null,mealEvent,mealEvent.timeStamp);
				}
				navigator.pushView(ChangeMealDateAndTimeView,{
					meal:mealToPush
				},CHANGE_MEAL_DATE_AND_TIME);
			}
			
			private function addHandler():void {
				var localdispatcher:EventDispatcher ;
				
				if (navigator.poppedViewReturnedObject != null) {
					if (navigator.poppedViewReturnedObject.object) {
						if (navigator.poppedViewReturnedObject.object is String) {
							onTextSet(navigator.poppedViewReturnedObject.object as String);
						}
					}
					else {
						localdispatcher = new EventDispatcher();
						if (navigator.poppedViewReturnedObject.context == CHANGE_MEAL_DATE_AND_TIME) {
							ModelLocator.getInstance().copyOfTrackingList = new ArrayCollection();
							ModelLocator.getInstance().trackingList = new ArrayCollection();
							localdispatcher.addEventListener(DatabaseEvent.RESULT_EVENT,getAllEventsAndFillUpMealsFinished);
							localdispatcher.addEventListener(DatabaseEvent.ERROR_EVENT,getAllEventsAndFillUpMealsFinished);//don't see what to do in case of error
							Database.getInstance().getAllEventsAndFillUpMeals(localdispatcher);
							
							Synchronize.getInstance().startSynchronize(true,false);//not always necessary, because even if user click back button in changemealdateandtimeveiw, without change the time, then we'll pass here
						} 
					}
				}
				
				function getAllEventsAndFillUpMealsFinished(event:Event):void
				{
					localdispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT, getAllEventsAndFillUpMealsFinished);
					localdispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT, getAllEventsAndFillUpMealsFinished);
					ModelLocator.getInstance().trackingList.refresh();
					
					ModelLocator.getInstance().refreshMeals();
					ModelLocator.getInstance().copyOfTrackingList = ModelLocator.getInstance().trackingList;
				}
			}

			private function editNote(e:MouseEvent = null):void {
				data = new Object();
				data.title = "";
				data.text = comment;
				data.topText = resourceManager.getString('general','editnotetext');
				navigator.pushView(TextPickerView,data);				
			}
			
			private function onTextSet(textSet:String): void
			{
				comment = textSet;
				mealEvent.comment =  comment
			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/Notes_48x48.png')" id="NotesButton" click="editNote(event)"/>
	</s:actionContent>
	
	<s:Group width="100%" >
		<s:layout >
			<s:VerticalLayout gap="0">
			</s:VerticalLayout>
		</s:layout>
		<s:Group id="dateTimeAndMealNameGroup" click="dateTimeAndMealNameClicked(event)">
			<s:Label id="dateTimeAndMealName" paddingLeft="10" paddingBottom="12" paddingTop="12" width="100%" text="{dateTimeAndMealName_text}"/>
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0x000000" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:Group>
			<s:layout >
				<s:VerticalLayout paddingLeft="10" paddingBottom="5"
								  gap="4" paddingTop="5">
				</s:VerticalLayout>
			</s:layout>
			<s:Label id="carbAmount" width="100%" text="{carbAmount_text}" />
			<s:Label visible="{mealEvent.totalProtein != -1}"  id="proteinAmount" width="100%" text="{proteinAmount_text}" />
			<s:Label visible="{mealEvent.totalFat != -1}"  id="fatAmount" width="100%" text="{fatAmount_text}"/>
			<s:Label visible="{mealEvent.totalKilocalories != -1}"  id="kilocalorieAmount" width="100%" text="{kilocalorieAmount_text}" height="{mealEvent.totalKilocalories != -1 ? styleManager.getStyleDeclaration('.trackingItems').getStyle('selectedMealHeight') : 0}"/>
			<s:Label includeIn="insulinAmount" id="insulinAmount" width="100%" text="{insulinAmount_text}" />
		</s:Group>
		
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0x000000" weight="1"/>
			</s:stroke>
		</s:Line>
		
		<s:List id="fooditemlist" width="100%"  height="100%" useVirtualLayout="false" dataProvider="{selectedFoodItems}" contentBackgroundAlpha="0" 
				labelFunction="displaySelectedItem" itemRendererFunction="itemRendererFunction" />
	</s:Group>
</s:View>
