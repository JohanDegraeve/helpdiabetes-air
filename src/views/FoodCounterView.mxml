<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:myComponents="myComponents.*"
		title="FoodCounterView"
		preinitialize="preInit()" >

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>


	<fx:Metadata>
		[ResourceBundle("foodcounterview")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import model.ModelLocator;
			
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceBundle;
			
			import spark.components.TabbedMobileApplication;
			import spark.events.IndexChangeEvent;
			import spark.skins.spark.DefaultItemRenderer;
			
			import utilities.ExcelSorting;

			[Bindable]
			public var listOfOptionsArray:Array ;
			
			private var excelSorting:ExcelSorting;
			
			private function preInit():void {
				/* populate option strings with values from resource bundle*/
				listOfOptionsArray =	[
					resourceManager.getString("foodcounterview","view_meal"),
					resourceManager.getString("foodcounterview","to_tracking"),
					resourceManager.getString("foodcounterview","own_food_item"),
					resourceManager.getString("foodcounterview","templates")];
				
				/* add event listener for clicking item */
				fooditemlist.addEventListener(Event.CHANGE,selectFoodItem);
			}
			
			private function selectFoodItem(event:IndexChangeEvent):void {
				var test:int = event.newIndex;
				navigator.pushView(AddFoodItemView,event.newIndex);
				//PopUpManager.addPopUp((new SelectUnit(),this,false);
			}
			
			private function toTracking():void { 
				//(this.navigator.owner as TabbedMobileApplication).navigator.selectedIndex = 1;
				FlexGlobals.topLevelApplication.navigator.selectedIndex = 1; 
			}
			
			private function changeHandler(event:IndexChangeEvent):void {
				if (foodCounterViewMenu.selectedIndex ==  1)
					toTracking();
			}
			
			private function searchTextChanged():void {
				if (excelSorting == null)
					excelSorting = new ExcelSorting(ModelLocator.getInstance().foodItemList);
				var result:int = excelSorting.getFirstMatchingItem(searchtext.text);
				fooditemlist.ensureIndexIsVisible(fooditemlist.dataProvider.length - 1);
				fooditemlist.ensureIndexIsVisible(result);
			}
			
		]]>
	</fx:Script>

	<s:titleContent>
		<s:TextInput id="searchtext" width="249" text="" change="searchTextChanged()" />
		<mx:Spacer width="15" height="100%"/>
	</s:titleContent>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/search48x48.png')"/>
	</s:actionContent>
	<s:navigationContent>
		<myComponents:MenuDropDownList 
						id="foodCounterViewMenu" 
						left="0" right="367" top="8" bottom="0"
						width="100%" height="100%"
						skinClass="skins.MenuDropDownListSkin"
						requireSelection="false"
						change="changeHandler(event)">
			<s:ArrayList source="{listOfOptionsArray}"/>
		</myComponents:MenuDropDownList>
		<mx:Spacer width="15" height="100%"/>
	</s:navigationContent>
	<s:List id="fooditemlist" left="0" right="0" top="0" bottom="0"
			dataProvider="{ModelLocator.getInstance().foodItemList}"></s:List>
</s:View>
