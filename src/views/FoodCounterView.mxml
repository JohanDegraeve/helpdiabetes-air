<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!--
following was an attempt to use FoodCounterGroup.as
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:myComponents="myComponents.*"
		actionBarVisible="true" 
		title="FoodCounterView"
		viewActivate="viewActivateHandler(event)">

	<fx:Declarations>
	</fx:Declarations>


	<fx:Metadata>
		[ResourceBundle("foodcounterview")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import model.ModelLocator;
			
			import mx.core.FlexGlobals;
			import mx.resources.ResourceBundle;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.skins.spark.DefaultItemRenderer;
			
			import utilities.ExcelSorting;

			[Bindable]
			public var listOfOptionsArray:Array ;
			
			[Bindable]
			private var searchtext_text:String;
			
			private var excelSorting:ExcelSorting;
			
			protected function viewActivateHandler(event:ViewNavigatorEvent):void
			{
				if (flash.system.Capabilities.version.substr(0,3) == "IOS"){
					this.navigationContent = [backButton];
				}
			}
			
	/*		private function init():void {
				// add event listener for clicking item 
		/*		fooditemlist.addEventListener(Event.CHANGE,selectFoodItem);
			}*/
			
			private function selectFoodItem(event:IndexChangeEvent):void {
				data = new Object();
				navigator.pushView(AddFoodItemView,ModelLocator.getInstance().foodItemList.getItemAt(event.newIndex));
			}
			
			private function toTracking():void { 
				ModelLocator.getInstance().initializeTrackingView = true;
				ModelLocator.getInstance().initializeTrackingViewTo = ModelLocator.getInstance().trackingList.length - 1;
				navigator.pushView(TrackingView);
			}
			
		]]>
	</fx:Script>
	
	<s:viewMenuItems>
		<s:ViewMenuItem label="{resourceManager.getString('foodcounterview','view_meal')}"/>
		<s:ViewMenuItem label="{resourceManager.getString('foodcounterview','to_tracking')}" click="toTracking()"/>
		<s:ViewMenuItem label="{resourceManager.getString('foodcounterview','own_food_item')}"/>
		<s:ViewMenuItem label="{resourceManager.getString('foodcounterview','templates')}"/>
	</s:viewMenuItems>

	<s:navigationContent>
		<s:Button   label="Back" id="backButton" click="navigator.popView()"/>
	</s:navigationContent>
	<myComponents:FoodCounterGroup dataProvider="{ModelLocator.getInstance().foodItemList}" change="{selectFoodItem}"/>
</s:View>-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:myComponents="myComponents.*"
		actionBarVisible="true" 
		title="FoodCounterView"
		initialize="init()" 
		viewActivate="viewActivateHandler(event)"
		>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<fx:Metadata>
		[ResourceBundle("foodcounterview")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import model.ModelLocator;
			
			import mx.core.FlexGlobals;
			import mx.resources.ResourceBundle;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.skins.spark.DefaultItemRenderer;
			
			import utilities.ExcelSorting;
			
			[Bindable]
			public var listOfOptionsArray:Array ;
			
			[Bindable]
			private var searchtext_text:String;
			
			private var excelSorting:ExcelSorting;
			
			protected function viewActivateHandler(event:ViewNavigatorEvent):void
			{
				if (flash.system.Capabilities.version.substr(0,3) == "IOS"){
					this.navigationContent = [backButton];
				}
			}
			
			private function init():void {
				/* add event listener for clicking item */
				fooditemlist.addEventListener(Event.CHANGE,selectFoodItem);
			}
			
			private function selectFoodItem(event:IndexChangeEvent):void {
				data = new Object();
				data.searchtext = searchtext.text;
				navigator.pushView(AddFoodItemView,ModelLocator.getInstance().foodItemList.getItemAt(event.newIndex));
			}
			
			private function toTracking():void { 
				ModelLocator.getInstance().initializeTrackingView = true;
				ModelLocator.getInstance().initializeTrackingViewTo = ModelLocator.getInstance().trackingList.length - 1;
				navigator.pushView(TrackingView);
			}
			
			private function searchTextChanged():void {
				if (excelSorting == null)
					excelSorting = new ExcelSorting(ModelLocator.getInstance().foodItemList);
				var result:int = excelSorting.getFirstMatchingItem(searchtext.text);
				fooditemlist.ensureIndexIsVisible(fooditemlist.dataProvider.length - 1);
				fooditemlist.ensureIndexIsVisible(result);
			}
			
			private function displayFoodItem(item:Object):String {
				return item.itemDescription;
			}
		]]>
	</fx:Script>
	
	<!-- menu to be used in case of Android -->
	<s:viewMenuItems>
		<s:ViewMenuItem label="{resourceManager.getString('foodcounterview','view_meal')}"/>
		<s:ViewMenuItem label="{resourceManager.getString('foodcounterview','to_tracking')}" click="toTracking()"/>
		<s:ViewMenuItem label="{resourceManager.getString('foodcounterview','own_food_item')}"/>
		<s:ViewMenuItem label="{resourceManager.getString('foodcounterview','templates')}"/>
	</s:viewMenuItems>
	
	<s:titleContent>
		<s:TextInput id="searchtext" text="{searchtext_text}" width="100%" change="searchTextChanged()" />
		
	</s:titleContent>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/search48x48.png')"/>
	</s:actionContent>
	<s:navigationContent>
		<s:Button   label="Back" id="backButton" click="navigator.popView()"/>
	</s:navigationContent>
	<s:List id="fooditemlist" left="0" right="0" top="0" bottom="0"
			dataProvider="{ModelLocator.getInstance().foodItemList}" labelFunction="displayFoodItem">
	</s:List>
</s:View>

