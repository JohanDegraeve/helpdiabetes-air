<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:myComponents="myComponents.*"
		actionBarVisible="true" 
		title="FoodCounterView"
		initialize="init()" 
		creationComplete="onCreationComplete()"
		>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<fx:Metadata>
		[ResourceBundle("foodcounterview")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import model.ModelLocator;
			
			import mx.core.FlexGlobals;
			import mx.resources.ResourceBundle;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.skins.spark.DefaultItemRenderer;
			
			import utilities.ExcelSorting;
			
			[Bindable]
			public var listOfOptionsArray:Array ;
			
			[Bindable]
			private var searchtext_text:String;
			
			private var excelSorting:ExcelSorting;
			
			
			private function init():void {
				/* add event listener for clicking item */
				fooditemlist.addEventListener(Event.CHANGE,selectFoodItem);
			}
			
			/**
			 * what I achieve here is that after HomeView is created, the dummyView will be pushed<br>
			 * When dummyView is popped, then data will be a boolean value being set to true, in which case dummyView will not be pushed again. 
			 */
			private function onCreationComplete():void {
				if (!ModelLocator.getInstance().firstStartUp)
					return;
				ModelLocator.getInstance().firstStartUp = false;
				navigator.pushView(dummyView);
			}

			
			private function selectFoodItem(event:IndexChangeEvent):void {
				data = new Object();
				data.searchtext = searchtext.text;
				navigator.pushView(AddFoodItemView,ModelLocator.getInstance().foodItemList.getItemAt(event.newIndex));
			}
			
			private function searchTextChanged():void {
				if (excelSorting == null)
					excelSorting = new ExcelSorting(ModelLocator.getInstance().foodItemList);
				var result:int = excelSorting.getFirstMatchingItem(searchtext.text);
				fooditemlist.ensureIndexIsVisible(fooditemlist.dataProvider.length - 1);
				fooditemlist.ensureIndexIsVisible(result);
			}
			
			private function displayFoodItem(item:Object):String {
				return item.itemDescription;
			}
		]]>
	</fx:Script>
	
	<s:titleContent>
		<s:TextInput id="searchtext" text="{searchtext_text}" width="100%" change="searchTextChanged()" />
		
	</s:titleContent>
	<s:List id="fooditemlist" left="0" right="0" top="0" bottom="0"
			dataProvider="{ModelLocator.getInstance().foodItemList}" labelFunction="displayFoodItem">
	</s:List>
</s:View>

