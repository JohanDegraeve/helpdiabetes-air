<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="DownloadFoodTableView"
		initialize="onInitialize()"
		backKeyPressed="view1_backKeyPressedHandler(event)">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("downloadfoodtableview")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import databaseclasses.Database;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import myComponents.AlertPopUp;
			
			import spark.components.TabbedViewNavigator;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			import utilities.Synchronize;
			
			[Bindable]
			private var itemList:ArrayList;
			[Bindable]
			private var back_label:String;

			private var alertPopUp:AlertPopUp;
		
			private var _selectedSpreadSheetIndex:int;
			
			//private static var popToFirstViewNecessary:Boolean = false;

			private static var downloadOptions:ArrayList;
			
			private var _selectedWorkSheetIndex:int;

			private function onInitialize():void {
				/*if (popToFirstViewNecessary) {
					navigator.popToFirstView();
					popToFirstViewNecessary = false;
				}*/
				
				if (downloadOptions == null) {
					downloadOptions = new ArrayList();
					downloadOptions.addItem(resourceManager.getString('downloadfoodtableview','overwrite'));
					downloadOptions.addItem(resourceManager.getString('downloadfoodtableview','append'));
				}
				back_label = resourceManager.getString('general','back');
				title = resourceManager.getString('downloadfoodtableview','title');
				topText.text = resourceManager.getString('downloadfoodtableview','searchingfortables');
				Synchronize.getInstance().addEventListener(Synchronize.SPREADSHEET_LIST_RETRIEVED,onSpreadSheetListRetrieved);
				Synchronize.getInstance().googleExcelFindAllSpreadSheets();			
				spreadSheetList.addEventListener(Event.CHANGE,selectedSpreadSheet);
			}
			
			private function onSpreadSheetListRetrieved(event:Event):void {
				itemList = Synchronize.getInstance().spreadSheetList;
				Synchronize.getInstance().removeEventListener(Synchronize.SPREADSHEET_LIST_RETRIEVED,onSpreadSheetListRetrieved);
				if (itemList.length == 0)
					topText.text = resourceManager.getString('downloadfoodtableview','nospreadsheetsfound');
				else  {
					topText.text = resourceManager.getString('downloadfoodtableview','selectspreadsheetsfound');
				}
			}
			
			protected function view1_backKeyPressedHandler(event:FlexEvent):void {
				Synchronize.getInstance().removeEventListener(Synchronize.SPREADSHEET_LIST_RETRIEVED,onSpreadSheetListRetrieved);
			}
			
			private function selectedSpreadSheet(event:IndexChangeEvent):void {
				//(event.currentTarget as List).selectedIndex
				spreadSheetList.visible = false;
				_selectedSpreadSheetIndex = (event.currentTarget as List).selectedIndex;
				topText.text = resourceManager.getString('downloadfoodtableview','searchinglistofworksheets') + " " + itemList.getItemAt(_selectedSpreadSheetIndex).title;
				Synchronize.getInstance().addEventListener(Synchronize.WORKSHEETS_IN_FOODTABLE_RETRIEVED,onWorkSheetListRetrieved);

				Synchronize.getInstance().googleExcelFindAllWorkSheetsInFoodTableSpreadSheet(null,_selectedSpreadSheetIndex);
			}
			
			private function onWorkSheetListRetrieved(event:Event):void {
				
				spreadSheetList.removeEventListener(Event.CHANGE,selectedSpreadSheet);
				itemList = Synchronize.getInstance().workSheetList;
				if (itemList.length == 1)  {
					selectedWorkSheet(null);
					return;
				}
				topText.text = resourceManager.getString('downloadfoodtableview','spreadsheet') +
					" " +
					displaySpreadSheetTittle(Synchronize.getInstance().spreadSheetList.getItemAt(_selectedSpreadSheetIndex)) +
					" " +
					resourceManager.getString('downloadfoodtableview','has') + 
					" " +
					itemList.length +
					" " +
					resourceManager.getString('downloadfoodtableview','worksheets') + 
					"\n\n" + 
					resourceManager.getString('downloadfoodtableview','selectworksheetsfound');
				spreadSheetList.addEventListener(Event.CHANGE,selectedWorkSheet);
				Synchronize.getInstance().removeEventListener(Synchronize.WORKSHEETS_IN_FOODTABLE_RETRIEVED,onSpreadSheetListRetrieved);
				spreadSheetList.visible = true;
			}
			
			private function displaySpreadSheetTittle(item:Object):String {
				if (item is String)
					return item as String;
				if (!(item is XML)) 
					return item.title;
				
				var namespace:Namespace = Synchronize.getInstance().namespace_default;
				var temp:String = (item as XML)..namespace::title;
				return temp;
			}
			
			private function selectedWorkSheet(event:IndexChangeEvent = null):void {
				spreadSheetList.removeEventListener(Event.CHANGE,selectedWorkSheet);
				spreadSheetList.visible = false;
				if (event == null)
					_selectedWorkSheetIndex = 0;
				else
					_selectedWorkSheetIndex = event.newIndex;
				
				topText.text = resourceManager.getString('downloadfoodtableview','overwriteorappend') ;
				itemList = downloadOptions;
				spreadSheetList.visible = true
				
				spreadSheetList.addEventListener(Event.CHANGE,selectedDownLoadOption);
			}

			private function selectedDownLoadOption(event:IndexChangeEvent):void {
				var dataObject:Object = new Object();
				dataObject.selectedWorkSheetIndex = _selectedWorkSheetIndex;
				dataObject.selectedSpreadSheetIndex = _selectedSpreadSheetIndex;
				dataObject.overWriteDatabase = (event.newIndex == 0);
				navigator.pushView(DownloadFoodTableView2,dataObject);
			}

		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:Group y="0" x="0" width="100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:Label id="topText" width="100%"/>
		<s:List id = "spreadSheetList" left="0" right="0" top="0" bottom="0" width="100%" useVirtualLayout="true" 
				itemRenderer="myComponents.ListItemRenderer" labelFunction="displaySpreadSheetTittle"
				dataProvider="{itemList}"/>
	</s:Group>
	
</s:View>
