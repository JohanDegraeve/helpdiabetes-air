<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!---
view to modify a meal's date and time
When creating a ChangeMealDateAndTimeView with navigator.pushView, the second parameter in pushView should contain the meal, example
{meal:aMealObject}
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		preinitialize="preInit()"
		creationComplete="onCreationComplete()"
		title="ChangeMealDateAndTime"
		removed="onRemoved(event)">
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformatter" dateTimePattern="{resourceManager.getString('general','datepattern')}" useUTC="false" locale="{Capabilities.language.substr(0,2)}">
			
		</s:DateTimeFormatter>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="false">
			
		</s:DateTimeFormatter>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("general")]
	</fx:Metadata>
	

	
	<fx:Script>
		<![CDATA[
			import databaseclasses.Meal;
			
			import model.ModelLocator;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.resources.Locale;
			
			import myComponents.DatePicker;
			import myComponents.PickerEvent;
			import myComponents.TimePicker;
			
			[Bindable]
			private var mealname_textarea_text:String;
			[Bindable]
			private var date_button_text:String;
			[Bindable]
			private var time_button_text:String;
			[Bindable]
			private var ok_button_text:String;
			private var previousTimeStamp:Number;
			
			private var timePicker:TimePicker;
			private var datePicker:DatePicker;
			
			/**
			 * if false then user has clicked cancel or back button in some place, means meal should not be changed
			 */
			private var mealChosen:Boolean = false;

			private function preInit():void {
				ok_button_text = resourceManager.getString('general','ok');
			}
			
			private function onCreationComplete():void {
				mealname_textarea_text = (data.meal as Meal).mealName ;
				date_button_text = dateformatter.format(new Date((data.meal as Meal).timeStamp ));
				time_button_text = timeformatter.format(new Date((data.meal as Meal).timeStamp));
				previousTimeStamp = (data.meal as Meal).timeStamp ;
			}
			
			private function dateClicked():void {
				datePicker = new DatePicker();
				datePicker.currentDate = new Date((data.meal as Meal).timeStamp);
				datePicker.addEventListener(PickerEvent.PICKER_SET, onDateSet);
				datePicker.addEventListener(PickerEvent.PICKER_CANCEL, onDateCancel);
				PopUpManager.addPopUp(datePicker, this, true);
				PopUpManager.centerPopUp(datePicker);

				function onDateCancel(event: PickerEvent): void
				{
					datePicker.removeEventListener(PickerEvent.PICKER_SET, onDateSet);
					datePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onDateCancel);
				}
				function onDateSet(event: PickerEvent): void
				{
					datePicker.removeEventListener(PickerEvent.PICKER_SET, onDateSet);
					datePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onDateCancel);
					(data.meal as Meal).timeStamp = (event.newValue as Date).valueOf();
					date_button_text = dateformatter.format(new Date((data.meal as Meal).timeStamp ));
				}
			}


			private function timeClicked():void {
				timePicker = new TimePicker();
				timePicker.currentTime = new Date((data.meal as Meal).timeStamp);
				timePicker.addEventListener(PickerEvent.PICKER_SET, onTimeSet);
				timePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeCancel);
				PopUpManager.addPopUp(timePicker, this, true);
				PopUpManager.centerPopUp(timePicker);
				
				function onTimeCancel(event: PickerEvent): void
				{
					timePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeSet);
					timePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeCancel);
					(data.meal as Meal).timeStamp = previousTimeStamp;
				}
				
				function onTimeSet(event: PickerEvent): void
				{
					timePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeSet);
					timePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeCancel);
					(data.meal as Meal).timeStamp = (event.newValue as Date).valueOf();
					time_button_text = timeformatter.format(new Date((data.meal as Meal).timeStamp));
				}
			}
			
			/**
			 * refresh the meals list, and pop two views so that we return back to addfooditemview
			 */
			private function okClicked():void {
				//ModelLocator.getInstance().meals.refresh();
				mealChosen = true;
				navigator.popView();
			}
			
			private function onRemoved(event:Event):void
			{
				if (timePicker != null)
					PopUpManager.removePopUp(timePicker);
				if (datePicker != null)
					PopUpManager.removePopUp(datePicker);
			}
			
		]]>
	</fx:Script>
	
	<s:navigationContent>
		<s:Button   label="Back" id="backButton" click="navigator.popView()"/>
	</s:navigationContent>
	<s:Group y="0" x="0" width="100%" height = "100%" >
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		
		<!-- the mealname -->
		<s:TextArea id="meal_name"  width="100%" text="{mealname_textarea_text}" editable="false" />
		
		<!-- the date -->
		<s:Button id="date_button" width="100%" label="{date_button_text}" click="dateClicked()" />
		
		<!-- the time -->
		<s:Button id="time_button" width="100%" label="{time_button_text}" click="timeClicked()" />
		
		<!-- Ok button -->
		<s:Button id="ok_button" width="100%" label="{ok_button_text}" click="okClicked()" />
		
	</s:Group>
	

</s:View>
