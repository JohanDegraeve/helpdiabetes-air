<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!---
view to modify a meal's date and time
When creating a ChangeMealDateAndTimeView with navigator.pushView, the second parameter in pushView should contain the meal, example
{meal:aMealObject}
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		preinitialize="preInit()"
		initialize="init()"
		creationComplete="onCreationComplete()"
		backKeyPressed="view1_backKeyPressedHandler(event)">
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformatter" dateTimePattern="{resourceManager.getString('general','datepattern')}" useUTC="false" locale="{Capabilities.language.substr(0,2)}">
			
		</s:DateTimeFormatter>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="false">
			
		</s:DateTimeFormatter>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("general")]
		[ResourceBundle("changemealdateandtimeview")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.google.analytics.AnalyticsTracker;
			
			import databaseclasses.Meal;
			import databaseclasses.Settings;
			
			import model.ModelLocator;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.resources.Locale;
			
			import myComponents.DatePicker;
			import myComponents.HelpCallOut;
			import myComponents.PickerEvent;
			import myComponents.TimePicker;
			
			import utilities.MyGATracker;
			
			[Bindable]
			private var mealname_textarea_text:String;
			[Bindable]
			private var date_button_text:String;
			[Bindable]
			private var time_button_text:String;
			[Bindable]
			private var ok_button_text:String;
			private var previousTimeStamp:Number;
			[Bindable]
			private var back_label:String;
			
			private var dateOrTimePicket:Group;
			
			/**
			 * if false then user has clicked cancel or back button in some place, means meal should not be changed
			 */
			private var mealChosen:Boolean = false;
			/**
			 * index of the selected meal in the list of meals 
			 */
			private var selectedMealIndex:int;

			public var tracker:AnalyticsTracker;
			private var trackerId:String;
			
			private var helpCallOut:HelpCallOut;
			
			private function init():void {
				trackerId = resourceManager.getString('analytics','trackeraccount');
				
			}
			
			private function helptext1Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext1Removed);
			}
			
			private function preInit():void {
				ok_button_text = resourceManager.getString('general','ok');
			}
			
			private function onCreationComplete():void {
				back_label = resourceManager.getString('general','back');
				mealname_textarea_text = (data.meal as Meal).mealName ;
				date_button_text = dateformatter.format(new Date((data.meal as Meal).timeStamp ));
				time_button_text = timeformatter.format(new Date((data.meal as Meal).timeStamp));
				previousTimeStamp = (data.meal as Meal).timeStamp ;
				selectedMealIndex = ModelLocator.getInstance().meals.getItemIndex(data.meal as Meal);

				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('changemealdateandtimeview','help_text_setdateandtimeoffuturemeal');
				helpCallOut.settingId = Settings.SettingsHelpTextChangeMealDateAndTimeViewButtons;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext1Removed);
				helpCallOut.open(time_button,true)
			}
			
			private function dateClicked():void {
				dateOrTimePicket = new DatePicker();
				(dateOrTimePicket as DatePicker).currentDate = new Date((data.meal as Meal).timeStamp);
				dateOrTimePicket.addEventListener(PickerEvent.PICKER_SET, onTimeSet);
				dateOrTimePicket.addEventListener(PickerEvent.PICKER_CANCEL, onTimeCancel);
				PopUpManager.addPopUp(dateOrTimePicket, this, true);
				PopUpManager.centerPopUp(dateOrTimePicket);
			}

			private function timeClicked():void {
				dateOrTimePicket = new TimePicker();
				(dateOrTimePicket as TimePicker).currentTime = new Date((data.meal as Meal).timeStamp);
				dateOrTimePicket.addEventListener(PickerEvent.PICKER_SET, onTimeSet);
				dateOrTimePicket.addEventListener(PickerEvent.PICKER_CANCEL, onTimeCancel);
				PopUpManager.addPopUp(dateOrTimePicket, this, true);
				PopUpManager.centerPopUp(dateOrTimePicket);
			}
			
			private function onTimeCancel(event: PickerEvent): void
			{
				dateOrTimePicket.removeEventListener(PickerEvent.PICKER_SET, onTimeSet);
				dateOrTimePicket.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeCancel);
				(data.meal as Meal).timeStamp = previousTimeStamp;
			}
			
			private function onTimeSet(event: PickerEvent): void
			{
				dateOrTimePicket.removeEventListener(PickerEvent.PICKER_SET, onTimeSet);
				dateOrTimePicket.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeCancel);
				(data.meal as Meal).timeStamp = (event.newValue as Date).valueOf();
				time_button_text = timeformatter.format(new Date((data.meal as Meal).timeStamp));
				date_button_text = dateformatter.format(new Date((data.meal as Meal).timeStamp ));
				ModelLocator.getInstance().meals.refresh();
				selectedMealIndex = ModelLocator.getInstance().meals.getItemIndex(data.meal as Meal);
			}
			
			/**
			 * refresh the meals list, and pop two views so that we return back to addfooditemview
			 */
			private function okClicked():void {
				if (!tracker)
					tracker = new MyGATracker( this, trackerId, "AS3", false );
				tracker.trackPageview( "ChangeMealDateAndTimeView-OkClicked" );

				mealChosen = true;
				navigator.popView();
			}
			
			/**
			 * if a meal is added then the reference to that meal is returned 
			 */
			override public function createReturnObject():Object {
				if (mealChosen) {
					return new Number(selectedMealIndex);
				}
				else return null;
			}
			
			protected function view1_backKeyPressedHandler(event:FlexEvent):void
			{
				if (dateOrTimePicket != null) {
					if (dateOrTimePicket.isPopUp) {
						PopUpManager.removePopUp(dateOrTimePicket);
						event.preventDefault();
					}
					dateOrTimePicket = null;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>

	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/Done_48x48.png')" click="okClicked()"/>
	</s:actionContent>

	<s:Group y="0" x="0" width="100%" height = "100%" >
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		
		<!-- the mealname -->
		<s:Label   id="meal_name"  height="100%" maxHeight="45" textAlign="center" verticalAlign="middle" width="100%" text="{mealname_textarea_text}" />
		
		<!-- the date -->
		<s:Button id="date_button" width="100%"  label="{date_button_text}" click="dateClicked()" />
		
		<!-- the time -->
		<s:Button id="time_button" width="100%" label="{time_button_text}" click="timeClicked()" />
		
	</s:Group>
	

</s:View>
