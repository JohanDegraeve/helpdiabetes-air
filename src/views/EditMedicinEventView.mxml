<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2016  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title=""
		initialize="onInitialize()"
		add="addHandler()"
		creationComplete="onCreationComplete()" actionBarVisible="true"
		backKeyPressed="onBackKeyPressed(event)">
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformatter" dateTimePattern="{resourceManager.getString('general','datepattern')}" useUTC="false" locale="{Capabilities.language.substr(0,2)}"/>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="false"/>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("editmedicineventview")]
		[ResourceBundle("editbgeventview")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			import spark.components.TabbedViewNavigator;
			import spark.components.ViewNavigator;
			
			import databaseclasses.MedicinEvent;
			import databaseclasses.Settings;
			import databaseclasses.UnitChangedEvent;
			
			import model.ModelLocator;
			
			import myComponents.AmountPicker;
			import myComponents.DatePicker;
			import myComponents.DayLineWithTotalAmount;
			import myComponents.HelpCallOut;
			import myComponents.PickerEvent;
			import myComponents.RequestConfirmation;
			import myComponents.TimePicker;
			import myComponents.TrackingViewElement;
			import myComponents.elementFromListPicker;
			
			import utilities.DateTimeUtilities;
			import utilities.MyGATracker;
			import utilities.Synchronize;
			
			private var amountPicker:AmountPicker;
			private var medicinPicker:elementFromListPicker;
			private var bolusTypePicker:elementFromListPicker;
			private var dateOrTimePicker:Group;
			private var confirmationPicker:RequestConfirmation;
			
			[Bindable]
			private var medicinName:String;
			[Bindable]
			private var dateText:String ;
			[Bindable]
			private var timeText:String;
			[Bindable]
			/**
			 * bolys  type, normal or square wave, if square then followed by ' - ' and duration in hh:mm
			 */
			private var bolusTypeText:String;
			[Bindable]
			private var amountText:String = "0";
			[Bindable]
			private var back_label:String;
			[Bindable]
			private var stopButtonVisible:Boolean = false;
			[Bindable]
			private var bolusTypeModifiable:Boolean = true;
			
			private var comment:String;
			
			private var defaultBolusDurationAsDate:Date = new Date(240*60*1000);
			private var defaultBolusDurationAsString:String = "04:00";
			private var bolusTypeList:ArrayCollection ;
			
			/**
			 * if true then this view is created for a new mealevent 
			 */
			private var newMedicinEvent:Boolean;
			
			/**
			 * stores the medicinevent in case it's an existing event that is being modified, used also in case a new event is created 
			 */
			private var theMedicinEvent:MedicinEvent;
			
			private var helpCallOut:HelpCallOut;
			
			private var _eventDateAndTime:Date;
			private function get eventDateAndTime():Date
			{
				return _eventDateAndTime;
			}
			private function set eventDateAndTime(value:Date):void
			{
				_eventDateAndTime = value;
				dateText = dateformatter.format(_eventDateAndTime);
				timeText = timeformatter.format(_eventDateAndTime);
			}
			
			private function onCreationComplete():void {
				if (data is MedicinEvent) {
					if (TrackingView.popToFirstViewNecessary())
						navigator.popToFirstView();
					else {
						bolusTypeText = (data as MedicinEvent).bolustype;
						if (bolusTypeText == resourceManager.getString('editmedicineventview','square')) {
							bolusTypeModifiable = true;
							var hoursAsInt:int = (data as MedicinEvent).bolusDurationInMinutes/60;
							var hoursAsString:String = (new Number(hoursAsInt)).toString();
							if (hoursAsString.length == 1)
								hoursAsString = "0" + hoursAsString;
							var minutesAsInt:int = (data as MedicinEvent).bolusDurationInMinutes - 60 * hoursAsInt;
							var minutesAsString:String = (new Number(minutesAsInt)).toString();
							if (minutesAsString.length == 1)
								minutesAsString = "0" + minutesAsString;
							
							bolusTypeText += " - " +  hoursAsString + ":" + minutesAsString;
							if ((data as MedicinEvent).timeStamp + (data as MedicinEvent).bolusDurationInMinutes * 60 * 1000 > (new Date()).valueOf())
								stopButtonVisible = true;
						} else {
							var hashedApiSecret:String = Settings.getInstance().getSetting(Settings.SettingsNightScoutHashedAPISecret);
							if (hashedApiSecret == "" || hashedApiSecret == "true") {
								bolusTypeModifiable = true;
							}  else {
								bolusTypeModifiable = false;//nightscout active and it's an existing normal bolustype, which means it is already stored @ nightscout
							}
						}
						medicinName = (data as MedicinEvent).medicinName;
						
						theMedicinEvent = data as MedicinEvent;
						eventDateAndTime = new Date((data as MedicinEvent).timeStamp);
						dateText = dateformatter.format(_eventDateAndTime);
						timeText = timeformatter.format(_eventDateAndTime);
						comment = theMedicinEvent.comment;
						amountText = (new Number((data as MedicinEvent).amount)).toString();
						newMedicinEvent = false;
						backButton.visible=true;
						TrashButton.visible = true;
					}
				} else {
					bolusTypeModifiable = true;
					if (Settings.getInstance().getSetting(Settings.SettingsHelpTextEditMedicinEventViewOkButton) == 'true') {
						helpCallOut = new HelpCallOut();
						helpCallOut.helpText = resourceManager.getString('editmedicineventview','help_text_OkButton');
						helpCallOut.settingId = Settings.SettingsHelpTextEditMedicinEventViewOkButton;
						helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext0Removed);
						helpCallOut.open(OkButton,true);
					} else {
						helptext0Removed(null);
					}
				}
			}
			
			private function helptext0Removed(event:Event):void {
				if (helpCallOut != null) helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext0Removed);
				if (Settings.getInstance().getSetting(Settings.SettingsHelpTextEditMedicinEventViewChangeMedicinType) == 'true') {
					helpCallOut = new HelpCallOut();
					helpCallOut.helpText = resourceManager.getString('editmedicineventview','help_text_selectMedicin');
					helpCallOut.settingId = Settings.SettingsHelpTextEditMedicinEventViewChangeMedicinType;
					helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext1Removed);
					helpCallOut.open(medicinNameTextField,true);
				} else {
					helptext1Removed(null);
				}
			}
			
			private function helptext1Removed(event:Event):void {
				if (helpCallOut != null) helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext1Removed);
				if (Settings.getInstance().getSetting(Settings.SettingsHelpTextEditMedicinEventViewChangeAmount) == 'true') {
					helpCallOut = new HelpCallOut();
					helpCallOut.helpText = resourceManager.getString('editmedicineventview','help_text_choseAmount');
					helpCallOut.settingId = Settings.SettingsHelpTextEditMedicinEventViewChangeAmount;
					helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext2Removed);
					helpCallOut.open(amount,true);
				} else {
					helptext2Removed(null);
				}
			}
			
			private function helptext2Removed(event:Event):void {
				if (helpCallOut != null) helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext2Removed);
				if (Settings.getInstance().getSetting(Settings.SettingsHelpTextEditBGEventViewChangeDateAndTime) == 'true') {
					helpCallOut = new HelpCallOut();
					helpCallOut.helpText = resourceManager.getString('editbgeventview','help_text_changeDateAndTime');
					helpCallOut.settingId = Settings.SettingsHelpTextEditBGEventViewChangeDateAndTime;
					helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext3Removed);
					helpCallOut.open(timeGroup,true)
				} else {
					helptext3Removed(null);
				}
			}
			
			private function helptext3Removed(event:Event):void {
				if (helpCallOut != null) helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext3Removed);
			}
			
			private function onBackKeyPressed(event:Event):void {
				if (medicinPicker != null) {
					if (medicinPicker.isPopUp) {
						PopUpManager.removePopUp(medicinPicker);
						event.preventDefault();
					}
					medicinPicker = null;
				} 
				if (dateOrTimePicker != null) {
					if (dateOrTimePicker.isPopUp) {
						PopUpManager.removePopUp(dateOrTimePicker);
						event.preventDefault();
					}
					dateOrTimePicker = null;
				} 
				if (amountPicker != null) {
					if (amountPicker.isPopUp) {
						PopUpManager.removePopUp(amountPicker);
						event.preventDefault();
					}
					amountPicker = null;
				} 
				if (confirmationPicker != null) {
					if (confirmationPicker.isPopUp) {
						PopUpManager.removePopUp(confirmationPicker);
						event.preventDefault();
					}
				}
			}
			
			private function onInitialize():void {
				//setting initial values, will be overwritten in oncreationcomplete if data is an medicinevent
				eventDateAndTime = new Date();
				dateText = dateformatter.format(_eventDateAndTime);
				timeText = timeformatter.format(_eventDateAndTime);
				medicinName = Settings.getInstance().getSetting(parseInt(Settings.getInstance().getSetting(Settings.SettingsDefaultMedicin)));
				bolusTypeText = ModelLocator.resourceManagerInstance.getString('editmedicineventview',MedicinEvent.BOLUS_TYPE_NORMAL);
				back_label = resourceManager.getString('general','back');
				newMedicinEvent = true;
				TrashButton.visible = false;
			}
			
			private function insulinTypeGroupClicked(e:MouseEvent = null):void {
				var unitList:ArrayCollection = new ArrayCollection();
				for (var i:int = Settings.SettingsInsulinType1; i <= Settings.SettingsInsulinType5;i++) {
					if (Settings.getInstance().getSetting(i) != null)
						if (Settings.getInstance().getSetting(i) != "")
							unitList.addItem(Settings.getInstance().getSetting(i));
				}
				
				medicinPicker = new elementFromListPicker();
				medicinPicker.addEventListener(UnitChangedEvent.ITEM_SELECTED, medicinSelected);
				medicinPicker.elements = unitList;
				medicinPicker.labelText1 = resourceManager.getString('editmedicineventview','select_medicin');
				
				PopUpManager.addPopUp(medicinPicker,UIComponent(this.parentApplication),true);
				PopUpManager.centerPopUp(medicinPicker);
				
				function medicinSelected(event:UnitChangedEvent):void {
					medicinPicker.removeEventListener(UnitChangedEvent.ITEM_SELECTED,medicinSelected);
					PopUpManager.removePopUp(medicinPicker);
					medicinName = Settings.getInstance().getSetting(Settings.SettingsInsulinType1 + event.index);
				}
			}
			
			private function amountGroupClicked(e:MouseEvent = null):void {
				amountPicker = new AmountPicker();
				amountPicker.amount = amountText;
				amountPicker.maxNonDecimalDigits = 2;
				amountPicker.decimalDigits = 1;
				amountPicker.labelText1 = resourceManager.getString('editmedicineventview','amount_of_units');
				amountPicker.addEventListener(PickerEvent.PICKER_SET, onAmountSet);
				amountPicker.addEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				
				PopUpManager.addPopUp(amountPicker, this, true);
				PopUpManager.centerPopUp(amountPicker);
				
				function onAmountCancel(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				}
				
				function onAmountSet(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
					amountText = (event.newValue as Number).toString();
				}
			}
			
			private function datumClicked(e:MouseEvent = null):void {
				dateOrTimePicker  = new DatePicker();
				(dateOrTimePicker as DatePicker).currentDate = eventDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function onTimeOrDateCancel(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
			}
			
			private function onTimeOrDateSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				eventDateAndTime = (event.newValue as Date);
				
				var bolusTypeTextSplitted:Array = bolusTypeText.split(" - ");
				var bolusDuration:Number = new Number();
				if (bolusTypeTextSplitted.length > 1) {
					var durationAsString:Array = bolusTypeTextSplitted[1].split(":");
					bolusDuration = 
						(new Number(durationAsString[0] as String)) * 60
						+
						(new Number(durationAsString[1] as String));
					if (eventDateAndTime + bolusDuration * 60 * 1000 > (new Date()).valueOf())
						stopButtonVisible = true;
					else 
						stopButtonVisible = false;
				}
			}
			
			private function timeClicked(e:MouseEvent = null):void {
				dateOrTimePicker = new TimePicker();
				(dateOrTimePicker as TimePicker).currentTime = eventDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function bolusTypeGroupClicked(e:MouseEvent = null):void {
				if (!bolusTypeModifiable)
					return;
				bolusTypeList = new ArrayCollection();
				bolusTypeList.addItem(resourceManager.getString('editmedicineventview',MedicinEvent.BOLUS_TYPE_NORMAL));
				bolusTypeList.addItem(resourceManager.getString('editmedicineventview',MedicinEvent.BOLUS_TYPE_SQUARE_WAVE));
				
				bolusTypePicker = new elementFromListPicker();
				bolusTypePicker.addEventListener(UnitChangedEvent.ITEM_SELECTED, bolusTypeSelected);
				bolusTypePicker.elements = bolusTypeList;
				bolusTypePicker.labelText1 = resourceManager.getString('editmedicineventview','select_bolustype');
				
				PopUpManager.addPopUp(bolusTypePicker,UIComponent(this.parentApplication),true);
				PopUpManager.centerPopUp(bolusTypePicker);
			}
			
			private function bolusTypeSelected(event:UnitChangedEvent):void {
				bolusTypePicker.removeEventListener(UnitChangedEvent.ITEM_SELECTED,bolusTypeSelected);
				PopUpManager.removePopUp(bolusTypePicker);
				var previousBolusTypeText:String = bolusTypeText;
				bolusTypeText = bolusTypeList.getItemAt(event.index) as String;
				
				//if it's a square wave that is being selected, then show pop-up to select the time.
				if (event.index == 1) {
					dateOrTimePicker = new TimePicker();
					
					var bolusTypeTextSplitted:Array = previousBolusTypeText.split(" - ");
					var bolusDuration:Number = new Number();//duration in minutes
					if (bolusTypeTextSplitted.length > 1) {
						var durationAsString:Array = bolusTypeTextSplitted[1].split(":");
						bolusDuration = 
							(new Number(durationAsString[0] as String)) * 60
							+
							(new Number(durationAsString[1] as String));
					} else
						bolusDuration = defaultBolusDurationAsDate.valueOf() / 1000 / 60;
					if (eventDateAndTime.valueOf() + bolusDuration * 60 * 1000 > (new Date()).valueOf())
						stopButtonVisible = true;
					else 
						stopButtonVisible = false;
					
					(dateOrTimePicker as TimePicker).currentTime = DateTimeUtilities.convertToUTC(new Date(bolusDuration * 60 * 1000));
					dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onDurationSet);
					dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onDurationCancel);
					PopUpManager.addPopUp(dateOrTimePicker, this, true);
					PopUpManager.centerPopUp(dateOrTimePicker);
				}
			}
			
			private function onDurationCancel(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onDurationSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onDurationCancel);
				bolusTypeText += " - " + defaultBolusDurationAsString;
			}
			
			private function onDurationSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onDurationSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onDurationCancel);
				var bolusDuration:Number = (DateTimeUtilities.convertFromUTC(event.newValue as Date)).time / 1000 / 60;
				var hoursAsInt:int = bolusDuration/60;
				var hoursAsString:String = (new Number(hoursAsInt)).toString();
				if (hoursAsString.length == 1)
					hoursAsString = "0" + hoursAsString;
				var minutesAsInt:int = bolusDuration - 60 * hoursAsInt;
				var minutesAsString:String = (new Number(minutesAsInt)).toString();
				if (minutesAsString.length == 1)
					minutesAsString = "0" + minutesAsString;
				
				bolusTypeText += " - " +  hoursAsString + ":" + minutesAsString;
				if (eventDateAndTime.valueOf() + bolusDuration * 60 * 1000 > (new Date()).valueOf())
					stopButtonVisible = true;
				else 
					stopButtonVisible = false;
			}
			
			
			private function okClicked(e:MouseEvent = null):void {
				MyGATracker.getInstance().trackPageview( "EditMedicinEventView-OkClicked" );
				var bolusTypeTextSplitted:Array = bolusTypeText.split(" - ");
				var bolusDuration:Number = new Number();
				if (bolusTypeTextSplitted.length > 1) {
					var durationAsString:Array = bolusTypeTextSplitted[1].split(":");
					bolusDuration = 
						(new Number(durationAsString[0] as String)) * 60
						+
						(new Number(durationAsString[1] as String));
				}
				if (newMedicinEvent) {
					theMedicinEvent = new MedicinEvent(
						new Number(amountText),
						medicinName,
						DateTimeUtilities.createEventId() + "-medicin",
						comment,//comment,
						eventDateAndTime.valueOf(),
						(new Date()).valueOf(),
						true,
						bolusTypeTextSplitted[0],
						bolusDuration);
					ModelLocator.trackingList.addItem(theMedicinEvent);
				} else {
					theMedicinEvent.updateMedicinEvent(bolusTypeTextSplitted[0], bolusDuration, medicinName,new Number(amountText),comment,eventDateAndTime.valueOf(),new Date().valueOf());
				}
				
				var creationTimeStampAsDate:Date = new Date(theMedicinEvent.timeStamp);
				creationTimeStampAsDate.setHours(0,0,0,0);
				if (creationTimeStampAsDate.valueOf() > ModelLocator.oldestDayLineStoredInTrackingList) {
					for (var i:Number = creationTimeStampAsDate.valueOf(); i >  (ModelLocator.oldestDayLineStoredInTrackingList + 1); i = i - 86400000) {
						ModelLocator.trackingList.addItem(new DayLineWithTotalAmount(i));
						if (ModelLocator.youngestDayLineStoredInTrackingList == 5000000000000)
							i =  ModelLocator.oldestDayLineStoredInTrackingList;//we don't need to do that 
					}
					ModelLocator.trackingList.refresh();
					ModelLocator.oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					if (ModelLocator.youngestDayLineStoredInTrackingList == 5000000000000)
						ModelLocator.youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
				}
				else
					if (creationTimeStampAsDate.valueOf() < ModelLocator.youngestDayLineStoredInTrackingList) {
						for (var j:Number = creationTimeStampAsDate.valueOf(); j <  ModelLocator.youngestDayLineStoredInTrackingList;j = j + 86400000) {
							ModelLocator.trackingList.addItem(new DayLineWithTotalAmount(j));
							if (ModelLocator.oldestDayLineStoredInTrackingList == 0)
								j = ModelLocator.youngestDayLineStoredInTrackingList;
						}
						ModelLocator.trackingList.refresh();
						ModelLocator.youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
						if (ModelLocator.oldestDayLineStoredInTrackingList == 0)
							ModelLocator.oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					}
				
				ModelLocator.trackingList.refresh();
				//switch to the tracking view and set trackingeventtoshow to this event
				ModelLocator.trackingEventToShow = theMedicinEvent.eventid;
				(navigator.parentNavigator as TabbedViewNavigator).selectedIndex = 1;
				((navigator.parentNavigator as TabbedViewNavigator).navigators[1] as ViewNavigator).popToFirstView();
				Synchronize.getInstance().startSynchronize(true,false);
			}
			
			private function deleteEvent(e:MouseEvent = null):void {
				confirmationPicker = new RequestConfirmation();
				confirmationPicker.labelText1 = resourceManager.getString('general','delete_event');
				confirmationPicker.addEventListener(PickerEvent.PICKER_SET, onYesClicked);
				confirmationPicker.addEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				
				PopUpManager.addPopUp(confirmationPicker, this, true);
				PopUpManager.centerPopUp(confirmationPicker);
				
				function onYesClicked(event: PickerEvent): void
				{
					MyGATracker.getInstance().trackPageview( "EditMedicinEventView-deleteClicked" );
					
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
					Synchronize.getInstance().addObjectToBeDeleted(theMedicinEvent);
					Synchronize.getInstance().startSynchronize(true,false);
					
					theMedicinEvent.deleteEvent();
					//we need to make sure the previous tracking event is visible so we store the itemindex
					var trackinglistPointer:Number = ModelLocator.trackingList.getItemIndex(theMedicinEvent);
					//now delete it
					ModelLocator.trackingList.removeItemAt(trackinglistPointer);
					ModelLocator.recalculateInsulinAmoutInAllYoungerMealEvents(theMedicinEvent.timeStamp);					
					//and now make sure the previous item is visible
					if (trackinglistPointer > 0)
						ModelLocator.trackingEventToShow = 
							(ModelLocator.trackingList.getItemAt(trackinglistPointer - 1) as TrackingViewElement).eventid;						
					//switch to the tracking view
					(navigator.parentNavigator as TabbedViewNavigator).selectedIndex = 1;
					((navigator.parentNavigator as TabbedViewNavigator).navigators[1] as ViewNavigator).popToFirstView();
				}
				
				function onNoClicked(event: PickerEvent): void
				{
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				}
			}
			
			private function editNote(e:MouseEvent = null):void {
				var dataToPass:Object = new Object();
				dataToPass.title = "";
				dataToPass.text = comment;
				dataToPass.topText = resourceManager.getString('general','editnotetext');
				
				var passbackObject:Object = new Object();
				if (newMedicinEvent) {
					passbackObject.medicinName = medicinName;
					passbackObject.amountText = amountText;
					passbackObject.eventDateAndTime = eventDateAndTime;						
				} else {
					var bolusTypeTextSplitted:Array = bolusTypeText.split(" - ");
					var bolusDuration:Number = new Number();
					if (bolusTypeTextSplitted.length > 1) {
						var durationAsString:Array = bolusTypeTextSplitted[1].split(":");
						bolusDuration = 
							(new Number(durationAsString[0] as String)) * 60
							+
							(new Number(durationAsString[1] as String));
					}
					
					//updating the bg event, this means even if the user would hit the back button afterwards, the bgevent will be updated
					//this is in case user updates eg result or timing, then hits comment button, when coming back, we need to have the new values
					theMedicinEvent.updateMedicinEvent(bolusTypeTextSplitted[0], bolusDuration, medicinName,new Number(amountText), comment, eventDateAndTime.valueOf(),new Date().valueOf());
					passbackObject = theMedicinEvent;
				}
				dataToPass.dataToPassBack = passbackObject;
				navigator.pushView(TextPickerView,dataToPass);				
			}
			
			private function addHandler():void {
				if (!navigator.poppedViewReturnedObject) return; 
				if (!navigator.poppedViewReturnedObject.object) return;
				
				if (navigator.poppedViewReturnedObject.object.dataToPassBack) {
					if (navigator.poppedViewReturnedObject.object.dataToPassBack is MedicinEvent) {
						theMedicinEvent = navigator.poppedViewReturnedObject.object.dataToPassBack as MedicinEvent;
						medicinName = theMedicinEvent.medicinName;
						amountText = (new  Number(theMedicinEvent.amount)).toString();
						eventDateAndTime = new Date(theMedicinEvent.timeStamp);
						dateText = dateformatter.format(_eventDateAndTime);
						timeText = timeformatter.format(_eventDateAndTime);
						newMedicinEvent = false;
					} else
					{
						medicinName = navigator.poppedViewReturnedObject.object.dataToPassBack.medicinName as String;
						amountText = navigator.poppedViewReturnedObject.object.dataToPassBack.amountText as String;
						eventDateAndTime = navigator.poppedViewReturnedObject.object.dataToPassBack.eventDateAndTime as Date;
					}
					
					if (navigator.poppedViewReturnedObject.object.text != null)
						onTextSet(navigator.poppedViewReturnedObject.object.text as String);
				}
			}
			
			private function onTextSet(textSet:String): void
			{
				comment = textSet;
				if (newMedicinEvent) {
				} else {
					var bolusTypeTextSplitted:Array = bolusTypeText.split(" - ");
					var bolusDuration:Number = new Number();
					if (bolusTypeTextSplitted.length > 1) {
						var durationAsString:Array = bolusTypeTextSplitted[1].split(":");
						bolusDuration = 
							(new Number(durationAsString[0] as String)) * 60
							+
							(new Number(durationAsString[1] as String));
					}
					theMedicinEvent.updateMedicinEvent(bolusTypeTextSplitted[0], bolusDuration,  medicinName,new Number(amountText),comment,eventDateAndTime.valueOf(),new Date().valueOf());
				}
			}
			
			private function stopButtonClicked(buttonClickEvent:MouseEvent):void
			{
				var newBolusDuration:Number = ((new Date()).valueOf() - eventDateAndTime.valueOf() - 1) / 1000 / 60;
				
				var bolusTypeTextSplitted:Array = bolusTypeText.split(" - ");
				var oldBolusDuration:Number = new Number();
				var durationAsString:Array = bolusTypeTextSplitted[1].split(":");
				oldBolusDuration = 
					(new Number(durationAsString[0] as String)) * 60
					+
					(new Number(durationAsString[1] as String));
				
				var newAmount:Number = (new Number(amountText))/ oldBolusDuration * newBolusDuration;
				amountText = ((Math.round(newAmount * 10)) / 10).toString();
				
				bolusTypeText = resourceManager.getString('editmedicineventview','square');
				var hoursAsInt:int = newBolusDuration/60;
				var hoursAsString:String = (new Number(hoursAsInt)).toString();
				if (hoursAsString.length == 1)
					hoursAsString = "0" + hoursAsString;
				var minutesAsInt:int = newBolusDuration - 60 * hoursAsInt;
				var minutesAsString:String = (new Number(minutesAsInt)).toString();
				if (minutesAsString.length == 1)
					minutesAsString = "0" + minutesAsString;
				
				bolusTypeText += " - " +  hoursAsString + ":" + minutesAsString;
				stopButtonVisible = false;
			}
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button  visible="false" label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="{ModelLocator.trashImage_48x48}" id="TrashButton" click="deleteEvent(event)"/>
		<s:Button icon="{ModelLocator.notesImage_48x48}" id="NotesButton" click="editNote(event)"/>
		<s:Button icon="{ModelLocator.doneImage_48x48}" id="OkButton" click="okClicked(event)"/>
	</s:actionContent>
	
	<s:Group y="0" x="0" width="100%" height = "100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout >
			</s:VerticalLayout>
		</s:layout>
		<s:Label y="0" x="0" width="100%" text="{resourceManager.getString('editmedicineventview','addmedicinevent')}" height="100%" maxHeight="75"  textAlign="center" verticalAlign="middle"/>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xADADAD" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="insulinTypeGroup" y="0" x="0" width="100%" click="insulinTypeGroupClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="insulinTypeText" height="47" width="40%" text="{resourceManager.getString('editmedicineventview','medicin')}" verticalAlign="middle"/>
			<s:Button id="medicinNameTextField" height="47" width="60%" label="@{medicinName}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xADADAD" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="amountGroup"  y="0" x="0" width="100%" click="amountGroupClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="amountGroupText" height="47" width="70%" text="{resourceManager.getString('editmedicineventview','amount')}"  verticalAlign="middle"/>
			<s:Button id="amount" height="47" width="30%" label="@{amountText}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xADADAD" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="datumGroup" y="0" x="0" width="100%" click="datumClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="datumtext" height="47" width="30%" text="{resourceManager.getString('general','date')}"  verticalAlign="middle"/>
			<s:Button id="datum" height="47" width="70%" label="@{dateText}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xADADAD" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="timeGroup" y="0" x="0" width="100%" click="timeClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="timetext" height="47" width="30%" text="{resourceManager.getString('general','time')}"  verticalAlign="middle"/>
			<s:Button id="time" height="47" width="70%" label="@{timeText}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xADADAD" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="bolusTypeGroup" y="0" x="0" width="100%" >
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="bolustypetext" height="47" width="30%" text="{resourceManager.getString('editmedicineventview','bolustype')}"  verticalAlign="middle"/>
			<s:Button id="bolustype" height="47"  label="@{bolusTypeText}" click="bolusTypeGroupClicked(event)"/>
			<s:Button id="stopButton" height="47" width="{stopButtonVisible ? 47:0}" icon="@Embed('assets/stopsign.png')" click="stopButtonClicked(event)" visible="{stopButtonVisible}"/>
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xADADAD" weight="1"/>
			</s:stroke>
		</s:Line>	
	</s:Group>
</s:View>
