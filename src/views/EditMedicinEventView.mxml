<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title=""
		initialize="onInitialize()"
		creationComplete="onCreationComplete()" actionBarVisible="false"
		backKeyPressed="onBackKeyPressed(event)">
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformatter" dateTimePattern="{resourceManager.getString('general','datepattern')}" useUTC="false" locale="{Capabilities.language.substr(0,2)}"/>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="false"/>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("editmedicineventview")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import databaseclasses.MedicinEvent;
			import databaseclasses.Settings;
			import databaseclasses.UnitChangedEvent;
			
			import model.ModelLocator;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			import myComponents.AmountPicker;
			import myComponents.DatePicker;
			import myComponents.DayLineWithTotalAmount;
			import myComponents.PickerEvent;
			import myComponents.TimePicker;
			import myComponents.elementFromListPicker;
			
			private var amountPicker:AmountPicker;
			private var medicinPicker:elementFromListPicker;
			private var dateOrTimePicker:Group;

			[Bindable]
			private var medicinName:String;
			[Bindable]
			private var dateText:String ;
			[Bindable]
			private var timeText:String;
			[Bindable]
			private var amountText:String = "0";
			[Bindable]
			private var back_label:String;
			[Bindable]
			private var add_label:String;
			
			/**
			 * if true then this view is created for a new mealevent 
			 */
			private var newMealEvent:Boolean;
			
			/**
			 * stores the medicinevent in case it's an existing event that is being modified, used also in case a new event is created 
			 */
			private var theMedicinEvent:MedicinEvent;

			private var _eventDateAndTime:Date;
			private function get eventDateAndTime():Date
			{
				return _eventDateAndTime;
			}
			private function set eventDateAndTime(value:Date):void
			{
				_eventDateAndTime = value;
				dateText = dateformatter.format(_eventDateAndTime);
				timeText = timeformatter.format(_eventDateAndTime);
			}
			
			private function onCreationComplete():void {
				if (data is MedicinEvent) {
					theMedicinEvent = data as MedicinEvent;
					eventDateAndTime = new Date((data as MedicinEvent).timeStamp);
					dateText = dateformatter.format(_eventDateAndTime);
					timeText = timeformatter.format(_eventDateAndTime);
					medicinName = (data as MedicinEvent).medicinName;
					amountText = (new Number((data as MedicinEvent).amount)).toString();
					add_label = resourceManager.getString('addfooditemview','save_button');
					newMealEvent = false;
					actionBarVisible = true;
				} 
			}
			
			private function onBackKeyPressed(event:Event):void {
				if (medicinPicker != null) {
					if (medicinPicker.isPopUp) {
						PopUpManager.removePopUp(medicinPicker);
						event.preventDefault();
					}
					medicinPicker = null;
				} 
				if (dateOrTimePicker != null) {
					if (dateOrTimePicker.isPopUp) {
						PopUpManager.removePopUp(dateOrTimePicker);
						event.preventDefault();
					}
					dateOrTimePicker = null;
				} 
				if (amountPicker != null) {
					if (amountPicker.isPopUp) {
						PopUpManager.removePopUp(amountPicker);
						event.preventDefault();
					}
					amountPicker = null;
				} 
	
			}

			private function onInitialize():void {
				//setting initial values, will be overwritten in oncreationcomplete if data is an medicinevent
				eventDateAndTime = new Date();
				dateText = dateformatter.format(_eventDateAndTime);
				timeText = timeformatter.format(_eventDateAndTime);
				medicinName = Settings.getInstance().getSetting(parseInt(Settings.getInstance().getSetting(Settings.SettingsDefaultMedicin)));
				back_label = resourceManager.getString('general','back');
				add_label = resourceManager.getString('addfooditemview','add_button')
				newMealEvent = true;
			}

			private function insulinTypeGroupClicked(e:MouseEvent = null):void {
				var unitList:ArrayCollection = new ArrayCollection();
				for (var i:int = Settings.SettingsInsulinType1; i <= Settings.SettingsInsulinType5;i++) {
					if (Settings.getInstance().getSetting(i) != null)
						if (Settings.getInstance().getSetting(i) != "")
							unitList.addItem(Settings.getInstance().getSetting(i));
				}
				
				medicinPicker = new elementFromListPicker();
				medicinPicker.addEventListener(UnitChangedEvent.ITEM_SELECTED, medicinSelected);
				medicinPicker.elements = unitList;
				medicinPicker.labelText1 = resourceManager.getString('editmedicineventview','select_medicin');
				
				PopUpManager.addPopUp(medicinPicker,UIComponent(this.parentApplication),true);
				PopUpManager.centerPopUp(medicinPicker);

				function medicinSelected(event:UnitChangedEvent):void {
					medicinPicker.removeEventListener(UnitChangedEvent.ITEM_SELECTED,medicinSelected);
					PopUpManager.removePopUp(medicinPicker);
					medicinName = Settings.getInstance().getSetting(Settings.SettingsInsulinType1 + event.index);
				}
			}
			
			private function amountGroupClicked(e:MouseEvent = null):void {
				amountPicker = new AmountPicker();
				amountPicker.amount = amountText;
				amountPicker.maxNonDecimalDigits = 2;
				amountPicker.decimalDigits = 1;
				amountPicker.labelText1 = resourceManager.getString('editmedicineventview','amount_of_units');
				amountPicker.addEventListener(PickerEvent.PICKER_SET, onAmountSet);
				amountPicker.addEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				
				PopUpManager.addPopUp(amountPicker, this, true);
				PopUpManager.centerPopUp(amountPicker);
				
				function onAmountCancel(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				}
				
				function onAmountSet(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
					amountText = (event.newValue as Number).toString();
				}
			}
			
			private function datumClicked(e:MouseEvent = null):void {
				dateOrTimePicker  = new DatePicker();
				(dateOrTimePicker as DatePicker).currentDate = eventDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function onTimeOrDateCancel(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
			}
			
			private function onTimeOrDateSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				eventDateAndTime = (event.newValue as Date);
			}
			
			private function timeClicked(e:MouseEvent = null):void {
				dateOrTimePicker = new TimePicker();
				(dateOrTimePicker as TimePicker).currentTime = eventDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function okClicked(e:MouseEvent = null):void {
				if (newMealEvent) {
					theMedicinEvent = new MedicinEvent(
						new Number(amountText),
						medicinName,
						eventDateAndTime.valueOf());
					ModelLocator.getInstance().trackingList.addItem(theMedicinEvent);
				} else {
					theMedicinEvent.updateMedicinEvent(medicinName,new Number(amountText),eventDateAndTime.valueOf());
				}
				
				var creationTimeStampAsDate:Date = new Date(theMedicinEvent.timeStamp);
				creationTimeStampAsDate.setHours(0,0,0,0);
				if (creationTimeStampAsDate.valueOf() > ModelLocator.getInstance().oldestDayLineStoredInTrackingList) {
					for (var i:Number = creationTimeStampAsDate.valueOf(); i >  (ModelLocator.getInstance().oldestDayLineStoredInTrackingList + 1); i = i - 86400000) {
						ModelLocator.getInstance().trackingList.addItem(new DayLineWithTotalAmount(i));
						if (ModelLocator.getInstance().youngestDayLineStoredInTrackingList == 5000000000000)
							i =  ModelLocator.getInstance().oldestDayLineStoredInTrackingList;//we don't need to do that 
					}
					ModelLocator.getInstance().trackingList.refresh();
					ModelLocator.getInstance().oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					if (ModelLocator.getInstance().youngestDayLineStoredInTrackingList == 5000000000000)
						ModelLocator.getInstance().youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
				}
				else
					if (creationTimeStampAsDate.valueOf() < ModelLocator.getInstance().youngestDayLineStoredInTrackingList) {
						for (var j:Number = creationTimeStampAsDate.valueOf(); j <  ModelLocator.getInstance().youngestDayLineStoredInTrackingList;j = j + 86400000) {
							ModelLocator.getInstance().trackingList.addItem(new DayLineWithTotalAmount(j));
							if (ModelLocator.getInstance().oldestDayLineStoredInTrackingList == 0)
								j = ModelLocator.getInstance().youngestDayLineStoredInTrackingList;
						}
						ModelLocator.getInstance().trackingList.refresh();
						ModelLocator.getInstance().youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
						if (ModelLocator.getInstance().oldestDayLineStoredInTrackingList == 0)
							ModelLocator.getInstance().oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					}
				
				ModelLocator.getInstance().trackingList.refresh();
				navigator.popView();
			}
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()"/>
	</s:navigationContent>

	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:entries>
					<s:GradientEntry color="{styleManager.getStyleDeclaration('.backGroundColorInLists').getStyle('medicinEventBackGroundDark')}" ratio="0" alpha="1"/>
					<s:GradientEntry color="{styleManager.getStyleDeclaration('.backGroundColorInLists').getStyle('medicinEventBackGroundLight')}" ratio="1" alpha="1"/>
				</s:entries>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>		
	<s:Group y="0" x="0" width="100%" height = "100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:TextArea y="0" x="0" width="100%" text="{resourceManager.getString('editmedicineventview','addmedicinevent')}" borderVisible="false" editable="false"/>
		<s:Group id="insulinTypeGroup" y="0" x="0" width="100%" click="insulinTypeGroupClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea  id="insulinTypeText" width="40%" text="{resourceManager.getString('editmedicineventview','medicin')}" editable="false" borderVisible="false"/>
			<s:Button id="medicinNameTextField" width="60%" label="@{medicinName}" />
		</s:Group>
		<s:Group id="amountGroup" y="0" x="0" width="100%" click="amountGroupClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea  id="amountGroupText" width="30%" text="{resourceManager.getString('editmedicineventview','amount')}" editable="false" borderVisible="false"/>
			<s:Button id="amount" width="70%" label="@{amountText}" />
		</s:Group>
		<s:Group id="datumGroup" y="0" x="0" width="100%" click="datumClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea  id="datumtext"  width="30%" text="{resourceManager.getString('general','date')}" editable="false" borderVisible="false"/>
			<s:Button id="datum" width="70%" label="@{dateText}" />
		</s:Group>
		<s:Group id="timeGroup" y="0" x="0" width="100%" click="timeClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea  id="timetext"  width="30%" text="{resourceManager.getString('general','time')}" editable="false" borderVisible="false"/>
			<s:Button id="time" width="70%" label="@{timeText}" />
		</s:Group>
		<s:Group id="okGroup" y="0" x="0" width="100%" click="okClicked(event)">
			<s:Button  id="okButton"   width="100%" label="{add_label}" />
		</s:Group>
	</s:Group>

</s:View>
