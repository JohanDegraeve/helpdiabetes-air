<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		initialize="onInitialize()"
		backKeyPressed="onBackKeyPressed(event)">
	<fx:Script>
		<![CDATA[
			import databaseclasses.Settings;
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="true"/>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("settingsmealtimesview")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import myComponents.TimePicker;
			import myComponents.PickerEvent;
			
			[Bindable] private var breakfastTime:String;
			[Bindable] private var lunchTime:String;
			[Bindable] private var snackTime:String;
			[Bindable]
			private var back_label:String;
			private var dateOrTimePicker:TimePicker;
			
			private function onBackKeyPressed(event:Event):void {
				if (dateOrTimePicker != null) {
					if (dateOrTimePicker.isPopUp) {
						PopUpManager.removePopUp(dateOrTimePicker);
						event.preventDefault();
					}
					dateOrTimePicker = null;
				} 
			}
			
			private function onInitialize():void {
				back_label = resourceManager.getString('general','back');
				breakfastTime = timeformatter.format(new Date(new Number(Settings.getInstance().getSetting(Settings.SettingBREAKFAST_UNTIL))));
				lunchTime = timeformatter.format(new Date(new Number(Settings.getInstance().getSetting(Settings.SettingLUNCH_UNTIL))));
				snackTime = timeformatter.format(new Date(new Number(Settings.getInstance().getSetting(Settings.SettingSNACK_UNTIL))));
			}
			
			private function onTimeOrDateCancel(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, breakfastUntilTimeSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
			}
			
			private function breakfastUntilTimeSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, breakfastUntilTimeSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				breakfastTime = timeformatter.format(event.newValue as Date);
				Settings.getInstance().setSetting(Settings.SettingBREAKFAST_UNTIL,(((event.newValue as Date).hoursUTC * 3600000 + (event.newValue as Date).minutesUTC * 60000)as Number).toString()); 
			}
			
			private function breakfastUntilSettingClicked(e:MouseEvent = null):void {
				dateOrTimePicker = new TimePicker();
				dateOrTimePicker.useUTC=true;				
				dateOrTimePicker.minTime = new Date(1);//1 ms after 0 hour, because breakfast can only start at 0, but off course time can never be set to 1 ms
				dateOrTimePicker.maxTime = new Date(new Number(Settings.getInstance().getSetting(Settings.SettingLUNCH_UNTIL)));
				(dateOrTimePicker as TimePicker).currentTime = new Date(new Number(Settings.getInstance().getSetting(Settings.SettingBREAKFAST_UNTIL)));
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, breakfastUntilTimeSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}

			private function lunchfastUntilTimeSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, lunchfastUntilTimeSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				lunchTime = timeformatter.format(event.newValue as Date);
				Settings.getInstance().setSetting(Settings.SettingLUNCH_UNTIL,(((event.newValue as Date).hoursUTC * 3600000 + (event.newValue as Date).minutesUTC * 60000)as Number).toString()); 
			}
			
			private function lunchUntilSettingClicked(e:MouseEvent = null):void {
				dateOrTimePicker = new TimePicker();
				dateOrTimePicker.useUTC=true;
				dateOrTimePicker.maxTime = new Date(new Number(Settings.getInstance().getSetting(Settings.SettingSNACK_UNTIL)));
				dateOrTimePicker.minTime = new Date(new Number(Settings.getInstance().getSetting(Settings.SettingBREAKFAST_UNTIL)));
				(dateOrTimePicker as TimePicker).currentTime = new Date(new Number(Settings.getInstance().getSetting(Settings.SettingLUNCH_UNTIL)));
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, lunchfastUntilTimeSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function snackfastUntilTimeSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, snackfastUntilTimeSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				snackTime = timeformatter.format(event.newValue as Date);
				Settings.getInstance().setSetting(Settings.SettingSNACK_UNTIL,(((event.newValue as Date).hoursUTC * 3600000 + (event.newValue as Date).minutesUTC * 60000)as Number).toString()); 
			}
			
			private function snackUntilSettingClicked(e:MouseEvent = null):void {
				dateOrTimePicker = new TimePicker();
				dateOrTimePicker.useUTC=true;
				dateOrTimePicker.maxTime = new Date(new Number(143999999));//1 ms before midnight
				dateOrTimePicker.minTime = new Date(new Number(Settings.getInstance().getSetting(Settings.SettingSNACK_UNTIL)));
				(dateOrTimePicker as TimePicker).currentTime = new Date(new Number(Settings.getInstance().getSetting(Settings.SettingSNACK_UNTIL)));
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, snackfastUntilTimeSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()"/>
	</s:navigationContent>

	<s:Group y="0" x="0" width="100%" height = "100%"  left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout >
			</s:VerticalLayout>
		</s:layout>
		<s:TextArea y="0" x="0" width="100%" text="{resourceManager.getString('settingsmealtimesview','mealtimes')}" borderVisible="false" editable="false"/>
		<s:Group id="breakfastUntilSetting" y="0" x="0" width="100%" height = "100%" maxHeight="50" click="breakfastUntilSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea  width="60%" text="{resourceManager.getString('settingsmealtimesview','breakfastuntil') }" editable="false" borderVisible="false"/>
			<s:Button id="breakfastuntilTime" width="40%" label="@{breakfastTime}" />
		</s:Group>
		<s:Group id="lunchUntilSetting" y="0" x="0" width="100%" height = "100%" maxHeight="50" click="lunchUntilSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea width="60%" text="{resourceManager.getString('settingsmealtimesview','lunchuntil') }" editable="false" borderVisible="false"/>
			<s:Button id="lunchuntilTime" width="40%" label="@{lunchTime}" />
		</s:Group>
		<s:Group id="snackUntilSetting" y="0" x="0" width="100%" height = "100%" maxHeight="50" click="snackUntilSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea width="60%" text="{resourceManager.getString('settingsmealtimesview','snackuntil') }" editable="false" borderVisible="false"/>
			<s:Button id="snackuntilTime" width="40%" label="@{snackTime}"/>
		</s:Group>
	</s:Group>
</s:View>
