<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!--
view to add a new meal
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		creationComplete="onCreationComplete()"
		backKeyPressed="view1_backKeyPressedHandler(event)">
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformatter" dateTimePattern="{resourceManager.getString('general','datepattern')}" useUTC="false" locale="{Capabilities.language.substr(0,2)}"/>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="false"/>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("general")]
		[ResourceBundle("addmealview")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			
			import databaseclasses.Meal;
			
			import model.ModelLocator;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import myComponents.DatePicker;
			import myComponents.PickerEvent;
			import myComponents.TimePicker;
			
			import utilities.MyGATracker;
			import utilities.Synchronize;
			[Bindable]
			private var mealname_textarea_text:String;
			[Bindable]
			private var date_button_text:String;
			[Bindable]
			private var time_button_text:String;
			[Bindable]
			private var back_label:String;

			[Bindable]
			private var ok_button_text:String;
			private var dateOrTimePicker:Group;
			//private var datePicker:DatePicker;
			/**
			 * if false then user has clicked cancel or back button in some place, means meal not added
			 */
			private var mealAdded:Boolean = false;
			
			/**
			 * index of the newly added meal 
			 */
			private var newMealIndex:int;
			
			/**
			 * its the actual date off the meal
			 */
			private var _currentDateAndTime:Date;

			/**
			 * its the actual date off the meal
			 */
			private function get currentDateAndTime():Date

			{
				return _currentDateAndTime;
			}
			
			/**
			 * true if user edited the mealname 
			 */
			private var _userChangedMealName:Boolean;

			/**
			 * its the actual date off the meal
			 */
			private function set currentDateAndTime(value:Date):void

			{
				_currentDateAndTime = value;
				date_button_text = dateformatter.format(_currentDateAndTime);
				time_button_text = timeformatter.format(_currentDateAndTime);
				if (!_userChangedMealName)
					mealname_textarea_text = resourceManager.getString('addmealview','meal') ;
			}
			
			private function onCreationComplete():void {
				back_label = resourceManager.getString('general','back');
				currentDateAndTime = new Date();
				ok_button_text = resourceManager.getString('general','ok');
				_userChangedMealName : false;
				Synchronize.getInstance().startSynchronize(false,false);
			}
			
			private function dateClicked():void {
				dateOrTimePicker  = new DatePicker();
				(dateOrTimePicker as DatePicker).currentDate = currentDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}

			private function timeClicked():void {
				dateOrTimePicker = new TimePicker();
				(dateOrTimePicker as TimePicker).currentTime = currentDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function onTimeOrDateCancel(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
			}
			
			private function onTimeOrDateSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				//if ((event.newValue as Date).valueOf() > (new Date()).valueOf()) {//check if entered date is > currentdate
					currentDateAndTime = (event.newValue as Date);
				//}
			}

			private function okClicked():void {
				MyGATracker.getInstance().trackPageview( "AddMealView-newMealCreated" );

				var newMeal:Meal = new Meal(mealname_textarea_text,null,currentDateAndTime.valueOf());
				newMealIndex = ModelLocator.getInstance().addMeal(newMeal);
				mealAdded = true;
				navigator.popView();
			}
			
			/**
			 * if a meal is added then the reference to that meal is returned 
			 */
			override public function createReturnObject():Object {
				if (mealAdded) {
					return new Number(newMealIndex);
				}
				else return null;
			}
			
			protected function view1_backKeyPressedHandler(event:FlexEvent):void

			{
				if (dateOrTimePicker != null) {
					if (dateOrTimePicker.isPopUp)
					{
						PopUpManager.removePopUp(dateOrTimePicker);
						event.preventDefault();
					}
					dateOrTimePicker = null;
				}

			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/Done_48x48.png')" id="OkButton" click="okClicked()"/>
	</s:actionContent>

	<s:Group y="0" x="0" width="100%" height = "100%" >
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		
		<!-- the mealname -->
		<s:TextArea id="meal_name" contentBackgroundColor="0xDCDCDC" borderVisible="false" width="100%" text="@{mealname_textarea_text}" editable="true" change="{_userChangedMealName = true}" />
		
		<!-- the date -->
		<s:Button id="date_button" width="100%" label="{date_button_text}" click="dateClicked()" />
		
		<!-- the time -->
		<s:Button id="time_button" width="100%" label="{time_button_text}" click="timeClicked()" />
		
	</s:Group>

</s:View>
