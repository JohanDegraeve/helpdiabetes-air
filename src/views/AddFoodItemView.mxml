<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!--
Originally I have been using pure mxml for this, but later on I've put a lot of the field in a customized group named AddFoodItemGroup written in mxml
The reader will see here a lot of interaction between AddFoodItemGroup.as and AddFoodItemView.mxml, the split between the two is not very logic, its more historic.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		actionBarVisible="true" 
		preinitialize="preInit()"
		tabBarVisible="true"
		xmlns:myComponents="myComponents.*" xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="onCreationComplete()"
		add="addHandler()"
		remove="onRemove()"
		title=""
		initialize="init()"
		backKeyPressed="onBackKeyPressed(event)"
		>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformatter" dateTimePattern="{resourceManager.getString('general','shortdatepattern')}" useUTC="false" locale="{Capabilities.language.substr(0,2)}"/>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="false"/>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("addfooditemview")]
		[ResourceBundle("general")]
		[ResourceBundle("analytics")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import databaseclasses.Database;
			import databaseclasses.DatabaseEvent;
			import databaseclasses.FoodItem;
			import databaseclasses.Meal;
			import databaseclasses.MealEvent;
			import databaseclasses.SelectedFoodItem;
			import databaseclasses.Settings;
			import databaseclasses.Unit;
			import databaseclasses.UnitChangedEvent;
			
			import model.ModelLocator;
			
			import myComponents.DayLineWithTotalAmount;
			import myComponents.HelpCallOut;
			import myComponents.PickerEvent;
			import myComponents.RequestConfirmation;
			import myComponents.TrackingViewElement;
			import myComponents.elementFromListPicker;
			
			import utilities.MyGATracker;
			import utilities.Synchronize;
			
			[Bindable]
			private var description_textarea_text:String ;
			[Bindable]
			private var details_button_text:String ;
			[Bindable]
			private var amount_textinput_text:String;
			[Bindable]
			private var meal_textarea_text:String;
			private var _amount_textarea_text:String;					
			[Bindable]
			private var meal_button_text:String;
			[Bindable]
			private var back_label:String;
			
			[Bindable]
			private var meals:ArrayCollection;
			
			private var retrievedFoodItem:FoodItem;
			
			private var checkLastMealUpdateRequired:Boolean = true;
			
			private var confirmationPicker:RequestConfirmation;
			
			private var helpCallOut:HelpCallOut;
			
			/**
			 * the chosen unit from the list of units in retrievedFoodItem
			 */
			private var selectedUnit:int;
			
			private var DEFAULT_SIZE_OF_LONGEST_TEXT:int = 50;
			
			/**
			 * if addfooditemview was created via foodcounterview, then this field will contain the searchtext that was added in the datafield 
			 */
			private var searchText:String;
			
			/**
			 * used as context value when pushing the view SelectMealView<br>
			 * when addHandler is called, the value of the return object will be check, if equal to CHANGE_MEAL_DATE_AND_TIME then not allowed to call checkLastMealUpdate
			 */
			private static const SELECT_MEAL:int = 1; 
			
			/**
			 * should there be a button that allows the user to change the meal ? 
			 */
			[Bindable]
			private var mealButtonRequired:Boolean = true;
			
			private var aSelectUnit:elementFromListPicker;
			
			private var trackerId:String;
			
			private var backLabelClicked:Boolean = false;
			
			/**
			 * tells us if the mealtimeStamp used here is still having the default mealtime or no,<br>
			 * value only makes sense if mealevent = null,  
			 */
			private var defaultMealTimeSTamp:Boolean;

			private function init():void {
				trackerId = resourceManager.getString('analytics','trackeraccount');
			}
			
			private function onBackKeyPressed(event:Event):void {
				if (aSelectUnit != null) {
					if (aSelectUnit.isPopUp) {
						PopUpManager.removePopUp(aSelectUnit);
						event.preventDefault();
					}
					aSelectUnit = null;
				} 
				if (confirmationPicker != null) {
					if (confirmationPicker.isPopUp) {
						PopUpManager.removePopUp(confirmationPicker);
						event.preventDefault();
					}
				}
			}
			
			private function onCreationComplete():void {
				//this is to know hen selectedMeal Changed, in that case also the text shown in the meal button needs to change
				ModelLocator.getInstance().addEventListener(ModelLocator.SELECTEDMEAL_CHANGED,onSelectedMealChanged);
				ModelLocator.getInstance().addEventListener(ModelLocator.SELECTEDMEAL_INITIALIZED,onSelectedMealInitialized);
				
				if (data.searchtext)
					searchText = data.searchtext;
				else
					searchText = "";
				
				if (data.selectedFoodItem) {
					if (TrackingView.popToFirstViewNecessary()) {
						navigator.popToFirstView();
						return;
					}
					else {
						checkLastMealUpdateRequired = false;
						mealButtonRequired=false;
						meal_textarea_text = resourceManager.getString('addfooditemview','meal_text_if_there_is_no_button') + " : " + (ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).mealName;;
					}
				}
				
				//refresh the meals - checkLxstMealUpdateRequired is used here, if checkLastMealUpdateRequired is false, then probably the previous screen was SelectedMealView so there's
				//no need to call refreshMeals
				//comment added 20/07/2011 : variable checkLastMealUpdateRequired is not really having the correct meaning. Before I called here refreshMeals with checkLastMealUpdateRequired as parameter
				//  but that was not good.
				if (checkLastMealUpdateRequired)
					ModelLocator.getInstance().refreshMeals();
				
				if (data.foodItem) {
					//addfooditemview has been created via foodcounter view, so initial setup is necessary
					defaultMealTimeSTamp = true;
					TrashButton.visible = false;
					var dispatcher:EventDispatcher = new EventDispatcher();
					dispatcher.addEventListener(DatabaseEvent.RESULT_EVENT,unitListRetrieved);
					dispatcher.addEventListener(DatabaseEvent.ERROR_EVENT,unitListRetrievelError);
					Database.getInstance().getUnitList((data.foodItem) ,dispatcher);
					
					function unitListRetrieved (event:DatabaseEvent):void {
						dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT,unitListRetrieved);
						dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT,unitListRetrievelError);
						
						//retrieved fooditem does not have a valid itemid, meaning it can not be used to manage the database
						retrievedFoodItem = new FoodItem((data.foodItem).itemDescription,event.data as ArrayCollection,0);
						description_textarea_text = retrievedFoodItem.itemDescription;
						/* here the details text with the amounts of grams, fat, ... is created */
						//details_button_fontsize = description_textarea.getStyle("fontSize")*0.8;
						details_button_text = createDetailsButtonText(0,-1);
						//if (retrievedFoodItem.getUnit(0).standardAmount != 100) 
						amount_textinput_text = retrievedFoodItem.getUnit(0).standardAmount.toString();
						
						selectedUnit = 0; 
						
						//if amountfield = "0" then set it to empty string, this allows the user to immediately start typing an amount
						//do this again in popupunitlist 
						if (amount_textinput_text =="0")
							amount_textinput_text = "";
						
						
						if (retrievedFoodItem.getNumberOfUnits() > 1) {
							popUpUnitList(false);
						} else {
							showHelpText1();
						}
					}
					
					function unitListRetrievelError(event:DatabaseEvent):void {
						trace("error in addvoeoditemveiw.mxml, unitlistretrievalerror, event = " + event.target.toString());
						dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT,unitListRetrieved);
						dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT,unitListRetrievelError);
					}
					
				} else if (data.selectedFoodItem) {
					//addfooditemview created via tracking => click on mealevent => click on selectedfooditem
					defaultMealTimeSTamp = false;//should be false actually but anyway mealevent != null here so it will not be used
					retrievedFoodItem = new FoodItem((data.selectedFoodItem).itemDescription,new ArrayCollection([(data.selectedFoodItem).unit]),0);
					description_textarea_text = retrievedFoodItem.itemDescription;
					details_button_text = createDetailsButtonText(0,(data.selectedFoodItem).chosenAmount);
					amount_textinput_text = (data.selectedFoodItem).chosenAmount.toString();;
					selectedUnit = 0;
					
					//find back the mealevent to which this selectedfooditem belongs
					//then check if it belongs to a meal and if no don't show the trashbutton
					for (var cntr:int = ModelLocator.getInstance().trackingList.length - 1 ;cntr >= 0;cntr--) {
						if (ModelLocator.getInstance().trackingList.getItemAt(cntr) is MealEvent) {
							if ((ModelLocator.getInstance().trackingList.getItemAt(cntr) as MealEvent).eventid == (data.selectedFoodItem as SelectedFoodItem).mealEventId) {
								if ((ModelLocator.getInstance().trackingList.getItemAt(cntr) as MealEvent).meal == null)
									TrashButton.visible = false;
								else 
									TrashButton.visible = true;
								break;
							}
						}
					}
				} else if (data.ownFoodItem) {
					//addfooditemview created via ownitemview
					defaultMealTimeSTamp = true;
					retrievedFoodItem = data.ownFoodItem as FoodItem;
					description_textarea_text = retrievedFoodItem.itemDescription;
					details_button_text = createDetailsButtonText(0,-1);
					amount_textinput_text = retrievedFoodItem.getUnit(0).standardAmount.toString();
					selectedUnit = 0;
					TrashButton.visible = false;
				} else { 
					//addfooditem recreated after having pushed meal button and returning from selectmealview
					defaultMealTimeSTamp = false;
					retrievedFoodItem = (data.retrievedFoodItem as FoodItem);
					description_textarea_text = retrievedFoodItem.itemDescription;
					selectedUnit = data.selectedUnit;
					amount_textinput_text = data.amount_textinput_text;
					details_button_text = createDetailsButtonText(selectedUnit,(new Number(amount_textinput_text)) == 0 ? -1: new Number(amount_textinput_text));
					TrashButton.visible = false;
				}
				
				//here's the set the correct initial value for meal_button_text
				if (ModelLocator.getInstance().selectedMeal >= 0) {
					if (checkLastMealUpdateRequired)
						checkLastMealUpdate();
					meal_button_text = 	 initMealButtonText();				
				}
			}
			
			private function showHelpText1():void {
				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('addfooditemview','help_text_selectUnitButton');
				helpCallOut.settingId = Settings.SettingsHelpTextAddFoodItemViewSelectUnitButton;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext1Removed);
				helpCallOut.open(addFoodItemGroup.details_button,true)
			}
			
			private function helptext1Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext1Removed);
				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('addfooditemview','help_text_changeMeal');
				helpCallOut.settingId = Settings.SettingsHelpTextAddFoodItemViewSelectMealButton;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext2Removed);
				helpCallOut.open(addFoodItemGroup.meal_button,true);
			}
			
			private function helptext2Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext2Removed);
				helpCallOut = new HelpCallOut();
				if (data.foodItem) {
					helpCallOut.helpText = resourceManager.getString('addfooditemview','help_text_amount_comingFromFoodCounterView');
					helpCallOut.settingId = Settings.SettingsHelpTextAddFoodItemViewAmountButtonsWhenComingFromFoodCounterView;
				} else if (data.selectedFoodItem) {
					helpCallOut.helpText = resourceManager.getString('addfooditemview','help_text_amount_comingFromTrackingView');
					helpCallOut.settingId = Settings.SettingsHelpTextAddFoodItemViewAmountButtonsWhenComingFromTrackingView;
				} else
					helptext3Removed(null);
				
				if (data.foodItem || data.selectedFoodItem) {
					helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext3Removed);
					helpCallOut.open(addFoodItemGroup.button_5,true);
				}
			}
			
			private function helptext3Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext3Removed);
				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('addfooditemview','help_text_ok_button');
				helpCallOut.settingId = Settings.SettingsHelpTextAddFoodItemViewOkButton;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext4Removed);
				helpCallOut.open(OkButton,true);
			}
			
			private function helptext4Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext4Removed);
				if (TrashButton.visible) {
					helpCallOut = new HelpCallOut();
					helpCallOut.helpText = resourceManager.getString('addfooditemview','help_text_delete_button');
					helpCallOut.settingId = Settings.SettingsHelpTextAddFoodItemViewTrashButton;
					helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext5Removed);
					helpCallOut.open(TrashButton,true);
				} else
					helptext5Removed(null);
			}
			
			private function helptext5Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext5Removed);
			}
			
			private function onSelectedMealChanged(e:flash.events.Event):void {
				meal_button_text = 	 initMealButtonText();			}
			
			private function onSelectedMealInitialized(e:flash.events.Event):void {
				checkLastMealUpdate();
				meal_button_text = 	 initMealButtonText();
			}
			
			/**
			 * will check if last meal entry was less than x minutes ago, and if so, that meal will be shown again.
			 */
			private function checkLastMealUpdate(): void {
				//selected meal may have changed due to finishing database init for instance or refresh of the meallist , so we'll check here if we need to change the value
				
				//first remove the eventlistener
				ModelLocator.getInstance().removeEventListener(ModelLocator.SELECTEDMEAL_CHANGED,onSelectedMealChanged);
				
				//now check the time difference
				if (((new Date()).valueOf() - new Number(Settings.getInstance().getSetting(Settings.SettingTIME_OF_LAST_MEAL_ADDITION))) < 15*60*1000) {
					//it's less than 15 minutes since the last meal addition
					//..try to find the meal with corresponding mealeventid
					for (var l:int = 0;l < ModelLocator.getInstance().meals.length; l++) {
						if (ModelLocator.getInstance().meals.getItemAt(l) is Meal) {
							if ((ModelLocator.getInstance().meals.getItemAt(l) as Meal).hasMealEvent()) {
								if ((ModelLocator.getInstance().meals.getItemAt(l) as Meal).mealEvent.eventid == new Number(Settings.getInstance().getSetting(Settings.SettingLAST_MEAL_ID))) {
									ModelLocator.getInstance().selectedMeal = l;
									l = ModelLocator.getInstance().meals.length;
								}
							}
						}
					}
				} 
				ModelLocator.getInstance().addEventListener(ModelLocator.SELECTEDMEAL_CHANGED,onSelectedMealChanged);
			}
			
			private function preInit():void {
				meal_textarea_text = resourceManager.getString('addfooditemview','meal_button');
				back_label = resourceManager.getString('general','back');
				_amount_textarea_text = resourceManager.getString("addfooditemview","amount");
				amount_textinput_text = "0";
				//title = resourceManager.getString('addfooditemview','screen_title_add');
			}
			
			/**
			 * pop up for unitlist<br>
			 * if track then google analyticstracking to do
			 */ 
			private function popUpUnitList(track:Boolean=true,e:MouseEvent = null):void {
				if (track)
					MyGATracker.getInstance().trackPageview( "AddFoodItemView-unitSelectionButtonClicked" );
				
				var unitList:ArrayCollection = new ArrayCollection();
				unitList.addItem((retrievedFoodItem.getUnit(0) as Unit).unitDescription);
				for (var i:int = 1; i < retrievedFoodItem.getNumberOfUnits();i++)
					unitList.addItem((retrievedFoodItem.getUnit(i) as Unit).unitDescription);
				
				aSelectUnit = new elementFromListPicker();
				aSelectUnit.addEventListener(UnitChangedEvent.ITEM_SELECTED, selectedUnitChanged);
				aSelectUnit.elements = unitList;
				aSelectUnit.labelText1 = resourceManager.getString('addfooditemview','select_unit');
				
				
				PopUpManager.addPopUp(aSelectUnit,UIComponent(this.parentApplication),true);
				//PopUpManager.createPopUp(UIComponent(this.parentApplication),aSelectUnit,true);
				PopUpManager.centerPopUp(aSelectUnit);
				
			}
			
			private function selectedUnitChanged(event:UnitChangedEvent):void {
				aSelectUnit.removeEventListener(UnitChangedEvent.ITEM_SELECTED,selectedUnitChanged);
				PopUpManager.removePopUp(aSelectUnit);
				details_button_text = createDetailsButtonText(event.index,-1);
				selectedUnit = event.index;
				
				//if (retrievedFoodItem.getUnit(event.index).standardAmount != 100)
				amount_textinput_text = retrievedFoodItem.getUnit(event.index).standardAmount.toString();
				//else
				//set it to empty string, this allows the user to immediately start typing an amount
				//amount_textinput_text = "";
				showHelpText1();
			}

			private function initMealButtonText():String {
				var returnValue:String = " ";
				if ((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).mealEvent == null) {
					//mealevent is null, so we will check if the current time is later than the timestamp of the meal, ie the timestamp that normally meal would start if we would 
					//just take defalt starttimes
					//but only if defaultMealTimeStamp =  true; - if false it means we come from selectmealview, where another timestamp has been set by the user, we will not overwrite this
					if ((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp < (new Date()).valueOf() && defaultMealTimeSTamp) {
						returnValue = 
							timeformatter.format((new Date()).valueOf()) + " - "
							+ (ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).mealName;
					} else {
						returnValue = 
							(((new Date()).date == (new Date((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp)).date) ? 
								"" : dateformatter.format((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp) + " - ")
							+ timeformatter.format((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp) + " - "
							+ (ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).mealName;
					}
				} else {
					returnValue = 
						(((new Date()).date == (new Date((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp)).date) ? 
							"" : dateformatter.format((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp) + " - ")
						+ timeformatter.format((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp) + " - "
						+ (ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).mealName;
				}
				return returnValue;
			}
			
			/**
			 * will add a selectedFoodItem to the selected meal, called when addButton is clicked
			 */ 
			private function addButtonClicked(e:MouseEvent = null):void {
				MyGATracker.getInstance().trackPageview( "AddFoodItemView-AddButtonClicked" );
				
				navigator.popView();
				searchText = "";
				
				//first of all when amount = "", set it to 0
				if (amount_textinput_text =="")
					amount_textinput_text ="0";
				
				if (data.selectedFoodItem) {
					var mealEventId:Number = ((data.selectedFoodItem) as SelectedFoodItem).mealEventId;
					for (var trackingCntr:int = 0;trackingCntr < ModelLocator.getInstance().trackingList.length;trackingCntr++) {
						if (((ModelLocator.getInstance().trackingList.getItemAt(trackingCntr)) as TrackingViewElement).eventid == mealEventId) {
							(ModelLocator.getInstance().trackingList.getItemAt(trackingCntr) as MealEvent)
							.updateSelectedFoodItemChosenAmount(data.selectedFoodItem,new Number(amount_textinput_text));
							break;
						}
					}
					
				} else {
					//- get the selected meal (which may or may not already include a mealevent
					//- create a selectedfooditem and add it
					//but first change the timestamp
					if (((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp < (new Date()).valueOf() 
						&&
						defaultMealTimeSTamp)
						&&
						(ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).mealEvent == null
					) {
						(ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp = (new Date()).valueOf();
					}
					
					(ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal)
					.addSelectedFoodItem(
						new SelectedFoodItem(new Date().valueOf(),
							retrievedFoodItem.itemDescription,
							retrievedFoodItem.getUnit(selectedUnit),
							new Number(amount_textinput_text)));
					ModelLocator.getInstance().trackingEventToShow = 
						(ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).mealEvent.eventid;
				}
				var creationTimeStampAsDate:Date = new Date((ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).timeStamp);
				creationTimeStampAsDate.setHours(0,0,0,0);
				if (creationTimeStampAsDate.valueOf() > ModelLocator.getInstance().oldestDayLineStoredInTrackingList) {
					for (var i:Number = creationTimeStampAsDate.valueOf(); i >  (ModelLocator.getInstance().oldestDayLineStoredInTrackingList + 1); i = i - 86400000) {
						ModelLocator.getInstance().trackingList.addItem(new DayLineWithTotalAmount(i));
						if (ModelLocator.getInstance().youngestDayLineStoredInTrackingList == 5000000000000)
							i =  ModelLocator.getInstance().oldestDayLineStoredInTrackingList;//we don't need to do that 
					}
					ModelLocator.getInstance().trackingList.refresh();
					ModelLocator.getInstance().oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					if (ModelLocator.getInstance().youngestDayLineStoredInTrackingList == 5000000000000)
						ModelLocator.getInstance().youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
				}
				else
					if (creationTimeStampAsDate.valueOf() < ModelLocator.getInstance().youngestDayLineStoredInTrackingList) {
						for (var j:Number = creationTimeStampAsDate.valueOf(); j <  ModelLocator.getInstance().youngestDayLineStoredInTrackingList;j = j + 86400000) {
							ModelLocator.getInstance().trackingList.addItem(new DayLineWithTotalAmount(j));
							if (ModelLocator.getInstance().oldestDayLineStoredInTrackingList == 0)
								j = ModelLocator.getInstance().youngestDayLineStoredInTrackingList;
						}
						ModelLocator.getInstance().trackingList.refresh();
						ModelLocator.getInstance().youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
						if (ModelLocator.getInstance().oldestDayLineStoredInTrackingList == 0)
							ModelLocator.getInstance().oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					}
				Synchronize.getInstance().startSynchronize(true,false);
			}
			
			/**
			 * called when mealbutton clicked
			 */
			private function mealButtonClicked(e:MouseEvent = null):void {
				MyGATracker.getInstance().trackPageview( "AddFoodItemView-MealButtonClicked" );
				
				data = new Object();
				data.retrievedFoodItem = retrievedFoodItem;
				data.selectedUnit = selectedUnit;
				data.amount_textinput_text = amount_textinput_text;
				navigator.pushView(SelectMealView,null,{
					context:SELECT_MEAL
				});
			}
			
			private function onRemove():void {
				ModelLocator.getInstance().removeEventListener(ModelLocator.SELECTEDMEAL_CHANGED,onSelectedMealChanged);
				ModelLocator.getInstance().removeEventListener(ModelLocator.SELECTEDMEAL_INITIALIZED,onSelectedMealInitialized);
			}
			
			private function addHandler():void {
				if (navigator.poppedViewReturnedObject != null) {
					if (navigator.poppedViewReturnedObject.object.context == SELECT_MEAL) {
						checkLastMealUpdateRequired = false;
					}
				}
			}
			
			private function amountTextChanged():void {
				addFoodItemGroup.defaultAmountOverwritten = true;
				
				if (amount_textinput_text == "")
					amount_textinput_text = "0";
				
				var amountToAdd:Number = amount_textinput_text == "." ? new Number(0) : parseFloat(amount_textinput_text);
				var addDecimalPoint:Boolean = false;
				if (amount_textinput_text.substring(amount_textinput_text.length - 1,amount_textinput_text.length) == ".")
					addDecimalPoint = true;
				details_button_text = createDetailsButtonText(selectedUnit,amountToAdd, addDecimalPoint);
			}
			
			/**
			 * returns the searchtext, so foodcounterview can search again on the searchtext, may have been reset to empty string
			 */
			override public function createReturnObject():Object {
				if (navigator.context != null) {
					if (navigator.context.context != null)
						if (navigator.context.context == OwnItemView.ADD_FOOD_ITEM)
							if (backLabelClicked)
								return null;
							return navigator.context;//used in case addfooditemview created via ownitemview, then navigator.context will be not null and will be equal to ADD_FOOD_ITEM
				}
				var returnObject:Object = new Object();
				returnObject.searchText = searchText;
				return returnObject;
			}
			
			/**
			 * addDecimalPoint only to be added in specific case by function amountTextChanged
			 */
			private function createDetailsButtonText(index:int, chosenAmount:Number, addDecimalPoint:Boolean = false):String {
				var standardAmount:Number = retrievedFoodItem.getUnit(index).standardAmount;
				if (chosenAmount == -1)
					chosenAmount = standardAmount;
				return chosenAmount + (addDecimalPoint ? "." : "") + " " +
					retrievedFoodItem.getUnit(index).unitDescription + 
					" : " +
					(Math.round(retrievedFoodItem.getUnit(index).carbs/standardAmount*chosenAmount *10)/10) +
					" " +  
					resourceManager.getString("general","gram_of_carbs_short") + "";
			}
			
			private function deleteEvent(e:MouseEvent = null):void {//should only be called in case the trash button is available, meaning a selectedfooditem is being deleted from an existing meal
				MyGATracker.getInstance().trackPageview( "AddFoodItemView-deleteButtonClicked" );
				
				var localdispatcher:EventDispatcher;
				var length:int 
				
				//in case we it is the last selectedfooditem being deleted, then also the mealevent will be deleted
				//we need to make sure the previous tracking event is visible so we store the itemindex
				var trackinglistPointer:Number = ModelLocator.getInstance().trackingList.getItemIndex(
					(ModelLocator.getInstance().meals.getItemAt(ModelLocator.getInstance().selectedMeal) as Meal).mealEvent);
				
				confirmationPicker = new RequestConfirmation();
				confirmationPicker.labelText1 = resourceManager.getString('general','delete_event');
				confirmationPicker.addEventListener(PickerEvent.PICKER_SET, onYesClicked);
				confirmationPicker.addEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				
				PopUpManager.addPopUp(confirmationPicker, this, true);
				PopUpManager.centerPopUp(confirmationPicker);
				
				function onYesClicked(event: PickerEvent): void
				{
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
					
					localdispatcher = new EventDispatcher();
					localdispatcher.addEventListener(DatabaseEvent.RESULT_EVENT,selectedFoodItemDeleted);
					localdispatcher.addEventListener(DatabaseEvent.ERROR_EVENT,selectedFoodItemDeletionFailed);

					var mealEventId:Number = ((data.selectedFoodItem) as SelectedFoodItem).mealEventId;
					for (var trackingCntr:int = 0;trackingCntr < ModelLocator.getInstance().trackingList.length;trackingCntr++) {
						if (((ModelLocator.getInstance().trackingList.getItemAt(trackingCntr)) as TrackingViewElement).eventid == mealEventId) {
							length = (ModelLocator.getInstance().trackingList.getItemAt(trackingCntr) as MealEvent).selectedFoodItems.length;
							(ModelLocator.getInstance().trackingList.getItemAt(trackingCntr) as MealEvent)
							.meal
							.deleteSelectedFoodItem(data.selectedFoodItem,localdispatcher);
							break;
						}
					}
					navigator.popView();
				}
				
				function onNoClicked(event: PickerEvent): void
				{
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				}
				
				function selectedFoodItemDeleted(de:DatabaseEvent):void {
					localdispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT,selectedFoodItemDeleted);
					localdispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT,selectedFoodItemDeletionFailed);
					if (length == 1) {
						//it was the last selectedfooditem which was being deleted, so we need to pop also the view editmealeventview
						//but make sure the previous item is visible
						if (trackinglistPointer > 0)
							ModelLocator.getInstance().trackingEventToShow = 
								(ModelLocator.getInstance().trackingList.getItemAt(trackinglistPointer - 1) as TrackingViewElement).eventid;						
						
						navigator.popView();
					}
				}
				function selectedFoodItemDeletionFailed(de:DatabaseEvent):void {
					localdispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT,selectedFoodItemDeleted);
					localdispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT,selectedFoodItemDeletionFailed);
					trace("Error while deleting selectedfooditem in addfooditemview.mxml");
				}
			}
			
		]]>
	</fx:Script>
	
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="backLabelClicked = true;navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/Trash_48x48.png')" id="TrashButton" click="deleteEvent(event)"/>
		<s:Button icon="@Embed(source='../assets/Done_48x48.png')" id="OkButton" click="addButtonClicked()"/>
	</s:actionContent>
	
	<myComponents:AddFoodItemGroup id="addFoodItemGroup"
								   y="0" x="0" width="100%" height = "100%" 
								   description_textarea_text="{description_textarea_text}" 
								   details_button_text="@{details_button_text}"
								   amount_textarea_text="{_amount_textarea_text}"
								   meal_textarea_text="@{meal_textarea_text}"
								   amount_textinput_text="@{amount_textinput_text}"
								   meal_button_text="{meal_button_text}"
								   details_button_click_function="{popUpUnitList}"
								   meal_button_click_function="{mealButtonClicked}"
								   amountTextChangedFunction="{amountTextChanged}"
								   mealButtonRequired="{mealButtonRequired}"
								   >
	</myComponents:AddFoodItemGroup>
	
</s:View>
