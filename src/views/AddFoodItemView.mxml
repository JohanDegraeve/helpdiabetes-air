<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		actionBarVisible="true" 
		preinitialize="preInit()"
		tabBarVisible="true"
		title="AddFoodItemView" xmlns:myComponents="myComponents.*" xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="onCreationComplete()">
	<fx:Declarations>
		<!--  seperationerror="" makes sure there's no round border even when there's a separator error -->
		<mx:NumberValidator
			id="amountValidator"
			source="{amount_textinput}" 
			property="text" 
			allowNegative="false" 
			domain="real"
			thousandsSeparator="." 
			separationError="">
		</mx:NumberValidator>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("addfooditemview")]
		[ResourceBundle("general")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import databaseclasses.*;
			
			import model.ModelLocator;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.ValidationResultEvent;
			import mx.geom.RoundedRectangle;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceBundle;
			import mx.validators.ValidationResult;
			
			import objects.FoodItem;
			import objects.Unit;
			import objects.UnitChangedEvent;
			
			import spark.components.Label;
			
			[Bindable]
			private var description_textarea_text:String ;
			[Bindable]
			private var details_button_text:String ;
			[Bindable]
			private var amount_textinput_text:String;
			[Bindable]
			private var meal_textarea_text:String;
			[Bindable]
			private var amount_textarea_text:String;
			[Bindable]
			private var meal_button_text:String = "dummy_button";
			[Bindable]
			private var add_button_text:String;
			[Bindable]
			private var details_button_fontsize:int;
			
		
			private var thisObject:DisplayObject;
			
			private var retrievedFoodItem:FoodItem;

			private var selectedUnit:int;
			
			private var DEFAULT_SIZE_OF_LONGEST_TEXT:int = 50;
			
			//just a selectunit to measure the style and so 
			private static var aSelectUnit:SelectUnit;
			
			private var popUpForUnitList:SelectUnit;
			
			private function onCreationComplete():void {
				//initialize the add meal button
				//meal_button_text = ...
					Settings.SettingTIME_OF_LAST_MEAL_ADDITION;
			}
			
			private function preInit():void {
				meal_textarea_text = resourceManager.getString('addfooditemview','meal_button');
				add_button_text = resourceManager.getString("addfooditemview","add_button");
				amount_textarea_text = resourceManager.getString("addfooditemview","amount");
				amount_textinput_text = "0";
				thisObject = this;
				ModelLocator.getInstance().unitList = new ArrayCollection();
				ModelLocator.getInstance().unitList.addItem(new Unit("dummy value",0,0,0,0,0));
				aSelectUnit = new SelectUnit();
			}
			
			override public function set data(value:Object):void {
				super.data=value;
				var dispatcher:EventDispatcher = new EventDispatcher();
				dispatcher.addEventListener(DatabaseEvent.RESULT_EVENT,foodItemRetrieved);
				dispatcher.addEventListener(DatabaseEvent.ERROR_EVENT,foodItemRetrievalError);
				Database.getInstance().getFoodItem((ModelLocator.getInstance().foodItemList.getItemAt(value as int) as FoodItem).itemid,dispatcher);
				
				
				function foodItemRetrieved (event:DatabaseEvent):void {
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT,foodItemRetrieved);
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT,foodItemRetrievalError);
					
					
					retrievedFoodItem = event.data as FoodItem;
					description_textarea_text = retrievedFoodItem.getItemDescription();
					/* here the details text with the amounts of grams, fat, ... is created */
					//details_button_fontsize = description_textarea.getStyle("fontSize")*0.8;
					details_button_text = createDetailsButtonText(0,-1);
					if (retrievedFoodItem.getUnit(0).getStandardAmount() != 100)
						amount_textinput_text = retrievedFoodItem.getUnit(0).getStandardAmount().toString();
					selectedUnit = 0; 
					if (retrievedFoodItem.getNumberOfUnits() > 1) {
						popUpUnitList();
					}
				}
				
				function foodItemRetrievalError(event:ErrorEvent):void {
					dispatcher.removeEventListener(DatabaseEvent.RESULT_EVENT,foodItemRetrieved);
					dispatcher.removeEventListener(DatabaseEvent.ERROR_EVENT,foodItemRetrievalError);
				}
				
			}
			
			private function getSizeOfLongestTextInList(strings:ArrayCollection):Number {
				//calculate the length of the longest text, in pixels.
				var label:Label = new Label();
				var sizeOfLongestText:int = DEFAULT_SIZE_OF_LONGEST_TEXT;
				label.regenerateStyleCache(false);
				label.setStyle("fontSize",aSelectUnit.getStyle("fontSize")) ;
				label.setStyle("fontStyle",aSelectUnit.getStyle("fontStyle")) ;
				label.setStyle("fontWeight",aSelectUnit.getStyle("fontWeight"));
				label.setStyle("fontFamily",aSelectUnit.getStyle("fontFamily"));
				
				for (var i:int = 0;i < strings.length; i++) {
					var textLineMetricx:TextLineMetrics = label.measureText(strings.getItemAt(i).toString());
					if (textLineMetricx.width + ModelLocator.SIZE_OF_LONGEST_TEXT_OFFSET > sizeOfLongestText)
						sizeOfLongestText = textLineMetricx.width + ModelLocator.SIZE_OF_LONGEST_TEXT_OFFSET ;
				}
				return sizeOfLongestText;
			}
			
			/**
			 * pop up for unitlist
			 */ 
			private function popUpUnitList():void {
				ModelLocator.getInstance().unitList = new ArrayCollection();
				ModelLocator.getInstance().unitList .addItem((retrievedFoodItem.getUnit(0) as Unit).getDescription());
				for (var i:int = 1; i < retrievedFoodItem.getNumberOfUnits();i++)
					ModelLocator.getInstance().unitList.addItem((retrievedFoodItem.getUnit(i) as Unit).getDescription());
				
				ModelLocator.getInstance().width = getSizeOfLongestTextInList(ModelLocator.getInstance().unitList);
				popUpForUnitList = new SelectUnit();
				popUpForUnitList.addEventListener(UnitChangedEvent.ITEM_SELECTED, selectedUnitChanged);
				PopUpManager.addPopUp(popUpForUnitList,thisObject,true);
				var xtemp:int = (width - ModelLocator.getInstance().width)/2;
				if (xtemp < 0)
					xtemp = width;
				popUpForUnitList.x = xtemp;

				function selectedUnitChanged(event:UnitChangedEvent):void {
					PopUpManager.removePopUp(popUpForUnitList);
					details_button_text = createDetailsButtonText(event.index,-1);
					selectedUnit = event.index;
					if (retrievedFoodItem.getUnit(event.index).getStandardAmount() != 100)
						amount_textinput_text = retrievedFoodItem.getUnit(event.index).getStandardAmount().toString();
					else
						amount_textinput_text = "0";
				}
			}
			
			/**
			 * function to fill in the details_text_area_text for the specified unit and chosenAmount
			 * if chosenAmount = -1 then standardamount will be used
			 */ 
			private function createDetailsButtonText(index:int, chosenAmount:Number):String {
				var standardAmount:Number = retrievedFoodItem.getUnit(index).getStandardAmount();
				if (chosenAmount == -1)
					chosenAmount = standardAmount;
				return chosenAmount + " " +
					retrievedFoodItem.getUnit(index).getDescription() + " : " +
					(Math.round(retrievedFoodItem.getUnit(index).getCarbs()/standardAmount*chosenAmount *100)/100) + " " +  resourceManager.getString("general","gram_of_carbs_short") + ", " +
					(Math.round(retrievedFoodItem.getUnit(index).getFat()/standardAmount*chosenAmount *100)/100) + " " +  resourceManager.getString("general","gram_of_fat") + ", " +
					(Math.round(retrievedFoodItem.getUnit(index).getProtein()/standardAmount*chosenAmount  *100)/100)+ " " +  resourceManager.getString("general","gram_of_protein") + ", " +
					(Math.round(retrievedFoodItem.getUnit(index).getKcal()/standardAmount*chosenAmount *100)/100) + " " +  resourceManager.getString("general","kilocalories") + ".";
			}
			
			private function amountTextChanged():void {
				//first replace "," by ".", because flex doesn't seem to work correctly when using "," as decimal seperator
				var temp:String;
				temp = amount_textinput_text.split(",").join(".");
				//applying a trick here to get rid of too many ".", first replacing the first "." by "{", hoping the user will never type this character
				//then replacing all remaining "." by "", then rereplacing "{" by "."
				temp = temp.split(".",2).join("{");
				temp = temp.split(".").join("");
				amount_textinput_text = temp.split("{",2).join(".");

				
				var validationResultEvent:ValidationResultEvent = amountValidator.validate(null,true);
				if (validationResultEvent.results == null)
					details_button_text = createDetailsButtonText(selectedUnit,parseFloat(amount_textinput_text));
				else {
					for (var i:int = 0;i < validationResultEvent.results.length;i++) {
						if ((validationResultEvent.results[i] as ValidationResult).errorCode == "requiredField") {
							//amountfield is empty, just keep it empty and set detailsbuttontext with value = 0
							details_button_text = createDetailsButtonText(selectedUnit,0);
						}
						if ((validationResultEvent.results[i] as ValidationResult).errorCode == "separation") {
							//user is trying to add a seperation for "duizendtallen", ignore it, it seems to work anyway treating thousands seperator as decimal seperator
							details_button_text = createDetailsButtonText(selectedUnit,parseFloat(amount_textinput_text));
						}
					}
				}
			}
			
		]]>
	</fx:Script>

	
		<s:Group y="0" x="0" width="100%" height = "100%" >
			<s:layout>
				<s:VerticalLayout>
				</s:VerticalLayout>
			</s:layout>
			
			<!-- the food item description -->
			<s:TextArea id="description_textarea"  width="100%" text="{description_textarea_text}" editable="false" creationComplete="details_button_fontsize = description_textarea.getStyle('fontSize')*0.8;"/>
			
			<!-- where we mention the amount of carbs that is in the chosen amount. I don't remember why I have set the fontsize variable -->
			<s:Button id="details_button" width="100%" label="{details_button_text}" click="popUpUnitList()" fontSize="{details_button_fontsize}"/>
			
			<s:HGroup gap="6" width="100%">
				<!-- just the text "Amount:" -->
				<s:TextArea id="amount_textarea"   width="50%" editable="false" text="{amount_textarea_text}"/>
				<!-- where the user can enter the chosen amount -->
				<s:TextInput id="amount_textinput"  width="50%" editable="true" text="@{amount_textinput_text}" change="amountTextChanged()" />
			</s:HGroup>
			<s:HGroup gap="6" width="100%">
				<!-- just the text "Meal:" -->
				<s:TextArea id="meal_textarea"  width = "50%" editable="false" text="{meal_textarea_text}"/>
				<!-- the button to select another meal, and showing the currently selected meal -->
				<s:Button id="meal_button" width = "50%"  label="{meal_button_text}"/>
			</s:HGroup>
			<!-- the button the add the fooditem to the currently selected meal -->
			<s:HGroup  gap="6" width="100%" horizontalAlign="center">
				<s:Button id="add_button" label="{add_button_text}" enabled="true" />
			</s:HGroup>
		</s:Group>
	
</s:View>
 