<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!---
view to show ModelLocator.getInstance().meals in a list

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:myComponents="myComponents.*"
		title="SelectMealView"
		creationComplete="onCreationComplete()" 
		add="addHandler()" >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import databaseclasses.Meal;
			
			import model.ModelLocator;
			
			import mx.events.FlexEvent;
			
			import myComponents.IListElement;
			
			import spark.events.IndexChangeEvent;

			private function getItemRenderer(item:Object):ClassFactory {
				return (item as IListElement).listElementRendererFunction();
			}
			
			/**
			 * used as context value when pushing the view ChangeMealDateAndTimeView<br>
			 * when addHandler is called, the value of the return object will be check, if equal to CHANGE_MEAL_DATE_AND_TIME then view is popped
			 */
			private static const CHANGE_MEAL_DATE_AND_TIME:int = 1;
			
			private function onCreationComplete():void {
				meallist.ensureIndexIsVisible(meallist.dataProvider.length -1);
				meallist.ensureIndexIsVisible(ModelLocator.getInstance().selectedMeal);
				ModelLocator.getInstance().addEventListener(ModelLocator.SELECTEDMEAL_CHANGED,onSelectedMealChanged);
				ModelLocator.getInstance().addEventListener(ModelLocator.SELECTEDMEAL_INITIALIZED,onSelectedMealChanged);
				meallist.addEventListener(Event.CHANGE,mealselected);
			}
			
			private function mealselected(event:IndexChangeEvent):void {
				
				//should we not do that also when ui is closed via back key ?
				ModelLocator.getInstance().removeEventListener(ModelLocator.SELECTEDMEAL_CHANGED,onSelectedMealChanged);
				ModelLocator.getInstance().removeEventListener(ModelLocator.SELECTEDMEAL_INITIALIZED,onSelectedMealChanged);
				
				//if it's a future meal without mealevent, we'll ask to user to enter start date and time of the meal
				var theMeal:Meal = ModelLocator.getInstance().meals.getItemAt(event.newIndex) as Meal;
				if (theMeal.hasMealEvent() || (theMeal.timeStamp < (new Date()).valueOf())) {
					ModelLocator.getInstance().selectedMeal = event.newIndex;
					navigator.popView();
				} else {
					
					//saving event.newIndex in data, so that we still know it when return from changemealdateandtime
					data = new Object();
					data.tempSelection = event.newIndex;
					navigator.pushView(ChangeMealDateAndTimeView,{
						meal:theMeal
					},{
						context:CHANGE_MEAL_DATE_AND_TIME
					});
				}
			}
			
			private function onSelectedMealChanged(e:Event):void {
				meallist.ensureIndexIsVisible(meallist.dataProvider.length -1);
				meallist.ensureIndexIsVisible(ModelLocator.getInstance().selectedMeal);
			}
			
			/**
			 * will check if navigator.poppedViewReturnedObject is not null and if so, checks the value<br>
			 * if equal to CHANGE_MEAL_DATE_AND_TIME then view is popped.
			 */
			private function addHandler():void {
				if (navigator.poppedViewReturnedObject != null) {
					if (navigator.poppedViewReturnedObject.object.context == CHANGE_MEAL_DATE_AND_TIME) {
						ModelLocator.getInstance().selectedMeal = data.tempSelection;
						ModelLocator.getInstance().meals.refresh();
						navigator.popView();
					}
				}
			}
			
			/**
			 * will return navigator.context
			 */
			override public function createReturnObject():Object {
				return navigator.context;
			}
			

			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="Back" id="backButton" click="navigator.popView()"/>
	</s:navigationContent>
	<s:List id="meallist" left="0" right="0" top="0" bottom="0" width="100%"
			dataProvider="{ModelLocator.getInstance().meals}" 
			itemRendererFunction="getItemRenderer">
	</s:List>
</s:View>
