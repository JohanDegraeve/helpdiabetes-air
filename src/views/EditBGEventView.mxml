<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title=""
		backKeyPressed="onBackKeyPressed(event)"
		creationComplete="onCreationComplete()"
		initialize="onInitialize()">
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformatter" dateTimePattern="{resourceManager.getString('general','datepattern')}" useUTC="false" locale="{Capabilities.language.substr(0,2)}"/>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="false"/>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("editbgeventview")]
		[ResourceBundle("general")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import databaseclasses.BloodGlucoseEvent;
			import databaseclasses.Settings;
			
			import model.ModelLocator;
			
			import mx.managers.PopUpManager;
			
			import myComponents.AmountPicker;
			import myComponents.DatePicker;
			import myComponents.DayLineWithTotalAmount;
			import myComponents.PickerEvent;
			import myComponents.TimePicker;
			
			private var theBloodGlucoseEvent:BloodGlucoseEvent;
			private var dateOrTimePicker:Group;
			private var _eventDateAndTime:Date;
			private function get eventDateAndTime():Date
			{
				return _eventDateAndTime;
			}
			private function set eventDateAndTime(value:Date):void
			{
				_eventDateAndTime = value;
				dateText = dateformatter.format(_eventDateAndTime);
				timeText = timeformatter.format(_eventDateAndTime);
			}
			
			private var unit:String;
			
			private var amountPicker:AmountPicker;
			[Bindable]
			private var meteringResultText:String;
			[Bindable]
			private var dateText:String ;
			[Bindable]
			private var timeText:String;
			[Bindable]
			private var back_label:String;

			[Bindable]
			private var add_label:String;
			
			/**
			 * if true then this view is created for a new mealevent 
			 */
			private var newBloodGlucoseEvent:Boolean;
			

			[Bindable]
			private var meteringTexttext:String;
			
			private function onCreationComplete(): void {
				back_label = resourceManager.getString('general','back');
				if (data is BloodGlucoseEvent) {
					theBloodGlucoseEvent = data as BloodGlucoseEvent;
					eventDateAndTime = new Date(theBloodGlucoseEvent.timeStamp);
					dateText = dateformatter.format(_eventDateAndTime);
					timeText = timeformatter.format(_eventDateAndTime);
					unit = theBloodGlucoseEvent.unit;
					meteringTexttext = resourceManager.getString('editbgeventview','value') + ' (' + unit + ')';
					meteringResultText = (new Number(theBloodGlucoseEvent.bloodGlucoseLevel)).toString();
					add_label = resourceManager.getString('addfooditemview','save_button');
					newBloodGlucoseEvent = false;
				}
			}
			
			private function meteringResultClicked(e:MouseEvent = null):void {
				amountPicker = new AmountPicker();
				amountPicker.amount = meteringResult.label;
				amountPicker.decimalDigits = 0;
				amountPicker.maxNonDecimalDigits = 3;
				amountPicker.addEventListener(PickerEvent.PICKER_SET, onAmountSet);
				amountPicker.addEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				amountPicker.labelText1 = meteringText.text;
				PopUpManager.addPopUp(amountPicker, this, true);
				PopUpManager.centerPopUp(amountPicker);
				
				function onAmountCancel(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				}
				function onAmountSet(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
					meteringResultText = (event.newValue as Number).toString();
				}
				
			}
			
			private function onBackKeyPressed(event:Event):void {
				if (amountPicker != null) {
					if (amountPicker.isPopUp) {
						PopUpManager.removePopUp(amountPicker);
						event.preventDefault();
					}
					amountPicker = null;
				} 
				if (dateOrTimePicker != null) {
					if (dateOrTimePicker.isPopUp) {
						PopUpManager.removePopUp(dateOrTimePicker);
						event.preventDefault();
					}
					dateOrTimePicker = null;
				} 
			}
			
			private function datumClicked(e:MouseEvent = null):void {
				dateOrTimePicker  = new DatePicker();
				(dateOrTimePicker as DatePicker).currentDate = eventDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function onInitialize():void {
				//setting initial values, will be overwritten in oncreationcomplete if data is an medicinevent
				eventDateAndTime = new Date();
				dateText = dateformatter.format(_eventDateAndTime);
				timeText = timeformatter.format(_eventDateAndTime);
				unit =  resourceManager.getString('general',Settings.getInstance().getSetting(Settings.SettingsBLOODGLUCOSE_UNIT));
				meteringTexttext = resourceManager.getString('editbgeventview','value') + ' (' +unit  + ')';
				meteringResultText = "100";
				add_label = resourceManager.getString('addfooditemview','add_button');
				newBloodGlucoseEvent = true;
				back_label = resourceManager.getString('general','back');
			}
			
			private function onTimeOrDateCancel(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
			}
			
			private function onTimeOrDateSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				eventDateAndTime = (event.newValue as Date);
			}
			
			private function timeClicked(e:MouseEvent = null):void {
				dateOrTimePicker = new TimePicker();
				(dateOrTimePicker as TimePicker).currentTime = eventDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function okClicked(e:MouseEvent = null):void {
				if (newBloodGlucoseEvent) {
					theBloodGlucoseEvent = new BloodGlucoseEvent(
						new Number(meteringResultText),
						unit,
						eventDateAndTime.valueOf());
					ModelLocator.getInstance().trackingList.addItem(theBloodGlucoseEvent);
				} else {
					theBloodGlucoseEvent.updateBloodGlucoseEvent(unit,new Number(meteringResultText), eventDateAndTime.valueOf());
				}
				
				var creationTimeStampAsDate:Date = new Date(theBloodGlucoseEvent.timeStamp);
				creationTimeStampAsDate.setHours(0,0,0,0);
				if (creationTimeStampAsDate.valueOf() > ModelLocator.getInstance().oldestDayLineStoredInTrackingList) {
					for (var i:Number = creationTimeStampAsDate.valueOf(); i >  (ModelLocator.getInstance().oldestDayLineStoredInTrackingList + 1); i = i - 86400000) {
						ModelLocator.getInstance().trackingList.addItem(new DayLineWithTotalAmount(i));
						if (ModelLocator.getInstance().youngestDayLineStoredInTrackingList == 5000000000000)
							i =  ModelLocator.getInstance().oldestDayLineStoredInTrackingList;//we don't need to do that 
					}
					ModelLocator.getInstance().trackingList.refresh();
					ModelLocator.getInstance().oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					if (ModelLocator.getInstance().youngestDayLineStoredInTrackingList == 5000000000000)
						ModelLocator.getInstance().youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
				}
				else
					if (creationTimeStampAsDate.valueOf() < ModelLocator.getInstance().youngestDayLineStoredInTrackingList) {
						for (var j:Number = creationTimeStampAsDate.valueOf(); j <  ModelLocator.getInstance().youngestDayLineStoredInTrackingList;j = j + 86400000) {
							ModelLocator.getInstance().trackingList.addItem(new DayLineWithTotalAmount(j));
							if (ModelLocator.getInstance().oldestDayLineStoredInTrackingList == 0)
								j = ModelLocator.getInstance().youngestDayLineStoredInTrackingList;
						}
						ModelLocator.getInstance().trackingList.refresh();
						ModelLocator.getInstance().youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
						if (ModelLocator.getInstance().oldestDayLineStoredInTrackingList == 0)
							ModelLocator.getInstance().oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					}
				
				ModelLocator.getInstance().trackingList.refresh();
				navigator.popView();
			}
			
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()"/>
	</s:navigationContent>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:entries>
					<s:GradientEntry color="{styleManager.getStyleDeclaration('.backGroundColorInLists').getStyle('bloodGlucoseEventBackGroundDark')}" ratio="0" alpha="1"/>
					<s:GradientEntry color="{styleManager.getStyleDeclaration('.backGroundColorInLists').getStyle('bloodGlucoseEventBackGroundLight')}" ratio="1" alpha="1"/>
				</s:entries>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>		
	<s:Group y="0" x="0" width="100%" height = "100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:TextArea y="0" x="0" width="100%" height="100%" maxHeight="75" text="{resourceManager.getString('editbgeventview','addbgevent')}" borderVisible="false" editable="false"/>
		<s:Group id="meteringResultGroup" y="0" x="0" width="100%" height="100%" maxHeight="50" click="meteringResultClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea  id="meteringText" width="60%" text="{meteringTexttext}" editable="false" borderVisible="false"/>
			<s:Button id="meteringResult" width="40%" label="@{meteringResultText}"  />
		</s:Group>
		<s:Group id="datumGroup" y="0" x="0" width="100%" height="100%" maxHeight="50" click="datumClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea  id="datumtext"  width="25%" text="{resourceManager.getString('general','date')}" editable="false" borderVisible="false"/>
			<s:Button id="datum" width="75%" label="@{dateText}" />
		</s:Group>
		<s:Group id="timeGroup" y="0" x="0" width="100%" height="100%" maxHeight="50" click="timeClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea  id="timetext"  width="25%" text="{resourceManager.getString('general','time')}" editable="false" borderVisible="false"/>
			<s:Button id="time" width="75%" label="@{timeText}" />
		</s:Group>
		<s:Group id="okGroup" y="0" x="0" width="100%" height="100%" maxHeight="50" click="okClicked(event)">
			<s:Button  id="okButton"   width="100%" label="{add_label}" />
		</s:Group>
	</s:Group>
</s:View>
