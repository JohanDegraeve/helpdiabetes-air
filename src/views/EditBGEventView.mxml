<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title=""
		backKeyPressed="onBackKeyPressed(event)"  
		creationComplete="onCreationComplete()"
		actionBarVisible="true"
		initialize="onInitialize()">
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformatter" dateTimePattern="{resourceManager.getString('general','datepattern')}" useUTC="false" locale="{Capabilities.language.substr(0,2)}"/>
		<s:DateTimeFormatter id ="timeformatter" dateTimePattern="{resourceManager.getString('general','timepattern')}" useUTC="false"/>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("editbgeventview")]
		[ResourceBundle("general")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.google.analytics.AnalyticsTracker;
			
			import databaseclasses.BloodGlucoseEvent;
			import databaseclasses.Settings;
			
			import model.ModelLocator;
			
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			import myComponents.AmountPicker;
			import myComponents.DatePicker;
			import myComponents.DayLineWithTotalAmount;
			import myComponents.HelpCallOut;
			import myComponents.PickerEvent;
			import myComponents.RequestConfirmation;
			import myComponents.TimePicker;
			import myComponents.TrackingViewElement;
			
			import spark.components.TabbedViewNavigator;
			import spark.components.ViewNavigator;
			
			import utilities.MyGATracker;
			import utilities.Synchronize;
			
			private var confirmationPicker:RequestConfirmation;
			private var theBloodGlucoseEvent:BloodGlucoseEvent;
			private var dateOrTimePicker:Group;
			private var _eventDateAndTime:Date;
			private function get eventDateAndTime():Date
			{
				return _eventDateAndTime;
			}
			private function set eventDateAndTime(value:Date):void
			{
				_eventDateAndTime = value;
				dateText = dateformatter.format(_eventDateAndTime);
				timeText = timeformatter.format(_eventDateAndTime);
			}
			
			private var unit:String;
			
			private var amountPicker:AmountPicker;
			[Bindable]
			private var meteringResultText:String;
			[Bindable]
			private var dateText:String ;
			[Bindable]
			private var timeText:String;
			[Bindable]
			private var back_label:String;
			
			/**
			 * if true then this view is created for a new mealevent 
			 */
			private var newBloodGlucoseEvent:Boolean;
			
			
			[Bindable]
			private var meteringTexttext:String;

			public var tracker:AnalyticsTracker;
			private var trackerId:String;

			private var thisView:View;
			
			private var helpCallOut:HelpCallOut;

			private function onCreationComplete(): void {
				back_label = resourceManager.getString('general','back');
				if (data is BloodGlucoseEvent) {//coming from trackingview
					if (TrackingView.popToFirstViewNecessary())
						navigator.popToFirstView();
					else {
						theBloodGlucoseEvent = data as BloodGlucoseEvent;
						eventDateAndTime = new Date(theBloodGlucoseEvent.timeStamp);
						dateText = dateformatter.format(_eventDateAndTime);
						timeText = timeformatter.format(_eventDateAndTime);
						unit = theBloodGlucoseEvent.unit;
						meteringTexttext = resourceManager.getString('editbgeventview','value') + ' (' + unit + ')';
						meteringResultText = (new Number(theBloodGlucoseEvent.bloodGlucoseLevel)).toString();
						newBloodGlucoseEvent = false;
						backButton.visible=true;
						TrashButton.visible = true;
					}
				} else  {
					helpCallOut = new HelpCallOut();
					helpCallOut.helpText = resourceManager.getString('editbgeventview','help_text_OkButton');
					helpCallOut.settingId = Settings.SettingsHelpTextEditBGEventViewOkButton;
					helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext0Removed);
					helpCallOut.open(OkButton,true)
				}
			}
			
			private function helptext0Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext0Removed);
				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('editbgeventview','help_text_selectChangeBGAmount');
				helpCallOut.settingId = Settings.SettingsHelpTextEditBGEventViewChangeAmount;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext1Removed);
				helpCallOut.open(meteringResult,true);
			}
			
			private function helptext1Removed(event:Event):void {
				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('editbgeventview','help_text_changeDateAndTime');
				helpCallOut.settingId = Settings.SettingsHelpTextEditBGEventViewChangeDateAndTime;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext2Removed);
				helpCallOut.open(timeGroup,true)
			}
			
			private function helptext2Removed(event:Event):void {
				
			}
			
			private function meteringResultClicked(e:MouseEvent = null):void {
				amountPicker = new AmountPicker();
				amountPicker.amount = meteringResult.label;
				if (Settings.getInstance().getSetting(Settings.SettingsBLOODGLUCOSE_UNIT) == "mmoll") {
					amountPicker.decimalDigits = 1;
					amountPicker.maxNonDecimalDigits = 2;
				} else {
					amountPicker.decimalDigits = 0;
					amountPicker.maxNonDecimalDigits = 3;
				}
				amountPicker.addEventListener(PickerEvent.PICKER_SET, onAmountSet);
				amountPicker.addEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				amountPicker.labelText1 = meteringText.text;
				PopUpManager.addPopUp(amountPicker, this, true);
				PopUpManager.centerPopUp(amountPicker);
				
				function onAmountCancel(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				}
				function onAmountSet(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
					meteringResultText = (event.newValue as Number).toString();
				}
				
			}
			
			private function onBackKeyPressed(event:Event):void {
				if (amountPicker != null) {
					if (amountPicker.isPopUp) {
						PopUpManager.removePopUp(amountPicker);
						event.preventDefault();
					}
					amountPicker = null;
				} 
				if (dateOrTimePicker != null) {
					if (dateOrTimePicker.isPopUp) {
						PopUpManager.removePopUp(dateOrTimePicker);
						event.preventDefault();
					}
					dateOrTimePicker = null;
				} 
				if (confirmationPicker != null) {
					if (confirmationPicker.isPopUp) {
						PopUpManager.removePopUp(confirmationPicker);
						event.preventDefault();
					}
				}
			}
			
			private function datumClicked(e:MouseEvent = null):void {
				dateOrTimePicker  = new DatePicker();
				(dateOrTimePicker as DatePicker).currentDate = eventDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function onInitialize():void {
				trackerId = resourceManager.getString('analytics','trackeraccount');

				//setting initial values, will be overwritten in oncreationcomplete if data is an medicinevent
				eventDateAndTime = new Date();
				dateText = dateformatter.format(_eventDateAndTime);
				timeText = timeformatter.format(_eventDateAndTime);
				unit =  resourceManager.getString('general',Settings.getInstance().getSetting(Settings.SettingsBLOODGLUCOSE_UNIT));
				meteringTexttext = resourceManager.getString('editbgeventview','value') + ' (' +unit  + ')';
				meteringResultText = 
					(Settings.getInstance().getSetting(Settings.SettingsBLOODGLUCOSE_UNIT) == "mgperdl" ? "100" : "5");
				newBloodGlucoseEvent = true;
				back_label = resourceManager.getString('general','back');
				TrashButton.visible = false;
				thisView=this;
			}
			
			private function onTimeOrDateCancel(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
			}
			
			private function onTimeOrDateSet(event: PickerEvent): void
			{
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				eventDateAndTime = (event.newValue as Date);
			}
			
			private function timeClicked(e:MouseEvent = null):void {
				dateOrTimePicker = new TimePicker();
				(dateOrTimePicker as TimePicker).currentTime = eventDateAndTime;
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_SET, onTimeOrDateSet);
				dateOrTimePicker.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				PopUpManager.addPopUp(dateOrTimePicker, this, true);
				PopUpManager.centerPopUp(dateOrTimePicker);
			}
			
			private function okClicked(e:MouseEvent = null):void {
				if (tracker == null) {
					tracker = new MyGATracker( this, trackerId, "AS3", false );
				}
				tracker.trackPageview( "EditBGEventView-OkClicked" );

				if (newBloodGlucoseEvent) {
					theBloodGlucoseEvent = new BloodGlucoseEvent(
						new Number(meteringResultText),
						unit,
						new Date().valueOf(),
						eventDateAndTime.valueOf());
					ModelLocator.getInstance().trackingList.addItem(theBloodGlucoseEvent);
				} else {
					theBloodGlucoseEvent.updateBloodGlucoseEvent(unit,new Number(meteringResultText), eventDateAndTime.valueOf(),new Date().valueOf());
				}
				
				var creationTimeStampAsDate:Date = new Date(theBloodGlucoseEvent.timeStamp);
				creationTimeStampAsDate.setHours(0,0,0,0);
				if (creationTimeStampAsDate.valueOf() > ModelLocator.getInstance().oldestDayLineStoredInTrackingList) {
					for (var i:Number = creationTimeStampAsDate.valueOf(); i >  (ModelLocator.getInstance().oldestDayLineStoredInTrackingList + 1); i = i - 86400000) {
						ModelLocator.getInstance().trackingList.addItem(new DayLineWithTotalAmount(i));
						if (ModelLocator.getInstance().youngestDayLineStoredInTrackingList == 5000000000000)
							i =  ModelLocator.getInstance().oldestDayLineStoredInTrackingList;//we don't need to do that 
					}
					ModelLocator.getInstance().trackingList.refresh();
					ModelLocator.getInstance().oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					if (ModelLocator.getInstance().youngestDayLineStoredInTrackingList == 5000000000000)
						ModelLocator.getInstance().youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
				}
				else
					if (creationTimeStampAsDate.valueOf() < ModelLocator.getInstance().youngestDayLineStoredInTrackingList) {
						for (var j:Number = creationTimeStampAsDate.valueOf(); j <  ModelLocator.getInstance().youngestDayLineStoredInTrackingList;j = j + 86400000) {
							ModelLocator.getInstance().trackingList.addItem(new DayLineWithTotalAmount(j));
							if (ModelLocator.getInstance().oldestDayLineStoredInTrackingList == 0)
								j = ModelLocator.getInstance().youngestDayLineStoredInTrackingList;
						}
						ModelLocator.getInstance().trackingList.refresh();
						ModelLocator.getInstance().youngestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
						if (ModelLocator.getInstance().oldestDayLineStoredInTrackingList == 0)
							ModelLocator.getInstance().oldestDayLineStoredInTrackingList = creationTimeStampAsDate.valueOf();
					}
				
				ModelLocator.getInstance().trackingList.refresh();
				//switch to the tracking view and set trackingeventtoshow to this event
				ModelLocator.getInstance().trackingEventToShow = theBloodGlucoseEvent.eventid;
				(navigator.parentNavigator as TabbedViewNavigator).selectedIndex = 1;
				((navigator.parentNavigator as TabbedViewNavigator).navigators[1] as ViewNavigator).popToFirstView();
				Synchronize.getInstance().startSynchronize(tracker,true);
			}
			
			private function deleteEvent(e:MouseEvent = null):void {
				confirmationPicker = new RequestConfirmation();
				confirmationPicker.labelText1 = resourceManager.getString('general','delete_event');
				confirmationPicker.addEventListener(PickerEvent.PICKER_SET, onYesClicked);
				confirmationPicker.addEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				
				PopUpManager.addPopUp(confirmationPicker, this, true);
				PopUpManager.centerPopUp(confirmationPicker);
				
				function onYesClicked(event: PickerEvent): void
				{
					if (tracker == null) {
						tracker = new MyGATracker( thisView, trackerId, "AS3", false );
					}
					tracker.trackPageview( "EditBGEventView-deleteClicked" );

					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
					Synchronize.getInstance().addObjectToBeDeleted(theBloodGlucoseEvent);
					Synchronize.getInstance().startSynchronize(tracker,true);
					theBloodGlucoseEvent.deleteEvent();
					//we need to make sure the previous tracking event is visible so we store the itemindex
					var trackinglistPointer:Number = ModelLocator.getInstance().trackingList.getItemIndex(theBloodGlucoseEvent);
					//now delete it
					ModelLocator.getInstance().trackingList.removeItemAt(trackinglistPointer);
					//and now make sure the previous item is visible
					if (trackinglistPointer > 0)
						ModelLocator.getInstance().trackingEventToShow = 
							(ModelLocator.getInstance().trackingList.getItemAt(trackinglistPointer - 1) as TrackingViewElement).eventid;						
					//switch to the tracking view
					(navigator.parentNavigator as TabbedViewNavigator).selectedIndex = 1;
					((navigator.parentNavigator as TabbedViewNavigator).navigators[1] as ViewNavigator).popToFirstView();
				}
				
				function onNoClicked(event: PickerEvent): void
				{
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				}
			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button  visible="false" label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/Trash_48x48.png')" id="TrashButton" click="deleteEvent(event)"/>
		<s:Button icon="@Embed(source='../assets/Done_48x48.png')" id="OkButton" click="okClicked(event)"/>
	</s:actionContent>
	
	<s:Group y="0" x="0" width="100%" height = "100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:Label y="0" x="0" width="100%" height="100%" maxHeight="75" text="{resourceManager.getString('editbgeventview','addbgevent')}"  textAlign="center" verticalAlign="middle"/>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="meteringResultGroup" y="0" x="0" width="100%" click="meteringResultClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="meteringText" height="47" width="60%" text="{meteringTexttext}" verticalAlign="middle"/>
			<s:Button id="meteringResult" height="47" width="40%" label="@{meteringResultText}"  />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="datumGroup" y="0" x="0" width="100%" click="datumClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="datumtext" height="47"  width="30%" text="{resourceManager.getString('general','date')}" verticalAlign="middle"/>
			<s:Button id="datum" height="47"  width="70%" label="@{dateText}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="timeGroup" y="0" x="0" width="100%" click="timeClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="timetext" height="47"  width="30%" text="{resourceManager.getString('general','time')}" verticalAlign="middle"/>
			<s:Button id="time" height="47" width="70%" label="@{timeText}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
	</s:Group>
</s:View>
