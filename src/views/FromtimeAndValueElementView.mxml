<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		creationComplete="view1_creationCompleteHandler(event)"
		initialize="view1_initializeHandler(event)"
		xmlns:s="library://ns.adobe.com/flex/spark">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("fromtimeandvalueelementview")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.View;
			
			import myComponents.AmountPicker;
			import myComponents.PickerEvent;
			import myComponents.RequestConfirmation;
			import myComponents.TimePicker36Hour;
			
			import utilities.FromtimeAndValue;
			import utilities.FromtimeAndValueArrayCollection;
			
			private var timePicker36Hour:TimePicker36Hour;
			
			[Bindable]
			private var back_label:String;

			[Bindable]
			/**
			 * topText shown on top of the view.
			 */private var topText:String;
			
			[Bindable]
			/**
			 * the value in text format
			 */private var value:String;
			
			[Bindable]
			/**
			 * topText shown on top of the view.
			 */private var timeText:String;
			
			/**
			 * the list of elements off course
			 */private var listOfElements:FromtimeAndValueArrayCollection;
			
			private var newFromtimeAndValue:FromtimeAndValue;//if stays null then nothing's changed
			private var confirmationPicker:RequestConfirmation;
			private var thisView:View;

			
			/**
			 * the selected index
			 */private var selectedIndex:int;
			
			private var amountPicker:AmountPicker;

			/**
			 * expects in data :<br>
			 * data.title (optional), used as view title<br>
			 * data.topText (optional), explanatory text in the top of view<br>
			 * data.listOfElements (mandatory), list of existing elements, required in order to check the entered values
			 * data.selectedIndex (optional), if present, then this is about modifying an existing element, selectedIndex points to that element. If not present, then it's about creating a new element.
			 * 
			 */protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				back_label = resourceManager.getString('general','back');
				valueGroupLabelIdforValue.text = resourceManager.getString('fromtimeandvalueelementview','value');
				fromGroupLabelId.text = resourceManager.getString('fromtimeandvalueelementview','from');
				if (data.title)
					title = data.title;
				if (data.topText)
					topTextLabelId.text = data.topText;
				listOfElements = data.listOfElements;
				
				if (data.selectedIndex != null) {
					var fromtimeAndValue:FromtimeAndValue;
					selectedIndex = data.selectedIndex;
					fromtimeAndValue = listOfElements.getItemAt(selectedIndex) as FromtimeAndValue;
					timeText = fromtimeAndValue.fromAsString();
					value = fromtimeAndValue.value.toString();
					valueGroupLabelIdforUnit.text = fromtimeAndValue.unit;
				}
			}
			
			private function fromGroupClicked(event:Event):void {
				timePicker36Hour = new TimePicker36Hour();
				timePicker36Hour.currentTime = 
					new Date(((new Number(timeText.split(":")[0])) * 60 + (new Number(timeText.split(":")[1])))*60*1000);//in ms
				timePicker36Hour.addEventListener(PickerEvent.PICKER_SET, onTimeSet);
				timePicker36Hour.addEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				
				if (selectedIndex > 0) {
					timePicker36Hour.minTime = new Date((listOfElements.getItemAt(selectedIndex - 1) as FromtimeAndValue).from * 1000 + 1 * 60 * 1000);

					if (selectedIndex < listOfElements.length - 1) {
						timePicker36Hour.maxTime = new Date((listOfElements.getItemAt(selectedIndex + 1) as FromtimeAndValue).from * 1000 - 1 * 60 * 1000);
					} else if ((listOfElements.getItemAt(selectedIndex) as FromtimeAndValue).unit == "%") {
						//we should not come here because the last element, if percentage, should not be editable, anyway let's handle it
						timePicker36Hour.maxTime = new Date(36 * 3600 * 1000 - 1 * 60 * 1000);
					} else 
						timePicker36Hour.maxTime = new Date(24 * 3600 * 1000 - 1 * 60 * 1000);
				} else {
					//first element should not have a configurable time
					timePicker36Hour.minTime = new Date((listOfElements.getItemAt(selectedIndex) as FromtimeAndValue).from * 1000 );
					timePicker36Hour.maxTime = new Date((listOfElements.getItemAt(selectedIndex) as FromtimeAndValue).from * 1000 );
				}				
				
				PopUpManager.addPopUp(timePicker36Hour, this, true);
				PopUpManager.centerPopUp(timePicker36Hour);
			}
			
			private function onTimeOrDateCancel(event: PickerEvent): void
			{
				timePicker36Hour.removeEventListener(PickerEvent.PICKER_SET, onTimeSet);
				timePicker36Hour.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
			}
			
			private function onTimeSet(event:PickerEvent):void {
				timePicker36Hour.removeEventListener(PickerEvent.PICKER_SET, onTimeSet);
				timePicker36Hour.removeEventListener(PickerEvent.PICKER_CANCEL, onTimeOrDateCancel);
				var hours:String = (new Number((event.newValue as Date).hoursUTC) + (new Number((event.newValue as Date).dateUTC - 1))*24).toString();
				var minutes:String = new Number((event.newValue as Date).minutesUTC).toString();
				
				if (timeText == (hours.length == 1 ? "0" + hours:hours) + ":" + (minutes.length == 1 ? "0" + minutes:minutes))
					return;
				
				timeText = (hours.length == 1 ? "0" + hours:hours) + ":" + (minutes.length == 1 ? "0" + minutes:minutes);
				
				if (newFromtimeAndValue == null)
					newFromtimeAndValue = (listOfElements.getItemAt(selectedIndex) as FromtimeAndValue);
				newFromtimeAndValue = 
					new FromtimeAndValue(timeText,newFromtimeAndValue.value,newFromtimeAndValue.unit,newFromtimeAndValue.editable,newFromtimeAndValue.deletable);
			}

			private function valueGroupClicked(event:Event):void {
				var newAmount:Number;
				amountPicker = new AmountPicker();
				amountPicker.amount = value;
				if ((listOfElements.getItemAt(selectedIndex) as FromtimeAndValue).unit == "%") {
					if (selectedIndex > 0) {
						amountPicker.maximumAmount = (listOfElements.getItemAt(selectedIndex - 1) as FromtimeAndValue).value;
					} else {
						if (selectedIndex < listOfElements.length - 1) {
							amountPicker.minimumAmount = (listOfElements.getItemAt(selectedIndex + 1) as FromtimeAndValue).value;
						} else {
							amountPicker.maximumAmount = 100;
							amountPicker.minimumAmount = 100;
						}
					}
				}
				
				if (valueGroupLabelIdforUnit.text == resourceManager.getString('general','mmoll')) {
					amountPicker.decimalDigits = 1;
					amountPicker.maxNonDecimalDigits = 2;
				} else {
					amountPicker.decimalDigits = 0;
					amountPicker.maxNonDecimalDigits = 3;
				}
				amountPicker.addEventListener(PickerEvent.PICKER_SET, onAmountSet);
				amountPicker.addEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				amountPicker.labelText1 = resourceManager.getString('editbgeventview','value') + ' (' + valueGroupLabelIdforUnit.text   + ')';
				PopUpManager.addPopUp(amountPicker, this, true);
				PopUpManager.centerPopUp(amountPicker);
				
				function onAmountCancel(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				}
				
				function onAmountSet(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);

					if (value ==  (event.newValue as Number).toString())
						return;
					
					value = (event.newValue as Number).toString();
					
					if (newFromtimeAndValue == null)
						newFromtimeAndValue = (listOfElements.getItemAt(selectedIndex) as FromtimeAndValue);
					newFromtimeAndValue = 
						new FromtimeAndValue(newFromtimeAndValue.from,new Number(value),newFromtimeAndValue.unit,newFromtimeAndValue.editable,newFromtimeAndValue.deletable);
				}
			}
			
			private function okClicked(e:MouseEvent = null):void {
				if (newFromtimeAndValue != null) {
					listOfElements.removeItemAt(selectedIndex);
					listOfElements.addItem(newFromtimeAndValue);
				}
				navigator.popView();
			}

			override public function createReturnObject():Object {
				return listOfElements;
			}
						
			protected function back_clickHandler(event:MouseEvent):void
			{
				if (newFromtimeAndValue != null) {
					confirmationPicker = new RequestConfirmation();
					confirmationPicker.labelText1 = resourceManager.getString('fromtimeandvalueelementview','savechanges');
					
					confirmationPicker.addEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.addEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
					PopUpManager.addPopUp(confirmationPicker, thisView, true);
					PopUpManager.centerPopUp(confirmationPicker);
				} else 
					navigator.popView();
			}
			
			private function onYesClicked(event:PickerEvent): void
			{
				confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
				confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				okClicked();
			}

			private function onNoClicked(event:PickerEvent): void
			{
				confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
				confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				navigator.popView();
			}
			
			protected function view1_initializeHandler(event:FlexEvent):void
			{
				thisView = this;
			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button label="{back_label}" click="back_clickHandler(event)" height="48"/>
	</s:navigationContent>
	<s:actionContent>
		<s:Button icon="@Embed(source='../assets/Done_48x48.png')" id="OkButton" click="okClicked(event)"/>
	</s:actionContent>
	<s:Group y="0" x="0" width="100%" height = "100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:Label id="topTextLabelId" y="0" x="0" width="100%" height="75" textAlign="center" verticalAlign="middle"/>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="fromGroup" y="0" x="0" width="100%" click="fromGroupClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="fromGroupLabelId" height="47" width="70%" verticalAlign="middle"/>
			<s:Button id="time" height="47" width="30%" label="@{timeText}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="valueGroup" y="0" x="0" width="100%" click="valueGroupClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  id="valueGroupLabelIdforValue" height="47" width="30%" verticalAlign="middle"/>
			<s:Button id="valueId" height="47" width="40%" label="@{value}" />
			<s:Label  id="valueGroupLabelIdforUnit" height="47" width="30%" verticalAlign="middle"/>
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
	</s:Group>
</s:View>
