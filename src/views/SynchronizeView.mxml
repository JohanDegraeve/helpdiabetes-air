<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2017  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!--
initial setup of sync settings
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		initialize="onInitialize()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("synchronizeview")]
		[ResourceBundle("client_secret")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import spark.components.View;
			import utilities.Synchronize;
			
			[Bindable]
			private var back_label:String;
			
			[Bindable]
			private var topLabelText1:String;			
			
			private var loader:URLLoader;
			
			private function onInitialize():void {
				back_label = resourceManager.getString('general','back');
				title = resourceManager.getString('synchronizeview','titlesettingssync');
				
				setViewInStatusSynchronizing();
				Synchronize.getInstance().addEventListener(Synchronize.SYNC_FINISHED,onSyncFinishedEvent);
				Synchronize.getInstance().addEventListener(Synchronize.SYNC_FINISHED,onSyncFinishedEvent);
				//but you never know that sync is not really running, so let's try to retart it
				Synchronize.getInstance().startSynchronize(true,false);
			}
			
			private function onSyncFinishedEvent(event:Event):void {
				if (navigator != null) {
					navigator.popView();
					navigator.pushView(SynchronizeView2);
				}
			}
			
			private function setViewInStatusSynchronizing(event:Event = null):void {
				topLabelText1 = resourceManager.getString('synchronizeview','alreadyauthorized') + '\n' +
					resourceManager.getString('synchronizeview','synchronisationwillstart');
				if (event == null)
					Synchronize.getInstance().addEventListener(Synchronize.NEW_EVENT_UPLOADED,setViewInStatusSynchronizing);
				else  {
					topLabelText1+= Synchronize.getInstance().uploadFoodDatabaseStatus.
						replace("{outof}",resourceManager.getString('synchronizeview','outof')).
						replace("{elementsuploaded}",resourceManager.getString('synchronizeview','elementsuploaded'));	
				}
			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:Group y="0" x="0" width="100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:Label id="topLabel1" width="100%" text="{topLabelText1}" />
		<s:Button id="buttonHelp" width="100%" label="{resourceManager.getString('synchronizeview','step1help')}" click="{navigateToURL(new URLRequest(resourceManager.getString('synchronizeview','helpurl')))}"/>
	</s:Group>
</s:View>
