<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="" 
		backKeyPressed="onBackKeyPressed(event)"
		initialize="onInitialize()"
		creationComplete="onCreationComplete()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("general")]
		[ResourceBundle("settingsboluscalculationview")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.google.analytics.AnalyticsTracker;
			
			import databaseclasses.Meal;
			import databaseclasses.MealEvent;
			import databaseclasses.Settings;
			
			import flashx.textLayout.formats.Float;
			
			import model.ModelLocator;
			
			import mx.managers.PopUpManager;
			
			import myComponents.AmountPicker;
			import myComponents.HelpCallOut;
			import myComponents.PickerEvent;
			import myComponents.RequestConfirmation;
			
			import spark.events.ViewNavigatorEvent;
			
			import utilities.MyGATracker;
			
			private var thisView:View;
			
			private var amountPicker:AmountPicker;
			private var confirmationPicker:RequestConfirmation;
			
			[Bindable]
			private var back_label:String;
			
			private var textAreasVisible:Boolean;

			private var fromTime:Number;
			private var toTime:Number;
			private var secondMeal:int;
			private var alreadyAskedToChangeRatioInCurrentMeal:Boolean;
			private var helpCallOut:HelpCallOut;
			
			/**
			 * if true then no ratio value has been changed yet since the first time the view was created<br>
			 * then false means ... yes the opposite
			 */
			private var firstTime:Boolean = true;
			
			public var tracker:AnalyticsTracker;
			private var trackerId:String;

			private function onInitialize():void {
				trackerId = resourceManager.getString('analytics','trackeraccount');
				thisView = this;
			}
				
			private function onCreationComplete(): void {
				back_label = resourceManager.getString('general','back');
				
				helpCallOut = new HelpCallOut();
				helpCallOut.helpText = resourceManager.getString('settingsboluscalculationview','help_text_changeCarbRatio');
				helpCallOut.settingId = Settings.SettingsHelpTextBolusCalculationViewChangeCarbRatio;
				helpCallOut.addEventListener(PickerEvent.PICKER_SET,helptext1Removed);
				helpCallOut.open(lunchRatio,true);
			}
			
			private function helptext1Removed(event:Event):void {
				helpCallOut.removeEventListener(PickerEvent.PICKER_SET,helptext1Removed);	
			}
			
			private function onBackKeyPressed(event:Event):void {
				if (amountPicker != null) {
					if (amountPicker.isPopUp) {
						PopUpManager.removePopUp(amountPicker);
						event.preventDefault();
					}
					amountPicker = null;
				} 
				if (confirmationPicker != null) {
					if (confirmationPicker.isPopUp) {
						PopUpManager.removePopUp(confirmationPicker);
						event.preventDefault();
					}
					confirmationPicker = null;
				}  
			}
			
			private function breakfastSettingClicked(event:Event):void  {
				prepareAmountPicker(parseFloat(Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_BREKFAST)),resourceManager.getString('general','breakfast'),Settings.SettingINSULIN_RATIO_BREKFAST,breakfastRatio);
			}

			private function lunchSettingClicked(event:Event):void  {				
				prepareAmountPicker(parseFloat(Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_LUNCH)),resourceManager.getString('general','lunch'),Settings.SettingINSULIN_RATIO_LUNCH,lunchRatio);
			}
			
			private function snackSettingClicked(event:Event):void  {
				prepareAmountPicker(parseFloat(Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_SNACK)),resourceManager.getString('general','snack'),Settings.SettingINSULIN_RATIO_SNACK,snackRatio);
			}
			
			private function supperSettingClicked(event:Event):void  {
				prepareAmountPicker(parseFloat(Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_SUPPER)),resourceManager.getString('general','supper'),Settings.SettingINSULIN_RATIO_SUPPER,supperRatio);
			}
			
			private function prepareAmountPicker(amount:Number, mealName:String, settingId:int, button:Button):void {
				var newAmount:Number;
				var secondMeal:int 
				amountPicker = new AmountPicker();
				amountPicker.amount = amount.toString();
				amountPicker.maxNonDecimalDigits = 2;
				amountPicker.decimalDigits = 1;
				amountPicker.labelText1 = resourceManager.getString('settingsboluscalculationview','insulinratio_for');
				amountPicker.labelText2 = mealName;
				amountPicker.addEventListener(PickerEvent.PICKER_SET, onAmountSet);
				amountPicker.addEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				PopUpManager.addPopUp(amountPicker, this, true);
				PopUpManager.centerPopUp(amountPicker);
				
				function onAmountCancel(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				}
				
				function onAmountSet(event: PickerEvent): void
				{
					if (tracker == null) {
						tracker = new MyGATracker( thisView, trackerId, "AS3", false );
					}
					tracker.trackPageview( "SettingsBolusCalculationView-carbRatioChanged" );

					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
					newAmount = event.newValue as Number;
					Settings.getInstance().setSetting(settingId,newAmount.toString());

					//selectedmeal might still point to a previous meal which is finished by now,
					//check if it's more than 15 minutes ago that a fooditem has been added, if so reset selectedmeal
					if (((new Date()).valueOf() - new Number(Settings.getInstance().getSetting(Settings.SettingTIME_OF_LAST_MEAL_ADDITION))) > 15*60*1000) {
						ModelLocator.getInstance().resetSelectedMeal();
					}
					
					//now it could also be that the meal where the last addition was done, is one  in the future, and it's less than 15 minutes ago
					//so we need to assure we'll update also as of the current meal which is..
					secondMeal = ModelLocator.getInstance().getRefreshedSelectedMeal();
					
					//get from and totime
					if (settingId == Settings.SettingINSULIN_RATIO_BREKFAST) {
						fromTime = 0;
						toTime = new Number(Settings.getInstance().getSetting(Settings.SettingBREAKFAST_UNTIL));
					} else if (settingId == Settings.SettingINSULIN_RATIO_LUNCH) {
						fromTime = new Number(Settings.getInstance().getSetting(Settings.SettingBREAKFAST_UNTIL));
						toTime = new Number(Settings.getInstance().getSetting(Settings.SettingLUNCH_UNTIL));
					} else if (settingId == Settings.SettingINSULIN_RATIO_SNACK) {
						fromTime = new Number(Settings.getInstance().getSetting(Settings.SettingLUNCH_UNTIL));
						toTime = new Number(Settings.getInstance().getSetting(Settings.SettingSNACK_UNTIL));
					} else {
						fromTime = new Number(Settings.getInstance().getSetting(Settings.SettingSNACK_UNTIL));
						toTime = 86400000;
					}  

					//added 3/06/2012
					//before we start, check if the user wants to change also the current meal, if it already has a mealevent, otherwise we don't care
					alreadyAskedToChangeRatioInCurrentMeal = false;
					if ((ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).mealEvent) {
						var theMealevent:MealEvent = (ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).mealEvent;
						var mealEventTimeStamp:Date = new Date(theMealevent.timeStamp);
						var mealEventTimeStampHourMinute:Number =  (mealEventTimeStamp.hours * 3600 + mealEventTimeStamp.minutes * 60 + mealEventTimeStamp.seconds)*1000;
						if ((fromTime <= mealEventTimeStampHourMinute) && (mealEventTimeStampHourMinute < toTime)) {
							confirmationPicker = new RequestConfirmation();
							confirmationPicker.labelText1 = resourceManager.getString('settingsboluscalculationview','change_also_mealevent_part_1');
							
							var date:Date = new Date((theMealevent.timeStamp));
							confirmationPicker.labelText2 = 
								theMealevent.mealName + 
								" " + resourceManager.getString('settingsboluscalculationview','at') + 
								" " + (date.hours.toString().length == 1 ? "0":"") + 	date.hours 
								+ ":"  
								+ (date.minutes.toString().length == 1 ? "0":"") + date.minutes
								+ " ?";
							confirmationPicker.addEventListener(PickerEvent.PICKER_SET, onYesClicked);
							confirmationPicker.addEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
							PopUpManager.addPopUp(confirmationPicker, thisView, true);
							PopUpManager.centerPopUp(confirmationPicker);
							alreadyAskedToChangeRatioInCurrentMeal = true;
						} else onYesClicked(null);
					} else onYesClicked(null);
				}
				
				function onYesClicked(event:PickerEvent): void
				{
					if (confirmationPicker) {
						confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
						confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
					}
					//now update all mealevents in trackinglist						
					ModelLocator.getInstance().updateInsulinRatiosInTrackingList(
						(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp < ModelLocator.getInstance().getCurrentlySelectedMeal().timeStamp ? 
						(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp : ModelLocator.getInstance().getCurrentlySelectedMeal().timeStamp,
						newAmount,
						fromTime,
						toTime);
					
					button.label = newAmount.toString();
					if (!firstTime) {
					} else {
						checkOtherSettings(newAmount,
							(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp < ModelLocator.getInstance().getCurrentlySelectedMeal().timeStamp ? 
							(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp : ModelLocator.getInstance().getCurrentlySelectedMeal().timeStamp
							);
					}
				}
				
				function onNoClicked(event: PickerEvent): void
				{
					if (confirmationPicker) {
						confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
						confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
					}//now update all mealevents in trackinglist						
					ModelLocator.getInstance().updateInsulinRatiosInTrackingList(
						(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp + 1,//it's getting a bit strange here, if the user choses no, then we'll update as of secondmeal + 1 ms
						newAmount,
						fromTime,
						toTime);
					
					button.label = (newAmount).toString();
					if (!firstTime) {
					} else {
						checkOtherSettings(newAmount, (ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp + 1);
					}
				}

			}
			
			private function checkOtherSettings(newValue:Number, asofDateAndTime:Number):void {
				firstTime = false;
				confirmationPicker = new RequestConfirmation();
				confirmationPicker.labelText1 = resourceManager.getString('settingsboluscalculationview','change_ratio_part_1');
				confirmationPicker.labelText2 = resourceManager.getString('settingsboluscalculationview','change_ratio_part_2');
				confirmationPicker.addEventListener(PickerEvent.PICKER_SET, onYesClicked);
				confirmationPicker.addEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				
				PopUpManager.addPopUp(confirmationPicker, this, true);
				PopUpManager.centerPopUp(confirmationPicker);
				
				function onYesClicked(event: PickerEvent): void
				{
					firstTime = true;//suppose user changes a next time, then again we'll ask to change all values
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
					
					Settings.getInstance().setSetting(Settings.SettingINSULIN_RATIO_BREKFAST,newValue.toString());
					Settings.getInstance().setSetting(Settings.SettingINSULIN_RATIO_LUNCH,newValue.toString());
					Settings.getInstance().setSetting(Settings.SettingINSULIN_RATIO_SNACK,newValue.toString());
					Settings.getInstance().setSetting(Settings.SettingINSULIN_RATIO_SUPPER,newValue.toString());
					breakfastRatio.label = newValue.toString();
					lunchRatio.label = newValue.toString();
					snackRatio.label = newValue.toString();
					supperRatio.label = newValue.toString();

					//do almost the same as already done above , but no for all meals from 00:00 till 23:59
					//it could also be that the meal where the last addition was done, is one  in the future, and it's less than 15 minutes ago
					//so we need to assure we'll update also as of the current meal which is..
					secondMeal = ModelLocator.getInstance().getRefreshedSelectedMeal();

					//added 3/06/2012
					//before we start, check if the user wants to change also the current meal, if it already has a mealevent, otherwise we don't care
					if (!alreadyAskedToChangeRatioInCurrentMeal) {
						if ((ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).mealEvent) {
								var theMealevent:MealEvent = (ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).mealEvent;
								confirmationPicker = new RequestConfirmation();
								confirmationPicker.labelText1 = resourceManager.getString('settingsboluscalculationview','change_also_mealevent_part_1');

								var date:Date = new Date((theMealevent.timeStamp));
								confirmationPicker.labelText2 = 
									theMealevent.mealName + 
									" " + resourceManager.getString('settingsboluscalculationview','at') + 
									" " + (date.hours.toString().length == 1 ? "0":"") + 	date.hours 
									+ ":"  
									+ (date.minutes.toString().length == 1 ? "0":"") + date.minutes
									+ " ?";

								confirmationPicker.addEventListener(PickerEvent.PICKER_SET, onYesYesClicked);
								confirmationPicker.addEventListener(PickerEvent.PICKER_CANCEL, onNoNoClicked);
								PopUpManager.addPopUp(confirmationPicker, thisView, true);
								PopUpManager.centerPopUp(confirmationPicker);
								alreadyAskedToChangeRatioInCurrentMeal = true;
						} else onYesYesClicked(null);
					} else {
						onYesYesClicked(null);
					}
				}
				
				function onNoClicked(event: PickerEvent): void
				{
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				}
				
				function onYesYesClicked(event: PickerEvent): void {
					if (confirmationPicker) {
						confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesYesClicked);
						confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoNoClicked);
					}
					ModelLocator.getInstance().updateInsulinRatiosInTrackingList(
						asofDateAndTime,
						newValue,
						0,
						86400000);
				}

				function onNoNoClicked(event: PickerEvent): void {
					if (confirmationPicker) {
						confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesYesClicked);
						confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoNoClicked);
					}
					ModelLocator.getInstance().updateInsulinRatiosInTrackingList(
						asofDateAndTime + 1,
						newValue,
						0,
						86400000);
				}
			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button   label="{back_label}" id="backButton" click="navigator.popView()" height="48"/>
	</s:navigationContent>
	<s:Group y="0" x="0" width="100%" height="100%"  left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:Label  y="0" x="0" width="100%"  text="{resourceManager.getString('settingsboluscalculationview','explainingtext')}"/>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="breakfastSetting" y="0" x="0" width="100%" height = "100%" maxHeight="50" click="breakfastSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label  width="60%" text="{resourceManager.getString('general','breakfast') }" />
			<s:Button id="breakfastRatio" width="40%" label="{Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_BREKFAST)}"  />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="lunchSetting" y="0" x="0" width="100%" height = "100%" maxHeight="50" click="lunchSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label width="60%" text="{resourceManager.getString('general','lunch') }" />
			<s:Button id="lunchRatio" width="40%" label="{Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_LUNCH)}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="snackSetting" y="0" x="0" width="100%" height = "100%" maxHeight="50" click="snackSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label width="60%" text="{resourceManager.getString('general','snack') }" />
			<s:Button id="snackRatio" width="40%" label="{Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_SNACK)}" />
		</s:Group>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xcccccc" weight="1"/>
			</s:stroke>
		</s:Line>	
		<s:Group id="supperSetting" y="0" x="0" width="100%" height = "100%" maxHeight="50" click="supperSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle">
				</s:HorizontalLayout>
			</s:layout>
			<s:Label width="60%" text="{resourceManager.getString('general','supper') }" />
			<s:Button id="supperRatio" width="40%" label="{Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_SUPPER)}" />
		</s:Group>
	</s:Group>
</s:View>
