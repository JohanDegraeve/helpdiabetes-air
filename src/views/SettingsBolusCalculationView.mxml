<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2011  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="SettingsBolusCalculationView" removed="onRemoved(event)"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("settingsview")]
		[ResourceBundle("general")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import databaseclasses.Meal;
			import databaseclasses.Settings;
			
			import flashx.textLayout.formats.Float;
			
			import model.ModelLocator;
			
			import mx.managers.PopUpManager;
			
			import myComponents.AmountPicker;
			import myComponents.PickerEvent;
			import myComponents.RequestConfirmation;
			
			private var amountPicker:AmountPicker;
			private var confirmationPicker:RequestConfirmation;
			
			/**
			 * if true then no ratio value has been changed yet since the first time the view was created<br>
			 * then false means ... yes the opposite
			 */
			private var firstTime:Boolean = true;
			
			private function breakfastSettingClicked(event:Event):void  {
				prepareAmountPicker(parseFloat(Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_BREKFAST)),resourceManager.getString('general','breakfast'),Settings.SettingINSULIN_RATIO_BREKFAST,breakfastRatio);
			}

			private function lunchSettingClicked(event:Event):void  {
				prepareAmountPicker(parseFloat(Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_LUNCH)),resourceManager.getString('general','lunch'),Settings.SettingINSULIN_RATIO_LUNCH,lunchRatio);
			}
			
			private function snackSettingClicked(event:Event):void  {
				prepareAmountPicker(parseFloat(Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_SNACK)),resourceManager.getString('general','snack'),Settings.SettingINSULIN_RATIO_SNACK,snackRatio);
			}
			
			private function supperSettingClicked(event:Event):void  {
				prepareAmountPicker(parseFloat(Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_SUPPER)),resourceManager.getString('general','supper'),Settings.SettingINSULIN_RATIO_SUPPER,supperRatio);
			}
			
			private function prepareAmountPicker(amount:Number, mealName:String, settingId:int, textArea:TextArea):void {
				amountPicker = new AmountPicker();
				amountPicker.amount = amount.toString();
				amountPicker.labelText1 = resourceManager.getString('settingsview','insulinratio_for');
				amountPicker.labelText2 = mealName;
				amountPicker.addEventListener(PickerEvent.PICKER_SET, onAmountSet);
				amountPicker.addEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				PopUpManager.addPopUp(amountPicker, this, true);
				
				
				function onAmountCancel(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
				}
				
				function onAmountSet(event: PickerEvent): void
				{
					amountPicker.removeEventListener(PickerEvent.PICKER_SET, onAmountSet);
					amountPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onAmountCancel);
					Settings.getInstance().setSetting(settingId,(event.newValue as Number).toString());

					//selectedmeal might still point to a previous meal which is finished by now,
					//check if it's more than 15 minutes ago that a fooditem has been added, if so reset selectedmeal
					if (((new Date()).valueOf() - new Number(Settings.getInstance().getSetting(Settings.SettingTIME_OF_LAST_MEAL_ADDITION))) > 15*60*1000) {
						ModelLocator.getInstance().resetSelectedMeal();
					}
					
					//now it could also be that the meal where the last addition was done, is one  in the future, and it's less than 15 minutes ago
					//so we need to assure we'll update also as of the current meal which is..
					var secondMeal:int = ModelLocator.getInstance().getRefreshedSelectedMeal();
					//get from and totime
					var fromTime:Number;
					var toTime:Number;
					if (settingId == Settings.SettingINSULIN_RATIO_BREKFAST) {
						fromTime = 0;
						toTime = new Number(Settings.getInstance().getSetting(Settings.SettingBREAKFAST_UNTIL));
					} else if (settingId == Settings.SettingINSULIN_RATIO_LUNCH) {
						fromTime = new Number(Settings.getInstance().getSetting(Settings.SettingBREAKFAST_UNTIL));
						toTime = new Number(Settings.getInstance().getSetting(Settings.SettingLUNCH_UNTIL));
					} else if (settingId == Settings.SettingINSULIN_RATIO_SNACK) {
						fromTime = new Number(Settings.getInstance().getSetting(Settings.SettingLUNCH_UNTIL));
						toTime = new Number(Settings.getInstance().getSetting(Settings.SettingSNACK_UNTIL));
					} else {
						fromTime = new Number(Settings.getInstance().getSetting(Settings.SettingSNACK_UNTIL));
						toTime = 86400000;
					}  
					//now update all mealevents in trackinglist						
					ModelLocator.getInstance().updateInsulinRatiosInTrackingList(
						(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp < ModelLocator.getInstance().getCurrentlySelectedMeal().timeStamp ? 
						(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp : ModelLocator.getInstance().getCurrentlySelectedMeal().timeStamp,
						(event.newValue as Number),
						fromTime,
						toTime);
					
						textArea.text = (event.newValue as Number).toString();
					if (!firstTime) {
					} else {
						checkOtherSettings(event.newValue as Number);
					}
				}
				

			}
			
			
			private function checkOtherSettings(newValue:Number):void {
				firstTime = false;
				confirmationPicker = new RequestConfirmation();
				confirmationPicker.labelText1 = resourceManager.getString('settingsview','change_ratio_part_1');
				confirmationPicker.labelText2 = resourceManager.getString('settingsview','change_ratio_part_2');
				confirmationPicker.addEventListener(PickerEvent.PICKER_SET, onYesClicked);
				confirmationPicker.addEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				
				PopUpManager.addPopUp(confirmationPicker, this, true);
				PopUpManager.centerPopUp(confirmationPicker);
				function onYesClicked(event: PickerEvent): void
				{
					firstTime = true;//suppose user changes a next time, then again we'll ask to change all values
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
					
					Settings.getInstance().setSetting(Settings.SettingINSULIN_RATIO_BREKFAST,newValue.toString());
					Settings.getInstance().setSetting(Settings.SettingINSULIN_RATIO_LUNCH,newValue.toString());
					Settings.getInstance().setSetting(Settings.SettingINSULIN_RATIO_SNACK,newValue.toString());
					Settings.getInstance().setSetting(Settings.SettingINSULIN_RATIO_SUPPER,newValue.toString());
					breakfastRatio.text = (newValue as Number).toString();
					lunchRatio.text = (newValue as Number).toString();
					snackRatio.text = (newValue as Number).toString();
					supperRatio.text = (newValue as Number).toString();

					//do almost the same as already done above , but no for all meals from 00:00 till 23:59
					//it could also be that the meal where the last addition was done, is one  in the future, and it's less than 15 minutes ago
					//so we need to assure we'll update also as of the current meal which is..
					var secondMeal:int = ModelLocator.getInstance().getRefreshedSelectedMeal();
					//now update all mealevents in trackinglist					
					ModelLocator.getInstance().updateInsulinRatiosInTrackingList(
						(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp < ModelLocator.getInstance().getCurrentlySelectedMeal().timeStamp ? 
						(ModelLocator.getInstance().meals.getItemAt(secondMeal) as Meal).timeStamp : ModelLocator.getInstance().getCurrentlySelectedMeal().timeStamp,
						(event.newValue as Number),
						0,
						86400000);
				}
				
				function onNoClicked(event: PickerEvent): void
				{
					confirmationPicker.removeEventListener(PickerEvent.PICKER_SET, onYesClicked);
					confirmationPicker.removeEventListener(PickerEvent.PICKER_CANCEL, onNoClicked);
				}
			}
			
			private function onRemoved(event:Event):void
			{
				if (amountPicker != null)
					PopUpManager.removePopUp(amountPicker);
			}
			
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button label="Back" id="backButton" click="navigator.popView()"/>
	</s:navigationContent>
	<s:Group y="0" x="0" width="100%" height = "100%" >
		<s:layout>
			<s:VerticalLayout>
			</s:VerticalLayout>
		</s:layout>
		<s:Group id="breakfastSetting" y="0" x="0" width="100%" height = "100%" click="breakfastSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout>
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea width="60%" text="{resourceManager.getString('general','breakfast') + ' :'}" editable="false"/>
			<s:TextArea id="breakfastRatio" width="40%" text="{Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_BREKFAST)}" editable="false"/>
		</s:Group>
		<s:Group id="lunchSetting" y="0" x="0" width="100%" height = "100%" click="lunchSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout>
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea width="60%" text="{resourceManager.getString('general','lunch') + ' :'}" editable="false"/>
			<s:TextArea id="lunchRatio" width="40%" text="{Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_LUNCH)}" editable="false"/>
		</s:Group>
		<s:Group id="snackSetting" y="0" x="0" width="100%" height = "100%" click="snackSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout>
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea width="60%" text="{resourceManager.getString('general','snack') + ' :'}" editable="false"/>
			<s:TextArea id="snackRatio" width="40%" text="{Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_SNACK)}" editable="false"/>
		</s:Group>
		<s:Group id="supperSetting" y="0" x="0" width="100%" height = "100%" click="supperSettingClicked(event)">
			<s:layout>
				<s:HorizontalLayout>
				</s:HorizontalLayout>
			</s:layout>
			<s:TextArea width="60%" text="{resourceManager.getString('general','supper') + ' :'}" editable="false"/>
			<s:TextArea id="supperRatio" width="40%" text="{Settings.getInstance().getSetting(Settings.SettingINSULIN_RATIO_SUPPER)}" editable="false"/>
		</s:Group>
	</s:Group>
</s:View>
