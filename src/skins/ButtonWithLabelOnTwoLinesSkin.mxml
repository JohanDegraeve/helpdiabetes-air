<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2013  hippoandfriends

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl.txt>.

-->
<!--
goal is to have label with multiple lines
copied spark.skins.spark.buttonskin where I removed the maxdisplayedlines but also increased top and bottom in the Label<brt>
had to remove also lowlight and highlight and some more ...
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 minWidth="21" minHeight="21"
			 alpha.disabled="0.5">
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("spark.components.Button")]
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			/* Define the skin elements that should not be colorized.
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay"];
			private var cornerRadius:Number = 6;
			
			override public function get colorizeExclusions():Array {
				return exclusions;
			}
			
			
			override protected function initializationComplete():void {
				useChromeColor = true;
				super.initializationComplete();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void {
				
				if (fill) 
					fill.radiusX = cornerRadius;
				if (border)
					border.radiusX = cornerRadius;
				if (hldownstroke1)
					hldownstroke1.radiusX = cornerRadius;

				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
		]]>
	</fx:Script>
	
	<!-- layer 2: fill  -->
	<s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xEBEBEB" ratio="0.0" color.over="0xCCCCCC" color.down="0xCCCCCC" alpha="1" />
				<s:GradientEntry color="0xCCCCCC" ratio="1.0" color.over="0x9A9A9A" color.down="0x9A9A9A" alpha="1" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	
	<!-- layer 6: highlight stroke (down state only) -->
	<s:Rect id="hldownstroke1" left="1" right="1" top="1" bottom="1" radiusX="2" includeIn="down">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0xCCCCCC" ratio="0.0" color.over="0xCCCCCC" color.down="0xCCCCCC" alpha="1" />
				<s:GradientEntry color="0x9A9A9A" ratio="1.0" color.over="0x9A9A9A" color.down="0x9A9A9A" alpha="1" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" alpha="0.5625" alpha.down="0.6375" />
				<s:GradientEntry color="0x000000" alpha="0.75" alpha.down="0.85" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 8: text -->
	<s:Label id="labelDisplay"
			 textAlign="left"
			 verticalAlign="middle"
			 maxDisplayedLines="2"
			 horizontalCenter="0" verticalCenter="1"
			 left="10" right="10" top="10" bottom="10" />
	
</s:SparkSkin>